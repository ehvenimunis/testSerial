
testSerial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800a038  0800a038  0001a038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1f4  0800a1f4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1f4  0800a1f4  0001a1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1fc  0800a1fc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1fc  0800a1fc  0001a1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a200  0800a200  0001a200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ce8  20000078  0800a27c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004d60  0800a27c  00024d60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000219a5  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004112  00000000  00000000  00041a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a78  00000000  00000000  00045b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018d0  00000000  00000000  000475d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024768  00000000  00000000  00048ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001630a  00000000  00000000  0006d610  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000da569  00000000  00000000  0008391a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015de83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072d8  00000000  00000000  0015df00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a020 	.word	0x0800a020

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800a020 	.word	0x0800a020

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000658:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800065c:	f000 b972 	b.w	8000944 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9e08      	ldr	r6, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	4688      	mov	r8, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d14b      	bne.n	800071e <__udivmoddi4+0xa6>
 8000686:	428a      	cmp	r2, r1
 8000688:	4615      	mov	r5, r2
 800068a:	d967      	bls.n	800075c <__udivmoddi4+0xe4>
 800068c:	fab2 f282 	clz	r2, r2
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0720 	rsb	r7, r2, #32
 8000696:	fa01 f302 	lsl.w	r3, r1, r2
 800069a:	fa20 f707 	lsr.w	r7, r0, r7
 800069e:	4095      	lsls	r5, r2
 80006a0:	ea47 0803 	orr.w	r8, r7, r3
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbb8 f7fe 	udiv	r7, r8, lr
 80006b0:	fa1f fc85 	uxth.w	ip, r5
 80006b4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006bc:	fb07 f10c 	mul.w	r1, r7, ip
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18eb      	adds	r3, r5, r3
 80006c6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80006ca:	f080 811b 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8118 	bls.w	8000904 <__udivmoddi4+0x28c>
 80006d4:	3f02      	subs	r7, #2
 80006d6:	442b      	add	r3, r5
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ec:	45a4      	cmp	ip, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	192c      	adds	r4, r5, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006f6:	f080 8107 	bcs.w	8000908 <__udivmoddi4+0x290>
 80006fa:	45a4      	cmp	ip, r4
 80006fc:	f240 8104 	bls.w	8000908 <__udivmoddi4+0x290>
 8000700:	3802      	subs	r0, #2
 8000702:	442c      	add	r4, r5
 8000704:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000708:	eba4 040c 	sub.w	r4, r4, ip
 800070c:	2700      	movs	r7, #0
 800070e:	b11e      	cbz	r6, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c6 4300 	strd	r4, r3, [r6]
 8000718:	4639      	mov	r1, r7
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	428b      	cmp	r3, r1
 8000720:	d909      	bls.n	8000736 <__udivmoddi4+0xbe>
 8000722:	2e00      	cmp	r6, #0
 8000724:	f000 80eb 	beq.w	80008fe <__udivmoddi4+0x286>
 8000728:	2700      	movs	r7, #0
 800072a:	e9c6 0100 	strd	r0, r1, [r6]
 800072e:	4638      	mov	r0, r7
 8000730:	4639      	mov	r1, r7
 8000732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000736:	fab3 f783 	clz	r7, r3
 800073a:	2f00      	cmp	r7, #0
 800073c:	d147      	bne.n	80007ce <__udivmoddi4+0x156>
 800073e:	428b      	cmp	r3, r1
 8000740:	d302      	bcc.n	8000748 <__udivmoddi4+0xd0>
 8000742:	4282      	cmp	r2, r0
 8000744:	f200 80fa 	bhi.w	800093c <__udivmoddi4+0x2c4>
 8000748:	1a84      	subs	r4, r0, r2
 800074a:	eb61 0303 	sbc.w	r3, r1, r3
 800074e:	2001      	movs	r0, #1
 8000750:	4698      	mov	r8, r3
 8000752:	2e00      	cmp	r6, #0
 8000754:	d0e0      	beq.n	8000718 <__udivmoddi4+0xa0>
 8000756:	e9c6 4800 	strd	r4, r8, [r6]
 800075a:	e7dd      	b.n	8000718 <__udivmoddi4+0xa0>
 800075c:	b902      	cbnz	r2, 8000760 <__udivmoddi4+0xe8>
 800075e:	deff      	udf	#255	; 0xff
 8000760:	fab2 f282 	clz	r2, r2
 8000764:	2a00      	cmp	r2, #0
 8000766:	f040 808f 	bne.w	8000888 <__udivmoddi4+0x210>
 800076a:	1b49      	subs	r1, r1, r5
 800076c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000770:	fa1f f885 	uxth.w	r8, r5
 8000774:	2701      	movs	r7, #1
 8000776:	fbb1 fcfe 	udiv	ip, r1, lr
 800077a:	0c23      	lsrs	r3, r4, #16
 800077c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000780:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000784:	fb08 f10c 	mul.w	r1, r8, ip
 8000788:	4299      	cmp	r1, r3
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0x124>
 800078c:	18eb      	adds	r3, r5, r3
 800078e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x122>
 8000794:	4299      	cmp	r1, r3
 8000796:	f200 80cd 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 800079a:	4684      	mov	ip, r0
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	b2a3      	uxth	r3, r4
 80007a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007a4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007ac:	fb08 f800 	mul.w	r8, r8, r0
 80007b0:	45a0      	cmp	r8, r4
 80007b2:	d907      	bls.n	80007c4 <__udivmoddi4+0x14c>
 80007b4:	192c      	adds	r4, r5, r4
 80007b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x14a>
 80007bc:	45a0      	cmp	r8, r4
 80007be:	f200 80b6 	bhi.w	800092e <__udivmoddi4+0x2b6>
 80007c2:	4618      	mov	r0, r3
 80007c4:	eba4 0408 	sub.w	r4, r4, r8
 80007c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007cc:	e79f      	b.n	800070e <__udivmoddi4+0x96>
 80007ce:	f1c7 0c20 	rsb	ip, r7, #32
 80007d2:	40bb      	lsls	r3, r7
 80007d4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007d8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007dc:	fa01 f407 	lsl.w	r4, r1, r7
 80007e0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007e4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007ec:	4325      	orrs	r5, r4
 80007ee:	fbb3 f9f8 	udiv	r9, r3, r8
 80007f2:	0c2c      	lsrs	r4, r5, #16
 80007f4:	fb08 3319 	mls	r3, r8, r9, r3
 80007f8:	fa1f fa8e 	uxth.w	sl, lr
 80007fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000800:	fb09 f40a 	mul.w	r4, r9, sl
 8000804:	429c      	cmp	r4, r3
 8000806:	fa02 f207 	lsl.w	r2, r2, r7
 800080a:	fa00 f107 	lsl.w	r1, r0, r7
 800080e:	d90b      	bls.n	8000828 <__udivmoddi4+0x1b0>
 8000810:	eb1e 0303 	adds.w	r3, lr, r3
 8000814:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000818:	f080 8087 	bcs.w	800092a <__udivmoddi4+0x2b2>
 800081c:	429c      	cmp	r4, r3
 800081e:	f240 8084 	bls.w	800092a <__udivmoddi4+0x2b2>
 8000822:	f1a9 0902 	sub.w	r9, r9, #2
 8000826:	4473      	add	r3, lr
 8000828:	1b1b      	subs	r3, r3, r4
 800082a:	b2ad      	uxth	r5, r5
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000838:	fb00 fa0a 	mul.w	sl, r0, sl
 800083c:	45a2      	cmp	sl, r4
 800083e:	d908      	bls.n	8000852 <__udivmoddi4+0x1da>
 8000840:	eb1e 0404 	adds.w	r4, lr, r4
 8000844:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000848:	d26b      	bcs.n	8000922 <__udivmoddi4+0x2aa>
 800084a:	45a2      	cmp	sl, r4
 800084c:	d969      	bls.n	8000922 <__udivmoddi4+0x2aa>
 800084e:	3802      	subs	r0, #2
 8000850:	4474      	add	r4, lr
 8000852:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000856:	fba0 8902 	umull	r8, r9, r0, r2
 800085a:	eba4 040a 	sub.w	r4, r4, sl
 800085e:	454c      	cmp	r4, r9
 8000860:	46c2      	mov	sl, r8
 8000862:	464b      	mov	r3, r9
 8000864:	d354      	bcc.n	8000910 <__udivmoddi4+0x298>
 8000866:	d051      	beq.n	800090c <__udivmoddi4+0x294>
 8000868:	2e00      	cmp	r6, #0
 800086a:	d069      	beq.n	8000940 <__udivmoddi4+0x2c8>
 800086c:	ebb1 050a 	subs.w	r5, r1, sl
 8000870:	eb64 0403 	sbc.w	r4, r4, r3
 8000874:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000878:	40fd      	lsrs	r5, r7
 800087a:	40fc      	lsrs	r4, r7
 800087c:	ea4c 0505 	orr.w	r5, ip, r5
 8000880:	e9c6 5400 	strd	r5, r4, [r6]
 8000884:	2700      	movs	r7, #0
 8000886:	e747      	b.n	8000718 <__udivmoddi4+0xa0>
 8000888:	f1c2 0320 	rsb	r3, r2, #32
 800088c:	fa20 f703 	lsr.w	r7, r0, r3
 8000890:	4095      	lsls	r5, r2
 8000892:	fa01 f002 	lsl.w	r0, r1, r2
 8000896:	fa21 f303 	lsr.w	r3, r1, r3
 800089a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800089e:	4338      	orrs	r0, r7
 80008a0:	0c01      	lsrs	r1, r0, #16
 80008a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008a6:	fa1f f885 	uxth.w	r8, r5
 80008aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80008ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b2:	fb07 f308 	mul.w	r3, r7, r8
 80008b6:	428b      	cmp	r3, r1
 80008b8:	fa04 f402 	lsl.w	r4, r4, r2
 80008bc:	d907      	bls.n	80008ce <__udivmoddi4+0x256>
 80008be:	1869      	adds	r1, r5, r1
 80008c0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80008c4:	d22f      	bcs.n	8000926 <__udivmoddi4+0x2ae>
 80008c6:	428b      	cmp	r3, r1
 80008c8:	d92d      	bls.n	8000926 <__udivmoddi4+0x2ae>
 80008ca:	3f02      	subs	r7, #2
 80008cc:	4429      	add	r1, r5
 80008ce:	1acb      	subs	r3, r1, r3
 80008d0:	b281      	uxth	r1, r0
 80008d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008de:	fb00 f308 	mul.w	r3, r0, r8
 80008e2:	428b      	cmp	r3, r1
 80008e4:	d907      	bls.n	80008f6 <__udivmoddi4+0x27e>
 80008e6:	1869      	adds	r1, r5, r1
 80008e8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80008ec:	d217      	bcs.n	800091e <__udivmoddi4+0x2a6>
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d915      	bls.n	800091e <__udivmoddi4+0x2a6>
 80008f2:	3802      	subs	r0, #2
 80008f4:	4429      	add	r1, r5
 80008f6:	1ac9      	subs	r1, r1, r3
 80008f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008fc:	e73b      	b.n	8000776 <__udivmoddi4+0xfe>
 80008fe:	4637      	mov	r7, r6
 8000900:	4630      	mov	r0, r6
 8000902:	e709      	b.n	8000718 <__udivmoddi4+0xa0>
 8000904:	4607      	mov	r7, r0
 8000906:	e6e7      	b.n	80006d8 <__udivmoddi4+0x60>
 8000908:	4618      	mov	r0, r3
 800090a:	e6fb      	b.n	8000704 <__udivmoddi4+0x8c>
 800090c:	4541      	cmp	r1, r8
 800090e:	d2ab      	bcs.n	8000868 <__udivmoddi4+0x1f0>
 8000910:	ebb8 0a02 	subs.w	sl, r8, r2
 8000914:	eb69 020e 	sbc.w	r2, r9, lr
 8000918:	3801      	subs	r0, #1
 800091a:	4613      	mov	r3, r2
 800091c:	e7a4      	b.n	8000868 <__udivmoddi4+0x1f0>
 800091e:	4660      	mov	r0, ip
 8000920:	e7e9      	b.n	80008f6 <__udivmoddi4+0x27e>
 8000922:	4618      	mov	r0, r3
 8000924:	e795      	b.n	8000852 <__udivmoddi4+0x1da>
 8000926:	4667      	mov	r7, ip
 8000928:	e7d1      	b.n	80008ce <__udivmoddi4+0x256>
 800092a:	4681      	mov	r9, r0
 800092c:	e77c      	b.n	8000828 <__udivmoddi4+0x1b0>
 800092e:	3802      	subs	r0, #2
 8000930:	442c      	add	r4, r5
 8000932:	e747      	b.n	80007c4 <__udivmoddi4+0x14c>
 8000934:	f1ac 0c02 	sub.w	ip, ip, #2
 8000938:	442b      	add	r3, r5
 800093a:	e72f      	b.n	800079c <__udivmoddi4+0x124>
 800093c:	4638      	mov	r0, r7
 800093e:	e708      	b.n	8000752 <__udivmoddi4+0xda>
 8000940:	4637      	mov	r7, r6
 8000942:	e6e9      	b.n	8000718 <__udivmoddi4+0xa0>

08000944 <__aeabi_idiv0>:
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <CI_writeSmallDataWithRegister>:
 * @brief Write small data to Computer Values
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
void CI_writeSmallDataWithRegister(UART_HandleTypeDef *uartChannel, uint8_t data){
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	70fb      	strb	r3, [r7, #3]
	while((uartChannel->Instance->SR & USART_SR_TXE)!=USART_SR_TXE);
 8000954:	bf00      	nop
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000960:	2b80      	cmp	r3, #128	; 0x80
 8000962:	d1f8      	bne.n	8000956 <CI_writeSmallDataWithRegister+0xe>
	uartChannel->Instance->DR=data;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	78fa      	ldrb	r2, [r7, #3]
 800096a:	605a      	str	r2, [r3, #4]
	while((uartChannel->Instance->SR & USART_SR_TC)!=USART_SR_TC);
 800096c:	bf00      	nop
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000978:	2b40      	cmp	r3, #64	; 0x40
 800097a:	d1f8      	bne.n	800096e <CI_writeSmallDataWithRegister+0x26>
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <CI_sendDataChannel>:
 * @param batt_per-> battery percent value
 * @return none
 */
uint32_t time1,time2,deltaTime;
void CI_sendDataChannel(uint16_t lenght, int32_t steer_poss,
		int32_t driver_poss, int32_t driver_speed,uint8_t batt_per){
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	4603      	mov	r3, r0
 8000996:	81fb      	strh	r3, [r7, #14]
	time1=HAL_GetTick();
 8000998:	f000 ffb0 	bl	80018fc <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	4b3b      	ldr	r3, [pc, #236]	; (8000a8c <CI_sendDataChannel+0x104>)
 80009a0:	601a      	str	r2, [r3, #0]
	uint8_t sendBuff[] = { 0x43, 0X64,
 80009a2:	2343      	movs	r3, #67	; 0x43
 80009a4:	753b      	strb	r3, [r7, #20]
 80009a6:	2364      	movs	r3, #100	; 0x64
 80009a8:	757b      	strb	r3, [r7, #21]
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	75bb      	strb	r3, [r7, #22]
 80009b0:	89fb      	ldrh	r3, [r7, #14]
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	75fb      	strb	r3, [r7, #23]
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	763b      	strb	r3, [r7, #24]
			lenght & 0xFF,lenght >> 8,
			steer_poss & 0xFF,steer_poss >> 8,steer_poss >> 16,steer_poss >> 24,
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	121b      	asrs	r3, r3, #8
	uint8_t sendBuff[] = { 0x43, 0X64,
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	767b      	strb	r3, [r7, #25]
			steer_poss & 0xFF,steer_poss >> 8,steer_poss >> 16,steer_poss >> 24,
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	141b      	asrs	r3, r3, #16
	uint8_t sendBuff[] = { 0x43, 0X64,
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	76bb      	strb	r3, [r7, #26]
			steer_poss & 0xFF,steer_poss >> 8,steer_poss >> 16,steer_poss >> 24,
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	161b      	asrs	r3, r3, #24
	uint8_t sendBuff[] = { 0x43, 0X64,
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	76fb      	strb	r3, [r7, #27]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	773b      	strb	r3, [r7, #28]
			driver_poss & 0xFF,driver_poss >> 8,driver_poss >> 16,driver_poss >> 24,
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	121b      	asrs	r3, r3, #8
	uint8_t sendBuff[] = { 0x43, 0X64,
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	777b      	strb	r3, [r7, #29]
			driver_poss & 0xFF,driver_poss >> 8,driver_poss >> 16,driver_poss >> 24,
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	141b      	asrs	r3, r3, #16
	uint8_t sendBuff[] = { 0x43, 0X64,
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	77bb      	strb	r3, [r7, #30]
			driver_poss & 0xFF,driver_poss >> 8,driver_poss >> 16,driver_poss >> 24,
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	161b      	asrs	r3, r3, #24
	uint8_t sendBuff[] = { 0x43, 0X64,
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	77fb      	strb	r3, [r7, #31]
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f887 3020 	strb.w	r3, [r7, #32]
			driver_speed & 0xFF,driver_speed >> 8,driver_speed >> 16,driver_speed >> 24,
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	121b      	asrs	r3, r3, #8
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			driver_speed & 0xFF,driver_speed >> 8,driver_speed >> 16,driver_speed >> 24,
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	141b      	asrs	r3, r3, #16
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			driver_speed & 0xFF,driver_speed >> 8,driver_speed >> 16,driver_speed >> 24,
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	161b      	asrs	r3, r3, #24
	uint8_t sendBuff[] = { 0x43, 0X64,
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000a1c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			batt_per };
	for (uint8_t counter = 0; counter < 17; counter++) {
 8000a24:	2300      	movs	r3, #0
 8000a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a2a:	e00f      	b.n	8000a4c <CI_sendDataChannel+0xc4>
		CI_writeSmallDataWithRegister(&ComputerChannel, sendBuff[counter]);
 8000a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a34:	4413      	add	r3, r2
 8000a36:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4814      	ldr	r0, [pc, #80]	; (8000a90 <CI_sendDataChannel+0x108>)
 8000a3e:	f7ff ff83 	bl	8000948 <CI_writeSmallDataWithRegister>
	for (uint8_t counter = 0; counter < 17; counter++) {
 8000a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a46:	3301      	adds	r3, #1
 8000a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a50:	2b10      	cmp	r3, #16
 8000a52:	d9eb      	bls.n	8000a2c <CI_sendDataChannel+0xa4>
	}
	time2=HAL_GetTick();
 8000a54:	f000 ff52 	bl	80018fc <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <CI_sendDataChannel+0x10c>)
 8000a5c:	601a      	str	r2, [r3, #0]
	deltaTime=time2-time1;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <CI_sendDataChannel+0x10c>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <CI_sendDataChannel+0x104>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <CI_sendDataChannel+0x110>)
 8000a6a:	6013      	str	r3, [r2, #0]
	if(deltaTime<10) vTaskDelay((10-deltaTime));
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <CI_sendDataChannel+0x110>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b09      	cmp	r3, #9
 8000a72:	d806      	bhi.n	8000a82 <CI_sendDataChannel+0xfa>
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <CI_sendDataChannel+0x110>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f1c3 030a 	rsb	r3, r3, #10
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f005 fb1d 	bl	80060bc <vTaskDelay>
}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20004a20 	.word	0x20004a20
 8000a90:	20004bf0 	.word	0x20004bf0
 8000a94:	20004a30 	.word	0x20004a30
 8000a98:	20004a34 	.word	0x20004a34
 8000a9c:	00000000 	.word	0x00000000

08000aa0 <testCIsend>:

static double test=0;
static int32_t ctSpeed=0;
void testCIsend(void){
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af02      	add	r7, sp, #8

	test+=0.01;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <testCIsend+0x68>)
 8000aa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000aac:	a314      	add	r3, pc, #80	; (adr r3, 8000b00 <testCIsend+0x60>)
 8000aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab2:	f7ff fbeb 	bl	800028c <__adddf3>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	460c      	mov	r4, r1
 8000aba:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <testCIsend+0x68>)
 8000abc:	e9c2 3400 	strd	r3, r4, [r2]
	ctSpeed=(int32_t)test*10000;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <testCIsend+0x68>)
 8000ac2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	4621      	mov	r1, r4
 8000aca:	f7ff fd95 	bl	80005f8 <__aeabi_d2iz>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ad4:	fb03 f302 	mul.w	r3, r3, r2
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <testCIsend+0x6c>)
 8000ada:	6013      	str	r3, [r2, #0]
	CI_sendDataChannel(0x11,getVals.steer_pos,ctSpeed,getVals.drive_speed,90);
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <testCIsend+0x70>)
 8000ade:	6859      	ldr	r1, [r3, #4]
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <testCIsend+0x6c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <testCIsend+0x70>)
 8000ae6:	6898      	ldr	r0, [r3, #8]
 8000ae8:	235a      	movs	r3, #90	; 0x5a
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	4603      	mov	r3, r0
 8000aee:	2011      	movs	r0, #17
 8000af0:	f7ff ff4a 	bl	8000988 <CI_sendDataChannel>


}
 8000af4:	bf00      	nop
 8000af6:	3704      	adds	r7, #4
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	f3af 8000 	nop.w
 8000b00:	47ae147b 	.word	0x47ae147b
 8000b04:	3f847ae1 	.word	0x3f847ae1
 8000b08:	20000098 	.word	0x20000098
 8000b0c:	200000a0 	.word	0x200000a0
 8000b10:	20004a24 	.word	0x20004a24

08000b14 <CI_enableGetDataChannel>:
uint8_t  getTmpCH = 0;
/**
 * @brief set enable for MDI channel 1 receive
 * @return none
 */
void CI_enableGetDataChannel(void){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&ComputerChannel,&getTmpCH,1);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4903      	ldr	r1, [pc, #12]	; (8000b28 <CI_enableGetDataChannel+0x14>)
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <CI_enableGetDataChannel+0x18>)
 8000b1e:	f003 fc0c 	bl	800433a <HAL_UART_Receive_IT>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000a4 	.word	0x200000a4
 8000b2c:	20004bf0 	.word	0x20004bf0

08000b30 <CI_getDataChannel_IT>:
static int8_t tmpArr[12];
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void CI_getDataChannel_IT(UART_HandleTypeDef *callBackHandle) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &ComputerChannel;
 8000b38:	4b3f      	ldr	r3, [pc, #252]	; (8000c38 <CI_getDataChannel_IT+0x108>)
 8000b3a:	60fb      	str	r3, [r7, #12]
	if(callBackHandle->Instance == tmpHandle->Instance){
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d172      	bne.n	8000c2e <CI_getDataChannel_IT+0xfe>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0x64 == getTmpCH && 0x43 == getTmpBeff) {
 8000b48:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <CI_getDataChannel_IT+0x10c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b64      	cmp	r3, #100	; 0x64
 8000b4e:	d10c      	bne.n	8000b6a <CI_getDataChannel_IT+0x3a>
 8000b50:	4b3b      	ldr	r3, [pc, #236]	; (8000c40 <CI_getDataChannel_IT+0x110>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b43      	cmp	r3, #67	; 0x43
 8000b56:	d108      	bne.n	8000b6a <CI_getDataChannel_IT+0x3a>
				tmpArr[0] = 0x43;
 8000b58:	4b3a      	ldr	r3, [pc, #232]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000b5a:	2243      	movs	r2, #67	; 0x43
 8000b5c:	701a      	strb	r2, [r3, #0]
				tmpArr[1] = 0x64;
 8000b5e:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000b60:	2264      	movs	r2, #100	; 0x64
 8000b62:	705a      	strb	r2, [r3, #1]
					counter = 1;
 8000b64:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <CI_getDataChannel_IT+0x118>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
				}
			tmpArr[counter] = getTmpCH;
 8000b6a:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <CI_getDataChannel_IT+0x10c>)
 8000b6c:	7819      	ldrb	r1, [r3, #0]
 8000b6e:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <CI_getDataChannel_IT+0x118>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	b249      	sxtb	r1, r1
 8000b76:	4b33      	ldr	r3, [pc, #204]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000b78:	5499      	strb	r1, [r3, r2]
				getTmpBeff = getTmpCH;
 8000b7a:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <CI_getDataChannel_IT+0x10c>)
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <CI_getDataChannel_IT+0x110>)
 8000b80:	701a      	strb	r2, [r3, #0]
				counter++;
 8000b82:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <CI_getDataChannel_IT+0x118>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <CI_getDataChannel_IT+0x118>)
 8000b8c:	701a      	strb	r2, [r3, #0]
				if (counter > 11) {
 8000b8e:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <CI_getDataChannel_IT+0x118>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b0b      	cmp	r3, #11
 8000b94:	d946      	bls.n	8000c24 <CI_getDataChannel_IT+0xf4>
					counter = 0;
 8000b96:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <CI_getDataChannel_IT+0x118>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
					if (0x43 == tmpArr[0] && 0x64 == tmpArr[1]) {
 8000b9c:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000b9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000ba2:	2b43      	cmp	r3, #67	; 0x43
 8000ba4:	d13e      	bne.n	8000c24 <CI_getDataChannel_IT+0xf4>
 8000ba6:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000ba8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000bac:	2b64      	cmp	r3, #100	; 0x64
 8000bae:	d139      	bne.n	8000c24 <CI_getDataChannel_IT+0xf4>
						getVals.size=(tmpArr[2] & 0xFF )| (tmpArr[3] << 8);
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000bb2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	b21a      	sxth	r2, r3
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000bbe:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <CI_getDataChannel_IT+0x11c>)
 8000bce:	801a      	strh	r2, [r3, #0]
						getVals.steer_pos=(tmpArr[4] & 0xFF )| (tmpArr[5] << 8) | (tmpArr[6] << 16) | (tmpArr[7] << 24);
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000bd2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000bda:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000bde:	021b      	lsls	r3, r3, #8
 8000be0:	431a      	orrs	r2, r3
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000be4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000be8:	041b      	lsls	r3, r3, #16
 8000bea:	431a      	orrs	r2, r3
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000bee:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000bf2:	061b      	lsls	r3, r3, #24
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <CI_getDataChannel_IT+0x11c>)
 8000bf8:	6053      	str	r3, [r2, #4]
						getVals.drive_speed=(tmpArr[8] & 0xFF) | (tmpArr[9] << 8) | (tmpArr[10] << 16) | (tmpArr[11] << 24);
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000bfc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000c04:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000c0e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000c12:	041b      	lsls	r3, r3, #16
 8000c14:	431a      	orrs	r2, r3
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <CI_getDataChannel_IT+0x114>)
 8000c18:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8000c1c:	061b      	lsls	r3, r3, #24
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <CI_getDataChannel_IT+0x11c>)
 8000c22:	6093      	str	r3, [r2, #8]

					}

				}
				HAL_UART_Receive_IT(callBackHandle, &getTmpCH, 1);
 8000c24:	2201      	movs	r2, #1
 8000c26:	4905      	ldr	r1, [pc, #20]	; (8000c3c <CI_getDataChannel_IT+0x10c>)
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f003 fb86 	bl	800433a <HAL_UART_Receive_IT>
	}
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20004bf0 	.word	0x20004bf0
 8000c3c:	200000a4 	.word	0x200000a4
 8000c40:	200000b4 	.word	0x200000b4
 8000c44:	200000a8 	.word	0x200000a8
 8000c48:	200000b5 	.word	0x200000b5
 8000c4c:	20004a24 	.word	0x20004a24

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f000 fe1c 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f816 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f000 fa48 	bl	80010f0 <MX_GPIO_Init>
  MX_UART4_Init();
 8000c60:	f000 f9c8 	bl	8000ff4 <MX_UART4_Init>
  MX_ADC1_Init();
 8000c64:	f000 f87a 	bl	8000d5c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c68:	f000 f8ca 	bl	8000e00 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000c6c:	f000 f91a 	bl	8000ea4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c70:	f000 f946 	bl	8000f00 <MX_I2C2_Init>
  MX_UART5_Init();
 8000c74:	f000 f9e8 	bl	8001048 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000c78:	f000 fa10 	bl	800109c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000c7c:	f000 f96e 	bl	8000f5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  tasks_init();
 8000c80:	f008 fc08 	bl	8009494 <tasks_init>


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000c84:	e7fe      	b.n	8000c84 <main+0x34>
	...

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b094      	sub	sp, #80	; 0x50
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0320 	add.w	r3, r7, #32
 8000c92:	2230      	movs	r2, #48	; 0x30
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f008 fdbd 	bl	8009816 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <SystemClock_Config+0xcc>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <SystemClock_Config+0xcc>)
 8000cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cba:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbc:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <SystemClock_Config+0xcc>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <SystemClock_Config+0xd0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <SystemClock_Config+0xd0>)
 8000cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <SystemClock_Config+0xd0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cfc:	23a8      	movs	r3, #168	; 0xa8
 8000cfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 fa33 	bl	8003178 <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d18:	f000 fa70 	bl	80011fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d20:	2302      	movs	r3, #2
 8000d22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 fc8c 	bl	8003658 <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d46:	f000 fa59 	bl	80011fc <Error_Handler>
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3750      	adds	r7, #80	; 0x50
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40007000 	.word	0x40007000

08000d5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <MX_ADC1_Init+0x9c>)
 8000d72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000d9c:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <MX_ADC1_Init+0xa0>)
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000dbc:	f000 fdcc 	bl	8001958 <HAL_ADC_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dc6:	f000 fa19 	bl	80011fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <MX_ADC1_Init+0x98>)
 8000ddc:	f000 ff8a 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000de6:	f000 fa09 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20004b68 	.word	0x20004b68
 8000df8:	40012000 	.word	0x40012000
 8000dfc:	0f000001 	.word	0x0f000001

08000e00 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e06:	463b      	mov	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000e12:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e14:	4a21      	ldr	r2, [pc, #132]	; (8000e9c <MX_ADC2_Init+0x9c>)
 8000e16:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e40:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <MX_ADC2_Init+0xa0>)
 8000e42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e5e:	480e      	ldr	r0, [pc, #56]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e60:	f000 fd7a 	bl	8001958 <HAL_ADC_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000e6a:	f000 f9c7 	bl	80011fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e76:	2307      	movs	r3, #7
 8000e78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <MX_ADC2_Init+0x98>)
 8000e80:	f000 ff38 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000e8a:	f000 f9b7 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20004a38 	.word	0x20004a38
 8000e9c:	40012100 	.word	0x40012100
 8000ea0:	0f000001 	.word	0x0f000001

08000ea4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_I2C1_Init+0x50>)
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <MX_I2C1_Init+0x54>)
 8000eac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_I2C1_Init+0x50>)
 8000eb0:	4a12      	ldr	r2, [pc, #72]	; (8000efc <MX_I2C1_Init+0x58>)
 8000eb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_I2C1_Init+0x50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_I2C1_Init+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_I2C1_Init+0x50>)
 8000ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ec6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <MX_I2C1_Init+0x50>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_I2C1_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <MX_I2C1_Init+0x50>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_I2C1_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_I2C1_Init+0x50>)
 8000ee2:	f001 fbdb 	bl	800269c <HAL_I2C_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000eec:	f000 f986 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20004a80 	.word	0x20004a80
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	000186a0 	.word	0x000186a0

08000f00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_I2C2_Init+0x50>)
 8000f06:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <MX_I2C2_Init+0x54>)
 8000f08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_I2C2_Init+0x50>)
 8000f0c:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <MX_I2C2_Init+0x58>)
 8000f0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_I2C2_Init+0x50>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_I2C2_Init+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_I2C2_Init+0x50>)
 8000f1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <MX_I2C2_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_I2C2_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <MX_I2C2_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_I2C2_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_I2C2_Init+0x50>)
 8000f3e:	f001 fbad 	bl	800269c <HAL_I2C_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f48:	f000 f958 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20004ad4 	.word	0x20004ad4
 8000f54:	40005800 	.word	0x40005800
 8000f58:	000186a0 	.word	0x000186a0

08000f5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f70:	463b      	mov	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <MX_TIM2_Init+0x94>)
 8000f7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <MX_TIM2_Init+0x94>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <MX_TIM2_Init+0x94>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 41999;
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <MX_TIM2_Init+0x94>)
 8000f8e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_TIM2_Init+0x94>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <MX_TIM2_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fa0:	4813      	ldr	r0, [pc, #76]	; (8000ff0 <MX_TIM2_Init+0x94>)
 8000fa2:	f002 fd7d 	bl	8003aa0 <HAL_TIM_Base_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fac:	f000 f926 	bl	80011fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <MX_TIM2_Init+0x94>)
 8000fbe:	f002 fec6 	bl	8003d4e <HAL_TIM_ConfigClockSource>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fc8:	f000 f918 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_TIM2_Init+0x94>)
 8000fda:	f003 f8d1 	bl	8004180 <HAL_TIMEx_MasterConfigSynchronization>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fe4:	f000 f90a 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20004c30 	.word	0x20004c30

08000ff4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_UART4_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_UART4_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_UART4_Init+0x4c>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_UART4_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_UART4_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_UART4_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_UART4_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_UART4_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_UART4_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_UART4_Init+0x4c>)
 800102c:	f003 f938 	bl	80042a0 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001036:	f000 f8e1 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20004bf0 	.word	0x20004bf0
 8001044:	40004c00 	.word	0x40004c00

08001048 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_UART5_Init+0x4c>)
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <MX_UART5_Init+0x50>)
 8001050:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_UART5_Init+0x4c>)
 8001054:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001058:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_UART5_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_UART5_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_UART5_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_UART5_Init+0x4c>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_UART5_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_UART5_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_UART5_Init+0x4c>)
 8001080:	f003 f90e 	bl	80042a0 <HAL_UART_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800108a:	f000 f8b7 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20004b28 	.word	0x20004b28
 8001098:	40005000 	.word	0x40005000

0800109c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <MX_USART1_UART_Init+0x50>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010a8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80010ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010d4:	f003 f8e4 	bl	80042a0 <HAL_UART_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010de:	f000 f88d 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20004bb0 	.word	0x20004bb0
 80010ec:	40011000 	.word	0x40011000

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <MX_GPIO_Init+0xdc>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a2f      	ldr	r2, [pc, #188]	; (80011cc <MX_GPIO_Init+0xdc>)
 8001110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <MX_GPIO_Init+0xdc>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b29      	ldr	r3, [pc, #164]	; (80011cc <MX_GPIO_Init+0xdc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a28      	ldr	r2, [pc, #160]	; (80011cc <MX_GPIO_Init+0xdc>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_GPIO_Init+0xdc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <MX_GPIO_Init+0xdc>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a21      	ldr	r2, [pc, #132]	; (80011cc <MX_GPIO_Init+0xdc>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_GPIO_Init+0xdc>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_GPIO_Init+0xdc>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <MX_GPIO_Init+0xdc>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_GPIO_Init+0xdc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_GPIO_Init+0xdc>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <MX_GPIO_Init+0xdc>)
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_GPIO_Init+0xdc>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : minus_Pin */
  GPIO_InitStruct.Pin = minus_Pin;
 8001192:	2320      	movs	r3, #32
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119a:	2301      	movs	r3, #1
 800119c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(minus_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	480a      	ldr	r0, [pc, #40]	; (80011d0 <MX_GPIO_Init+0xe0>)
 80011a6:	f001 f8c7 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pins : select_Pin plus_Pin */
  GPIO_InitStruct.Pin = select_Pin|plus_Pin;
 80011aa:	2303      	movs	r3, #3
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_GPIO_Init+0xe4>)
 80011be:	f001 f8bb 	bl	8002338 <HAL_GPIO_Init>

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020400 	.word	0x40020400

080011d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ea:	f000 fb73 	bl	80018d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40010000 	.word	0x40010000

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001202:	e7fe      	b.n	8001202 <Error_Handler+0x6>

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_MspInit+0x54>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_MspInit+0x54>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_MspInit+0x54>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_MspInit+0x54>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_MspInit+0x54>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_MspInit+0x54>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	210f      	movs	r1, #15
 8001246:	f06f 0001 	mvn.w	r0, #1
 800124a:	f001 f829 	bl	80022a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a2e      	ldr	r2, [pc, #184]	; (8001334 <HAL_ADC_MspInit+0xd8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d128      	bne.n	80012d0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <HAL_ADC_MspInit+0xdc>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a2c      	ldr	r2, [pc, #176]	; (8001338 <HAL_ADC_MspInit+0xdc>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <HAL_ADC_MspInit+0xdc>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <HAL_ADC_MspInit+0xdc>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a25      	ldr	r2, [pc, #148]	; (8001338 <HAL_ADC_MspInit+0xdc>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <HAL_ADC_MspInit+0xdc>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	481c      	ldr	r0, [pc, #112]	; (800133c <HAL_ADC_MspInit+0xe0>)
 80012ca:	f001 f835 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80012ce:	e02c      	b.n	800132a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <HAL_ADC_MspInit+0xe4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d127      	bne.n	800132a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_ADC_MspInit+0xdc>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a15      	ldr	r2, [pc, #84]	; (8001338 <HAL_ADC_MspInit+0xdc>)
 80012e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HAL_ADC_MspInit+0xdc>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_ADC_MspInit+0xdc>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_ADC_MspInit+0xdc>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_ADC_MspInit+0xdc>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001312:	2302      	movs	r3, #2
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_ADC_MspInit+0xe0>)
 8001326:	f001 f807 	bl	8002338 <HAL_GPIO_Init>
}
 800132a:	bf00      	nop
 800132c:	3730      	adds	r7, #48	; 0x30
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40012000 	.word	0x40012000
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000
 8001340:	40012100 	.word	0x40012100

08001344 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a32      	ldr	r2, [pc, #200]	; (800142c <HAL_I2C_MspInit+0xe8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12c      	bne.n	80013c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	4b31      	ldr	r3, [pc, #196]	; (8001430 <HAL_I2C_MspInit+0xec>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a30      	ldr	r2, [pc, #192]	; (8001430 <HAL_I2C_MspInit+0xec>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <HAL_I2C_MspInit+0xec>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001382:	23c0      	movs	r3, #192	; 0xc0
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001386:	2312      	movs	r3, #18
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138a:	2301      	movs	r3, #1
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001392:	2304      	movs	r3, #4
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4825      	ldr	r0, [pc, #148]	; (8001434 <HAL_I2C_MspInit+0xf0>)
 800139e:	f000 ffcb 	bl	8002338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_I2C_MspInit+0xec>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <HAL_I2C_MspInit+0xec>)
 80013ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <HAL_I2C_MspInit+0xec>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013be:	e031      	b.n	8001424 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <HAL_I2C_MspInit+0xf4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d12c      	bne.n	8001424 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <HAL_I2C_MspInit+0xec>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a17      	ldr	r2, [pc, #92]	; (8001430 <HAL_I2C_MspInit+0xec>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_I2C_MspInit+0xec>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ec:	2312      	movs	r3, #18
 80013ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013f8:	2304      	movs	r3, #4
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	480c      	ldr	r0, [pc, #48]	; (8001434 <HAL_I2C_MspInit+0xf0>)
 8001404:	f000 ff98 	bl	8002338 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_I2C_MspInit+0xec>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_I2C_MspInit+0xec>)
 8001412:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001416:	6413      	str	r3, [r2, #64]	; 0x40
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_I2C_MspInit+0xec>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	bf00      	nop
 8001426:	3730      	adds	r7, #48	; 0x30
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40005400 	.word	0x40005400
 8001430:	40023800 	.word	0x40023800
 8001434:	40020400 	.word	0x40020400
 8001438:	40005800 	.word	0x40005800

0800143c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800144c:	d115      	bne.n	800147a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_TIM_Base_MspInit+0x48>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <HAL_TIM_Base_MspInit+0x48>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_TIM_Base_MspInit+0x48>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2105      	movs	r1, #5
 800146e:	201c      	movs	r0, #28
 8001470:	f000 ff16 	bl	80022a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001474:	201c      	movs	r0, #28
 8001476:	f000 ff2f 	bl	80022d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a67      	ldr	r2, [pc, #412]	; (8001644 <HAL_UART_MspInit+0x1bc>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d135      	bne.n	8001516 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
 80014ae:	4b66      	ldr	r3, [pc, #408]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a65      	ldr	r2, [pc, #404]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 80014b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b63      	ldr	r3, [pc, #396]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014c2:	623b      	str	r3, [r7, #32]
 80014c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a5e      	ldr	r2, [pc, #376]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014f4:	2308      	movs	r3, #8
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fc:	4619      	mov	r1, r3
 80014fe:	4853      	ldr	r0, [pc, #332]	; (800164c <HAL_UART_MspInit+0x1c4>)
 8001500:	f000 ff1a 	bl	8002338 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2105      	movs	r1, #5
 8001508:	2034      	movs	r0, #52	; 0x34
 800150a:	f000 fec9 	bl	80022a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800150e:	2034      	movs	r0, #52	; 0x34
 8001510:	f000 fee2 	bl	80022d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001514:	e092      	b.n	800163c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==UART5)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a4d      	ldr	r2, [pc, #308]	; (8001650 <HAL_UART_MspInit+0x1c8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d153      	bne.n	80015c8 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	4b48      	ldr	r3, [pc, #288]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a47      	ldr	r2, [pc, #284]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 800152a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b45      	ldr	r3, [pc, #276]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	4b41      	ldr	r3, [pc, #260]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a40      	ldr	r2, [pc, #256]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4a39      	ldr	r2, [pc, #228]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 8001562:	f043 0308 	orr.w	r3, r3, #8
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
 8001568:	4b37      	ldr	r3, [pc, #220]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157e:	2301      	movs	r3, #1
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001586:	2308      	movs	r3, #8
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	482e      	ldr	r0, [pc, #184]	; (800164c <HAL_UART_MspInit+0x1c4>)
 8001592:	f000 fed1 	bl	8002338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001596:	2304      	movs	r3, #4
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159e:	2301      	movs	r3, #1
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80015a6:	2308      	movs	r3, #8
 80015a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	4828      	ldr	r0, [pc, #160]	; (8001654 <HAL_UART_MspInit+0x1cc>)
 80015b2:	f000 fec1 	bl	8002338 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2105      	movs	r1, #5
 80015ba:	2035      	movs	r0, #53	; 0x35
 80015bc:	f000 fe70 	bl	80022a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80015c0:	2035      	movs	r0, #53	; 0x35
 80015c2:	f000 fe89 	bl	80022d8 <HAL_NVIC_EnableIRQ>
}
 80015c6:	e039      	b.n	800163c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a22      	ldr	r2, [pc, #136]	; (8001658 <HAL_UART_MspInit+0x1d0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d134      	bne.n	800163c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 80015dc:	f043 0310 	orr.w	r3, r3, #16
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a14      	ldr	r2, [pc, #80]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_UART_MspInit+0x1c0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800160a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800161c:	2307      	movs	r3, #7
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <HAL_UART_MspInit+0x1d4>)
 8001628:	f000 fe86 	bl	8002338 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2105      	movs	r1, #5
 8001630:	2025      	movs	r0, #37	; 0x25
 8001632:	f000 fe35 	bl	80022a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001636:	2025      	movs	r0, #37	; 0x25
 8001638:	f000 fe4e 	bl	80022d8 <HAL_NVIC_EnableIRQ>
}
 800163c:	bf00      	nop
 800163e:	3738      	adds	r7, #56	; 0x38
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40004c00 	.word	0x40004c00
 8001648:	40023800 	.word	0x40023800
 800164c:	40020800 	.word	0x40020800
 8001650:	40005000 	.word	0x40005000
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40011000 	.word	0x40011000
 800165c:	40020000 	.word	0x40020000

08001660 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	2019      	movs	r0, #25
 8001676:	f000 fe13 	bl	80022a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800167a:	2019      	movs	r0, #25
 800167c:	f000 fe2c 	bl	80022d8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_InitTick+0xa4>)
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001688:	4a1e      	ldr	r2, [pc, #120]	; (8001704 <HAL_InitTick+0xa4>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6453      	str	r3, [r2, #68]	; 0x44
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_InitTick+0xa4>)
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800169c:	f107 0210 	add.w	r2, r7, #16
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f002 f9c8 	bl	8003a3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80016ac:	f002 f9b2 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 80016b0:	4603      	mov	r3, r0
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b8:	4a13      	ldr	r2, [pc, #76]	; (8001708 <HAL_InitTick+0xa8>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0c9b      	lsrs	r3, r3, #18
 80016c0:	3b01      	subs	r3, #1
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_InitTick+0xac>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <HAL_InitTick+0xb0>)
 80016c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_InitTick+0xac>)
 80016cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_InitTick+0xac>)
 80016d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_InitTick+0xac>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_InitTick+0xac>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80016e4:	4809      	ldr	r0, [pc, #36]	; (800170c <HAL_InitTick+0xac>)
 80016e6:	f002 f9db 	bl	8003aa0 <HAL_TIM_Base_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d104      	bne.n	80016fa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <HAL_InitTick+0xac>)
 80016f2:	f002 fa00 	bl	8003af6 <HAL_TIM_Base_Start_IT>
 80016f6:	4603      	mov	r3, r0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3730      	adds	r7, #48	; 0x30
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	431bde83 	.word	0x431bde83
 800170c:	20004c70 	.word	0x20004c70
 8001710:	40010000 	.word	0x40010000

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001746:	f002 f9fa 	bl	8003b3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20004c70 	.word	0x20004c70

08001754 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <TIM2_IRQHandler+0x10>)
 800175a:	f002 f9f0 	bl	8003b3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20004c30 	.word	0x20004c30

08001768 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <USART1_IRQHandler+0x10>)
 800176e:	f002 fe39 	bl	80043e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20004bb0 	.word	0x20004bb0

0800177c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <UART4_IRQHandler+0x10>)
 8001782:	f002 fe2f 	bl	80043e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20004bf0 	.word	0x20004bf0

08001790 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <UART5_IRQHandler+0x10>)
 8001796:	f002 fe25 	bl	80043e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20004b28 	.word	0x20004b28

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f007 ffea 	bl	80097ac <__errno>
 80017d8:	4602      	mov	r2, r0
 80017da:	230c      	movs	r3, #12
 80017dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20020000 	.word	0x20020000
 8001804:	00000400 	.word	0x00000400
 8001808:	200000b8 	.word	0x200000b8
 800180c:	20004d60 	.word	0x20004d60

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <SystemInit+0x28>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a07      	ldr	r2, [pc, #28]	; (8001838 <SystemInit+0x28>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <SystemInit+0x28>)
 8001826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800182a:	609a      	str	r2, [r3, #8]
#endif
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001840:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001842:	e003      	b.n	800184c <LoopCopyDataInit>

08001844 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001846:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001848:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800184a:	3104      	adds	r1, #4

0800184c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800184c:	480b      	ldr	r0, [pc, #44]	; (800187c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001850:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001852:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001854:	d3f6      	bcc.n	8001844 <CopyDataInit>
  ldr  r2, =_sbss
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001858:	e002      	b.n	8001860 <LoopFillZerobss>

0800185a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800185a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800185c:	f842 3b04 	str.w	r3, [r2], #4

08001860 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001862:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001864:	d3f9      	bcc.n	800185a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001866:	f7ff ffd3 	bl	8001810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186a:	f007 ffa5 	bl	80097b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7ff f9ef 	bl	8000c50 <main>
  bx  lr    
 8001872:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001874:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001878:	0800a204 	.word	0x0800a204
  ldr  r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001880:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001884:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001888:	20004d60 	.word	0x20004d60

0800188c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <HAL_Init+0x40>)
 800189a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_Init+0x40>)
 80018a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_Init+0x40>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 fce6 	bl	800228a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	2000      	movs	r0, #0
 80018c0:	f7ff fece 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff fc9e 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000008 	.word	0x20000008
 80018f8:	20004cb0 	.word	0x20004cb0

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20004cb0 	.word	0x20004cb0

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_Delay+0x40>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffde 	bl	80018fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000008 	.word	0x20000008

08001958 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e033      	b.n	80019d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fc70 	bl	800125c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	2b00      	cmp	r3, #0
 8001994:	d118      	bne.n	80019c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800199e:	f023 0302 	bic.w	r3, r3, #2
 80019a2:	f043 0202 	orr.w	r2, r3, #2
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fac4 	bl	8001f38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f023 0303 	bic.w	r3, r3, #3
 80019be:	f043 0201 	orr.w	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
 80019c6:	e001      	b.n	80019cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_Start+0x1a>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e0a5      	b.n	8001b46 <HAL_ADC_Start+0x166>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d018      	beq.n	8001a42 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a20:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <HAL_ADC_Start+0x174>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a4c      	ldr	r2, [pc, #304]	; (8001b58 <HAL_ADC_Start+0x178>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	0c9a      	lsrs	r2, r3, #18
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a34:	e002      	b.n	8001a3c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f9      	bne.n	8001a36 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d179      	bne.n	8001b44 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a8e:	d106      	bne.n	8001a9e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	f023 0206 	bic.w	r2, r3, #6
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44
 8001a9c:	e002      	b.n	8001aa4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_ADC_Start+0x17c>)
 8001aae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ab8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d12a      	bne.n	8001b1c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a25      	ldr	r2, [pc, #148]	; (8001b60 <HAL_ADC_Start+0x180>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d015      	beq.n	8001afc <HAL_ADC_Start+0x11c>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a23      	ldr	r2, [pc, #140]	; (8001b64 <HAL_ADC_Start+0x184>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d105      	bne.n	8001ae6 <HAL_ADC_Start+0x106>
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_ADC_Start+0x17c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00a      	beq.n	8001afc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <HAL_ADC_Start+0x188>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d129      	bne.n	8001b44 <HAL_ADC_Start+0x164>
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <HAL_ADC_Start+0x17c>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	2b0f      	cmp	r3, #15
 8001afa:	d823      	bhi.n	8001b44 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d11c      	bne.n	8001b44 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	e013      	b.n	8001b44 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_ADC_Start+0x180>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d10e      	bne.n	8001b44 <HAL_ADC_Start+0x164>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d107      	bne.n	8001b44 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b42:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000
 8001b58:	431bde83 	.word	0x431bde83
 8001b5c:	40012300 	.word	0x40012300
 8001b60:	40012000 	.word	0x40012000
 8001b64:	40012100 	.word	0x40012100
 8001b68:	40012200 	.word	0x40012200

08001b6c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_Stop+0x16>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e021      	b.n	8001bc6 <HAL_ADC_Stop+0x5a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0201 	bic.w	r2, r2, #1
 8001b98:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bee:	d113      	bne.n	8001c18 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bfe:	d10b      	bne.n	8001c18 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f043 0220 	orr.w	r2, r3, #32
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e05c      	b.n	8001cd2 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c18:	f7ff fe70 	bl	80018fc <HAL_GetTick>
 8001c1c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c1e:	e01a      	b.n	8001c56 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c26:	d016      	beq.n	8001c56 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_ADC_PollForConversion+0x6c>
 8001c2e:	f7ff fe65 	bl	80018fc <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d20b      	bcs.n	8001c56 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f043 0204 	orr.w	r2, r3, #4
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e03d      	b.n	8001cd2 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d1dd      	bne.n	8001c20 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0212 	mvn.w	r2, #18
 8001c6c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d123      	bne.n	8001cd0 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d11f      	bne.n	8001cd0 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d111      	bne.n	8001cd0 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f043 0201 	orr.w	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x1c>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e105      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x228>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b09      	cmp	r3, #9
 8001d1e:	d925      	bls.n	8001d6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68d9      	ldr	r1, [r3, #12]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	3b1e      	subs	r3, #30
 8001d36:	2207      	movs	r2, #7
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43da      	mvns	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	400a      	ands	r2, r1
 8001d44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68d9      	ldr	r1, [r3, #12]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	4603      	mov	r3, r0
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4403      	add	r3, r0
 8001d5e:	3b1e      	subs	r3, #30
 8001d60:	409a      	lsls	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	e022      	b.n	8001db2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6919      	ldr	r1, [r3, #16]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	2207      	movs	r2, #7
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6919      	ldr	r1, [r3, #16]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	4618      	mov	r0, r3
 8001da2:	4603      	mov	r3, r0
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4403      	add	r3, r0
 8001da8:	409a      	lsls	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d824      	bhi.n	8001e04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b05      	subs	r3, #5
 8001dcc:	221f      	movs	r2, #31
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	400a      	ands	r2, r1
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	3b05      	subs	r3, #5
 8001df6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	635a      	str	r2, [r3, #52]	; 0x34
 8001e02:	e04c      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d824      	bhi.n	8001e56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b23      	subs	r3, #35	; 0x23
 8001e1e:	221f      	movs	r2, #31
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43da      	mvns	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	3b23      	subs	r3, #35	; 0x23
 8001e48:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
 8001e54:	e023      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b41      	subs	r3, #65	; 0x41
 8001e68:	221f      	movs	r2, #31
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	400a      	ands	r2, r1
 8001e76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b41      	subs	r3, #65	; 0x41
 8001e92:	fa00 f203 	lsl.w	r2, r0, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e9e:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_ADC_ConfigChannel+0x234>)
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a21      	ldr	r2, [pc, #132]	; (8001f2c <HAL_ADC_ConfigChannel+0x238>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d109      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x1cc>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b12      	cmp	r3, #18
 8001eb2:	d105      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <HAL_ADC_ConfigChannel+0x238>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d123      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x21e>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b10      	cmp	r3, #16
 8001ed0:	d003      	beq.n	8001eda <HAL_ADC_ConfigChannel+0x1e6>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b11      	cmp	r3, #17
 8001ed8:	d11b      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d111      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_ADC_ConfigChannel+0x23c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <HAL_ADC_ConfigChannel+0x240>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	0c9a      	lsrs	r2, r3, #18
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f04:	e002      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f9      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40012300 	.word	0x40012300
 8001f2c:	40012000 	.word	0x40012000
 8001f30:	20000000 	.word	0x20000000
 8001f34:	431bde83 	.word	0x431bde83

08001f38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f40:	4b79      	ldr	r3, [pc, #484]	; (8002128 <ADC_Init+0x1f0>)
 8001f42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	021a      	lsls	r2, r3, #8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6859      	ldr	r1, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6899      	ldr	r1, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	4a58      	ldr	r2, [pc, #352]	; (800212c <ADC_Init+0x1f4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d022      	beq.n	8002016 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6899      	ldr	r1, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6899      	ldr	r1, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	e00f      	b.n	8002036 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002034:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0202 	bic.w	r2, r2, #2
 8002044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6899      	ldr	r1, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7e1b      	ldrb	r3, [r3, #24]
 8002050:	005a      	lsls	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01b      	beq.n	800209c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002072:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002082:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6859      	ldr	r1, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	3b01      	subs	r3, #1
 8002090:	035a      	lsls	r2, r3, #13
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	e007      	b.n	80020ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	051a      	lsls	r2, r3, #20
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6899      	ldr	r1, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020ee:	025a      	lsls	r2, r3, #9
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6899      	ldr	r1, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	029a      	lsls	r2, r3, #10
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	609a      	str	r2, [r3, #8]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	40012300 	.word	0x40012300
 800212c:	0f000001 	.word	0x0f000001

08002130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800215c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	60d3      	str	r3, [r2, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <__NVIC_GetPriorityGrouping+0x18>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 0307 	and.w	r3, r3, #7
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	db0b      	blt.n	80021be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	4907      	ldr	r1, [pc, #28]	; (80021cc <__NVIC_EnableIRQ+0x38>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2001      	movs	r0, #1
 80021b6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000e100 	.word	0xe000e100

080021d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	db0a      	blt.n	80021fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	490c      	ldr	r1, [pc, #48]	; (800221c <__NVIC_SetPriority+0x4c>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	0112      	lsls	r2, r2, #4
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	440b      	add	r3, r1
 80021f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f8:	e00a      	b.n	8002210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4908      	ldr	r1, [pc, #32]	; (8002220 <__NVIC_SetPriority+0x50>)
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	3b04      	subs	r3, #4
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	440b      	add	r3, r1
 800220e:	761a      	strb	r2, [r3, #24]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f1c3 0307 	rsb	r3, r3, #7
 800223e:	2b04      	cmp	r3, #4
 8002240:	bf28      	it	cs
 8002242:	2304      	movcs	r3, #4
 8002244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3304      	adds	r3, #4
 800224a:	2b06      	cmp	r3, #6
 800224c:	d902      	bls.n	8002254 <NVIC_EncodePriority+0x30>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3b03      	subs	r3, #3
 8002252:	e000      	b.n	8002256 <NVIC_EncodePriority+0x32>
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	401a      	ands	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800226c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	43d9      	mvns	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	4313      	orrs	r3, r2
         );
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ff4c 	bl	8002130 <__NVIC_SetPriorityGrouping>
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b2:	f7ff ff61 	bl	8002178 <__NVIC_GetPriorityGrouping>
 80022b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	6978      	ldr	r0, [r7, #20]
 80022be:	f7ff ffb1 	bl	8002224 <NVIC_EncodePriority>
 80022c2:	4602      	mov	r2, r0
 80022c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff80 	bl	80021d0 <__NVIC_SetPriority>
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff54 	bl	8002194 <__NVIC_EnableIRQ>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d004      	beq.n	8002312 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e00c      	b.n	800232c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2205      	movs	r2, #5
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e16b      	b.n	800262c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002354:	2201      	movs	r2, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	429a      	cmp	r2, r3
 800236e:	f040 815a 	bne.w	8002626 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d00b      	beq.n	8002392 <HAL_GPIO_Init+0x5a>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002386:	2b11      	cmp	r3, #17
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b12      	cmp	r3, #18
 8002390:	d130      	bne.n	80023f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 0201 	and.w	r2, r3, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0xfc>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b12      	cmp	r3, #18
 8002432:	d123      	bne.n	800247c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	69b9      	ldr	r1, [r7, #24]
 8002478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0203 	and.w	r2, r3, #3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80b4 	beq.w	8002626 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b5f      	ldr	r3, [pc, #380]	; (8002640 <HAL_GPIO_Init+0x308>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a5e      	ldr	r2, [pc, #376]	; (8002640 <HAL_GPIO_Init+0x308>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b5c      	ldr	r3, [pc, #368]	; (8002640 <HAL_GPIO_Init+0x308>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024da:	4a5a      	ldr	r2, [pc, #360]	; (8002644 <HAL_GPIO_Init+0x30c>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a51      	ldr	r2, [pc, #324]	; (8002648 <HAL_GPIO_Init+0x310>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d02b      	beq.n	800255e <HAL_GPIO_Init+0x226>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a50      	ldr	r2, [pc, #320]	; (800264c <HAL_GPIO_Init+0x314>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d025      	beq.n	800255a <HAL_GPIO_Init+0x222>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4f      	ldr	r2, [pc, #316]	; (8002650 <HAL_GPIO_Init+0x318>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01f      	beq.n	8002556 <HAL_GPIO_Init+0x21e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4e      	ldr	r2, [pc, #312]	; (8002654 <HAL_GPIO_Init+0x31c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d019      	beq.n	8002552 <HAL_GPIO_Init+0x21a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4d      	ldr	r2, [pc, #308]	; (8002658 <HAL_GPIO_Init+0x320>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0x216>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4c      	ldr	r2, [pc, #304]	; (800265c <HAL_GPIO_Init+0x324>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00d      	beq.n	800254a <HAL_GPIO_Init+0x212>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4b      	ldr	r2, [pc, #300]	; (8002660 <HAL_GPIO_Init+0x328>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <HAL_GPIO_Init+0x20e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4a      	ldr	r2, [pc, #296]	; (8002664 <HAL_GPIO_Init+0x32c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_GPIO_Init+0x20a>
 800253e:	2307      	movs	r3, #7
 8002540:	e00e      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002542:	2308      	movs	r3, #8
 8002544:	e00c      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002546:	2306      	movs	r3, #6
 8002548:	e00a      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800254a:	2305      	movs	r3, #5
 800254c:	e008      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800254e:	2304      	movs	r3, #4
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002552:	2303      	movs	r3, #3
 8002554:	e004      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002556:	2302      	movs	r3, #2
 8002558:	e002      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800255e:	2300      	movs	r3, #0
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	f002 0203 	and.w	r2, r2, #3
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	4093      	lsls	r3, r2
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002570:	4934      	ldr	r1, [pc, #208]	; (8002644 <HAL_GPIO_Init+0x30c>)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800257e:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <HAL_GPIO_Init+0x330>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a2:	4a31      	ldr	r2, [pc, #196]	; (8002668 <HAL_GPIO_Init+0x330>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025a8:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <HAL_GPIO_Init+0x330>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025cc:	4a26      	ldr	r2, [pc, #152]	; (8002668 <HAL_GPIO_Init+0x330>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d2:	4b25      	ldr	r3, [pc, #148]	; (8002668 <HAL_GPIO_Init+0x330>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_GPIO_Init+0x330>)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <HAL_GPIO_Init+0x330>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002620:	4a11      	ldr	r2, [pc, #68]	; (8002668 <HAL_GPIO_Init+0x330>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3301      	adds	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2b0f      	cmp	r3, #15
 8002630:	f67f ae90 	bls.w	8002354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002634:	bf00      	nop
 8002636:	3724      	adds	r7, #36	; 0x24
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40023800 	.word	0x40023800
 8002644:	40013800 	.word	0x40013800
 8002648:	40020000 	.word	0x40020000
 800264c:	40020400 	.word	0x40020400
 8002650:	40020800 	.word	0x40020800
 8002654:	40020c00 	.word	0x40020c00
 8002658:	40021000 	.word	0x40021000
 800265c:	40021400 	.word	0x40021400
 8002660:	40021800 	.word	0x40021800
 8002664:	40021c00 	.word	0x40021c00
 8002668:	40013c00 	.word	0x40013c00

0800266c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	e001      	b.n	800268e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e11f      	b.n	80028ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe fe3e 	bl	8001344 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2224      	movs	r2, #36	; 0x24
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002700:	f001 f974 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8002704:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a7b      	ldr	r2, [pc, #492]	; (80028f8 <HAL_I2C_Init+0x25c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d807      	bhi.n	8002720 <HAL_I2C_Init+0x84>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4a7a      	ldr	r2, [pc, #488]	; (80028fc <HAL_I2C_Init+0x260>)
 8002714:	4293      	cmp	r3, r2
 8002716:	bf94      	ite	ls
 8002718:	2301      	movls	r3, #1
 800271a:	2300      	movhi	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	e006      	b.n	800272e <HAL_I2C_Init+0x92>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4a77      	ldr	r2, [pc, #476]	; (8002900 <HAL_I2C_Init+0x264>)
 8002724:	4293      	cmp	r3, r2
 8002726:	bf94      	ite	ls
 8002728:	2301      	movls	r3, #1
 800272a:	2300      	movhi	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e0db      	b.n	80028ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4a72      	ldr	r2, [pc, #456]	; (8002904 <HAL_I2C_Init+0x268>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	0c9b      	lsrs	r3, r3, #18
 8002740:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	430a      	orrs	r2, r1
 8002754:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4a64      	ldr	r2, [pc, #400]	; (80028f8 <HAL_I2C_Init+0x25c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d802      	bhi.n	8002770 <HAL_I2C_Init+0xd4>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	3301      	adds	r3, #1
 800276e:	e009      	b.n	8002784 <HAL_I2C_Init+0xe8>
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	4a63      	ldr	r2, [pc, #396]	; (8002908 <HAL_I2C_Init+0x26c>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	3301      	adds	r3, #1
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	430b      	orrs	r3, r1
 800278a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002796:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4956      	ldr	r1, [pc, #344]	; (80028f8 <HAL_I2C_Init+0x25c>)
 80027a0:	428b      	cmp	r3, r1
 80027a2:	d80d      	bhi.n	80027c0 <HAL_I2C_Init+0x124>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1e59      	subs	r1, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	bf38      	it	cc
 80027bc:	2304      	movcc	r3, #4
 80027be:	e04f      	b.n	8002860 <HAL_I2C_Init+0x1c4>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d111      	bne.n	80027ec <HAL_I2C_Init+0x150>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1e58      	subs	r0, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	440b      	add	r3, r1
 80027d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e012      	b.n	8002812 <HAL_I2C_Init+0x176>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1e58      	subs	r0, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	0099      	lsls	r1, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_Init+0x17e>
 8002816:	2301      	movs	r3, #1
 8002818:	e022      	b.n	8002860 <HAL_I2C_Init+0x1c4>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10e      	bne.n	8002840 <HAL_I2C_Init+0x1a4>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1e58      	subs	r0, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6859      	ldr	r1, [r3, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	440b      	add	r3, r1
 8002830:	fbb0 f3f3 	udiv	r3, r0, r3
 8002834:	3301      	adds	r3, #1
 8002836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283e:	e00f      	b.n	8002860 <HAL_I2C_Init+0x1c4>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e58      	subs	r0, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	0099      	lsls	r1, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	fbb0 f3f3 	udiv	r3, r0, r3
 8002856:	3301      	adds	r3, #1
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	6809      	ldr	r1, [r1, #0]
 8002864:	4313      	orrs	r3, r2
 8002866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800288e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6911      	ldr	r1, [r2, #16]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68d2      	ldr	r2, [r2, #12]
 800289a:	4311      	orrs	r1, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	000186a0 	.word	0x000186a0
 80028fc:	001e847f 	.word	0x001e847f
 8002900:	003d08ff 	.word	0x003d08ff
 8002904:	431bde83 	.word	0x431bde83
 8002908:	10624dd3 	.word	0x10624dd3

0800290c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	461a      	mov	r2, r3
 8002918:	460b      	mov	r3, r1
 800291a:	817b      	strh	r3, [r7, #10]
 800291c:	4613      	mov	r3, r2
 800291e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002920:	f7fe ffec 	bl	80018fc <HAL_GetTick>
 8002924:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b20      	cmp	r3, #32
 8002930:	f040 80e0 	bne.w	8002af4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2319      	movs	r3, #25
 800293a:	2201      	movs	r2, #1
 800293c:	4970      	ldr	r1, [pc, #448]	; (8002b00 <HAL_I2C_Master_Transmit+0x1f4>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fa92 	bl	8002e68 <I2C_WaitOnFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800294a:	2302      	movs	r3, #2
 800294c:	e0d3      	b.n	8002af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_I2C_Master_Transmit+0x50>
 8002958:	2302      	movs	r3, #2
 800295a:	e0cc      	b.n	8002af6 <HAL_I2C_Master_Transmit+0x1ea>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b01      	cmp	r3, #1
 8002970:	d007      	beq.n	8002982 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0201 	orr.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002990:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2221      	movs	r2, #33	; 0x21
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2210      	movs	r2, #16
 800299e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	893a      	ldrh	r2, [r7, #8]
 80029b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4a50      	ldr	r2, [pc, #320]	; (8002b04 <HAL_I2C_Master_Transmit+0x1f8>)
 80029c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029c4:	8979      	ldrh	r1, [r7, #10]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	6a3a      	ldr	r2, [r7, #32]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f9ca 	bl	8002d64 <I2C_MasterRequestWrite>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e08d      	b.n	8002af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029f0:	e066      	b.n	8002ac0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	6a39      	ldr	r1, [r7, #32]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fb0c 	bl	8003014 <I2C_WaitOnTXEFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00d      	beq.n	8002a1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d107      	bne.n	8002a1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e06b      	b.n	8002af6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	781a      	ldrb	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d11b      	bne.n	8002a94 <HAL_I2C_Master_Transmit+0x188>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d017      	beq.n	8002a94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	6a39      	ldr	r1, [r7, #32]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fafc 	bl	8003096 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d107      	bne.n	8002abc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e01a      	b.n	8002af6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d194      	bne.n	80029f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e000      	b.n	8002af6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
  }
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	00100002 	.word	0x00100002
 8002b04:	ffff0000 	.word	0xffff0000

08002b08 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	460b      	mov	r3, r1
 8002b16:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b18:	f7fe fef0 	bl	80018fc <HAL_GetTick>
 8002b1c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	f040 8111 	bne.w	8002d52 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2319      	movs	r3, #25
 8002b36:	2201      	movs	r2, #1
 8002b38:	4988      	ldr	r1, [pc, #544]	; (8002d5c <HAL_I2C_IsDeviceReady+0x254>)
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f994 	bl	8002e68 <I2C_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
 8002b48:	e104      	b.n	8002d54 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_I2C_IsDeviceReady+0x50>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e0fd      	b.n	8002d54 <HAL_I2C_IsDeviceReady+0x24c>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d007      	beq.n	8002b7e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0201 	orr.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2224      	movs	r2, #36	; 0x24
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4a70      	ldr	r2, [pc, #448]	; (8002d60 <HAL_I2C_IsDeviceReady+0x258>)
 8002ba0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f952 	bl	8002e68 <I2C_WaitOnFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00d      	beq.n	8002be6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd8:	d103      	bne.n	8002be2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e0b6      	b.n	8002d54 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002be6:	897b      	ldrh	r3, [r7, #10]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bf4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fe81 	bl	80018fc <HAL_GetTick>
 8002bfa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	bf0c      	ite	eq
 8002c0a:	2301      	moveq	r3, #1
 8002c0c:	2300      	movne	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c2a:	e025      	b.n	8002c78 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c2c:	f7fe fe66 	bl	80018fc <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d302      	bcc.n	8002c42 <HAL_I2C_IsDeviceReady+0x13a>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d103      	bne.n	8002c4a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	22a0      	movs	r2, #160	; 0xa0
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2ba0      	cmp	r3, #160	; 0xa0
 8002c82:	d005      	beq.n	8002c90 <HAL_I2C_IsDeviceReady+0x188>
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_I2C_IsDeviceReady+0x188>
 8002c8a:	7dbb      	ldrb	r3, [r7, #22]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0cd      	beq.n	8002c2c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d129      	bne.n	8002cfa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	2319      	movs	r3, #25
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4921      	ldr	r1, [pc, #132]	; (8002d5c <HAL_I2C_IsDeviceReady+0x254>)
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f8c6 	bl	8002e68 <I2C_WaitOnFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e036      	b.n	8002d54 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e02c      	b.n	8002d54 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d08:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d12:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	2319      	movs	r3, #25
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	490f      	ldr	r1, [pc, #60]	; (8002d5c <HAL_I2C_IsDeviceReady+0x254>)
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f8a2 	bl	8002e68 <I2C_WaitOnFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e012      	b.n	8002d54 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	3301      	adds	r3, #1
 8002d32:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	f4ff af32 	bcc.w	8002ba2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
  }
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3720      	adds	r7, #32
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	00100002 	.word	0x00100002
 8002d60:	ffff0000 	.word	0xffff0000

08002d64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	460b      	mov	r3, r1
 8002d72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d006      	beq.n	8002d8e <I2C_MasterRequestWrite+0x2a>
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d003      	beq.n	8002d8e <I2C_MasterRequestWrite+0x2a>
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d8c:	d108      	bne.n	8002da0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e00b      	b.n	8002db8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	2b12      	cmp	r3, #18
 8002da6:	d107      	bne.n	8002db8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f84f 	bl	8002e68 <I2C_WaitOnFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00d      	beq.n	8002dec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dde:	d103      	bne.n	8002de8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e035      	b.n	8002e58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002df4:	d108      	bne.n	8002e08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002df6:	897b      	ldrh	r3, [r7, #10]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e04:	611a      	str	r2, [r3, #16]
 8002e06:	e01b      	b.n	8002e40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e08:	897b      	ldrh	r3, [r7, #10]
 8002e0a:	11db      	asrs	r3, r3, #7
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f003 0306 	and.w	r3, r3, #6
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f063 030f 	orn	r3, r3, #15
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	490e      	ldr	r1, [pc, #56]	; (8002e60 <I2C_MasterRequestWrite+0xfc>)
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f875 	bl	8002f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e010      	b.n	8002e58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e36:	897b      	ldrh	r3, [r7, #10]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4907      	ldr	r1, [pc, #28]	; (8002e64 <I2C_MasterRequestWrite+0x100>)
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f865 	bl	8002f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	00010008 	.word	0x00010008
 8002e64:	00010002 	.word	0x00010002

08002e68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e78:	e025      	b.n	8002ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e80:	d021      	beq.n	8002ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e82:	f7fe fd3b 	bl	80018fc <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d302      	bcc.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d116      	bne.n	8002ec6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f043 0220 	orr.w	r2, r3, #32
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e023      	b.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d10d      	bne.n	8002eec <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4013      	ands	r3, r2
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	e00c      	b.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	bf0c      	ite	eq
 8002efe:	2301      	moveq	r3, #1
 8002f00:	2300      	movne	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d0b6      	beq.n	8002e7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f24:	e051      	b.n	8002fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f34:	d123      	bne.n	8002f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f043 0204 	orr.w	r2, r3, #4
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e046      	b.n	800300c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f84:	d021      	beq.n	8002fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f86:	f7fe fcb9 	bl	80018fc <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d302      	bcc.n	8002f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d116      	bne.n	8002fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e020      	b.n	800300c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10c      	bne.n	8002fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bf14      	ite	ne
 8002fe6:	2301      	movne	r3, #1
 8002fe8:	2300      	moveq	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	e00b      	b.n	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf14      	ite	ne
 8003000:	2301      	movne	r3, #1
 8003002:	2300      	moveq	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d18d      	bne.n	8002f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003020:	e02d      	b.n	800307e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f878 	bl	8003118 <I2C_IsAcknowledgeFailed>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e02d      	b.n	800308e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003038:	d021      	beq.n	800307e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303a:	f7fe fc5f 	bl	80018fc <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	d302      	bcc.n	8003050 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d116      	bne.n	800307e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f043 0220 	orr.w	r2, r3, #32
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e007      	b.n	800308e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003088:	2b80      	cmp	r3, #128	; 0x80
 800308a:	d1ca      	bne.n	8003022 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030a2:	e02d      	b.n	8003100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f837 	bl	8003118 <I2C_IsAcknowledgeFailed>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e02d      	b.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ba:	d021      	beq.n	8003100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030bc:	f7fe fc1e 	bl	80018fc <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d302      	bcc.n	80030d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d116      	bne.n	8003100 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e007      	b.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b04      	cmp	r3, #4
 800310c:	d1ca      	bne.n	80030a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312e:	d11b      	bne.n	8003168 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003138:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0204 	orr.w	r2, r3, #4
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e25b      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d075      	beq.n	8003282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003196:	4ba3      	ldr	r3, [pc, #652]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d00c      	beq.n	80031bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a2:	4ba0      	ldr	r3, [pc, #640]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d112      	bne.n	80031d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ae:	4b9d      	ldr	r3, [pc, #628]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ba:	d10b      	bne.n	80031d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	4b99      	ldr	r3, [pc, #612]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d05b      	beq.n	8003280 <HAL_RCC_OscConfig+0x108>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d157      	bne.n	8003280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e236      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031dc:	d106      	bne.n	80031ec <HAL_RCC_OscConfig+0x74>
 80031de:	4b91      	ldr	r3, [pc, #580]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a90      	ldr	r2, [pc, #576]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e01d      	b.n	8003228 <HAL_RCC_OscConfig+0xb0>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x98>
 80031f6:	4b8b      	ldr	r3, [pc, #556]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a8a      	ldr	r2, [pc, #552]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b88      	ldr	r3, [pc, #544]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a87      	ldr	r2, [pc, #540]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e00b      	b.n	8003228 <HAL_RCC_OscConfig+0xb0>
 8003210:	4b84      	ldr	r3, [pc, #528]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a83      	ldr	r2, [pc, #524]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b81      	ldr	r3, [pc, #516]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a80      	ldr	r2, [pc, #512]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d013      	beq.n	8003258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe fb64 	bl	80018fc <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe fb60 	bl	80018fc <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e1fb      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b76      	ldr	r3, [pc, #472]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0xc0>
 8003256:	e014      	b.n	8003282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe fb50 	bl	80018fc <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003260:	f7fe fb4c 	bl	80018fc <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e1e7      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	4b6c      	ldr	r3, [pc, #432]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0xe8>
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d063      	beq.n	8003356 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800328e:	4b65      	ldr	r3, [pc, #404]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800329a:	4b62      	ldr	r3, [pc, #392]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d11c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a6:	4b5f      	ldr	r3, [pc, #380]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d116      	bne.n	80032e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b2:	4b5c      	ldr	r3, [pc, #368]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_RCC_OscConfig+0x152>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e1bb      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ca:	4b56      	ldr	r3, [pc, #344]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4952      	ldr	r1, [pc, #328]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032de:	e03a      	b.n	8003356 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e8:	4b4f      	ldr	r3, [pc, #316]	; (8003428 <HAL_RCC_OscConfig+0x2b0>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fe fb05 	bl	80018fc <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fe fb01 	bl	80018fc <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e19c      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	4b46      	ldr	r3, [pc, #280]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b43      	ldr	r3, [pc, #268]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4940      	ldr	r1, [pc, #256]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 8003324:	4313      	orrs	r3, r2
 8003326:	600b      	str	r3, [r1, #0]
 8003328:	e015      	b.n	8003356 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332a:	4b3f      	ldr	r3, [pc, #252]	; (8003428 <HAL_RCC_OscConfig+0x2b0>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe fae4 	bl	80018fc <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003338:	f7fe fae0 	bl	80018fc <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e17b      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	4b36      	ldr	r3, [pc, #216]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d030      	beq.n	80033c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800336a:	4b30      	ldr	r3, [pc, #192]	; (800342c <HAL_RCC_OscConfig+0x2b4>)
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fe fac4 	bl	80018fc <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003378:	f7fe fac0 	bl	80018fc <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e15b      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	4b26      	ldr	r3, [pc, #152]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x200>
 8003396:	e015      	b.n	80033c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003398:	4b24      	ldr	r3, [pc, #144]	; (800342c <HAL_RCC_OscConfig+0x2b4>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339e:	f7fe faad 	bl	80018fc <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a6:	f7fe faa9 	bl	80018fc <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e144      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80033ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f0      	bne.n	80033a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80a0 	beq.w	8003512 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10f      	bne.n	8003402 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	4a0e      	ldr	r2, [pc, #56]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f0:	6413      	str	r3, [r2, #64]	; 0x40
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033fe:	2301      	movs	r3, #1
 8003400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCC_OscConfig+0x2b8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d121      	bne.n	8003452 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <HAL_RCC_OscConfig+0x2b8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a07      	ldr	r2, [pc, #28]	; (8003430 <HAL_RCC_OscConfig+0x2b8>)
 8003414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341a:	f7fe fa6f 	bl	80018fc <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003420:	e011      	b.n	8003446 <HAL_RCC_OscConfig+0x2ce>
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	42470000 	.word	0x42470000
 800342c:	42470e80 	.word	0x42470e80
 8003430:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003434:	f7fe fa62 	bl	80018fc <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e0fd      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	4b81      	ldr	r3, [pc, #516]	; (800364c <HAL_RCC_OscConfig+0x4d4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d106      	bne.n	8003468 <HAL_RCC_OscConfig+0x2f0>
 800345a:	4b7d      	ldr	r3, [pc, #500]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	4a7c      	ldr	r2, [pc, #496]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	6713      	str	r3, [r2, #112]	; 0x70
 8003466:	e01c      	b.n	80034a2 <HAL_RCC_OscConfig+0x32a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b05      	cmp	r3, #5
 800346e:	d10c      	bne.n	800348a <HAL_RCC_OscConfig+0x312>
 8003470:	4b77      	ldr	r3, [pc, #476]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	4a76      	ldr	r2, [pc, #472]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	6713      	str	r3, [r2, #112]	; 0x70
 800347c:	4b74      	ldr	r3, [pc, #464]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003480:	4a73      	ldr	r2, [pc, #460]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6713      	str	r3, [r2, #112]	; 0x70
 8003488:	e00b      	b.n	80034a2 <HAL_RCC_OscConfig+0x32a>
 800348a:	4b71      	ldr	r3, [pc, #452]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a70      	ldr	r2, [pc, #448]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
 8003496:	4b6e      	ldr	r3, [pc, #440]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	4a6d      	ldr	r2, [pc, #436]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 800349c:	f023 0304 	bic.w	r3, r3, #4
 80034a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d015      	beq.n	80034d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034aa:	f7fe fa27 	bl	80018fc <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fe fa23 	bl	80018fc <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e0bc      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c8:	4b61      	ldr	r3, [pc, #388]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ee      	beq.n	80034b2 <HAL_RCC_OscConfig+0x33a>
 80034d4:	e014      	b.n	8003500 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d6:	f7fe fa11 	bl	80018fc <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fe fa0d 	bl	80018fc <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e0a6      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f4:	4b56      	ldr	r3, [pc, #344]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 80034f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ee      	bne.n	80034de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d105      	bne.n	8003512 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003506:	4b52      	ldr	r3, [pc, #328]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a51      	ldr	r2, [pc, #324]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 800350c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8092 	beq.w	8003640 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800351c:	4b4c      	ldr	r3, [pc, #304]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b08      	cmp	r3, #8
 8003526:	d05c      	beq.n	80035e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d141      	bne.n	80035b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003530:	4b48      	ldr	r3, [pc, #288]	; (8003654 <HAL_RCC_OscConfig+0x4dc>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7fe f9e1 	bl	80018fc <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353e:	f7fe f9dd 	bl	80018fc <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e078      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003550:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	019b      	lsls	r3, r3, #6
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	3b01      	subs	r3, #1
 8003576:	041b      	lsls	r3, r3, #16
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	4933      	ldr	r1, [pc, #204]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 8003582:	4313      	orrs	r3, r2
 8003584:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003586:	4b33      	ldr	r3, [pc, #204]	; (8003654 <HAL_RCC_OscConfig+0x4dc>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe f9b6 	bl	80018fc <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003594:	f7fe f9b2 	bl	80018fc <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e04d      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a6:	4b2a      	ldr	r3, [pc, #168]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x41c>
 80035b2:	e045      	b.n	8003640 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	4b27      	ldr	r3, [pc, #156]	; (8003654 <HAL_RCC_OscConfig+0x4dc>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ba:	f7fe f99f 	bl	80018fc <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fe f99b 	bl	80018fc <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e036      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d4:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0x44a>
 80035e0:	e02e      	b.n	8003640 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e029      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035ee:	4b18      	ldr	r3, [pc, #96]	; (8003650 <HAL_RCC_OscConfig+0x4d8>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d11c      	bne.n	800363c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d115      	bne.n	800363c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003616:	4013      	ands	r3, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800361c:	4293      	cmp	r3, r2
 800361e:	d10d      	bne.n	800363c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d106      	bne.n	800363c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40007000 	.word	0x40007000
 8003650:	40023800 	.word	0x40023800
 8003654:	42470060 	.word	0x42470060

08003658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0cc      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800366c:	4b68      	ldr	r3, [pc, #416]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d90c      	bls.n	8003694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b65      	ldr	r3, [pc, #404]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b63      	ldr	r3, [pc, #396]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0b8      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d020      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ac:	4b59      	ldr	r3, [pc, #356]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a58      	ldr	r2, [pc, #352]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036c4:	4b53      	ldr	r3, [pc, #332]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a52      	ldr	r2, [pc, #328]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d0:	4b50      	ldr	r3, [pc, #320]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	494d      	ldr	r1, [pc, #308]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d044      	beq.n	8003778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	4b47      	ldr	r3, [pc, #284]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d119      	bne.n	8003736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e07f      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d003      	beq.n	8003716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003712:	2b03      	cmp	r3, #3
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003716:	4b3f      	ldr	r3, [pc, #252]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e06f      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003726:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e067      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003736:	4b37      	ldr	r3, [pc, #220]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f023 0203 	bic.w	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4934      	ldr	r1, [pc, #208]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003748:	f7fe f8d8 	bl	80018fc <HAL_GetTick>
 800374c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	e00a      	b.n	8003766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003750:	f7fe f8d4 	bl	80018fc <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e04f      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	4b2b      	ldr	r3, [pc, #172]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 020c 	and.w	r2, r3, #12
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	429a      	cmp	r2, r3
 8003776:	d1eb      	bne.n	8003750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003778:	4b25      	ldr	r3, [pc, #148]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d20c      	bcs.n	80037a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b22      	ldr	r3, [pc, #136]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b20      	ldr	r3, [pc, #128]	; (8003810 <HAL_RCC_ClockConfig+0x1b8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e032      	b.n	8003806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ac:	4b19      	ldr	r3, [pc, #100]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4916      	ldr	r1, [pc, #88]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	490e      	ldr	r1, [pc, #56]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037de:	f000 f821 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 80037e2:	4601      	mov	r1, r0
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	5cd3      	ldrb	r3, [r2, r3]
 80037f2:	fa21 f303 	lsr.w	r3, r1, r3
 80037f6:	4a09      	ldr	r2, [pc, #36]	; (800381c <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_ClockConfig+0x1c8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd ff2e 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023c00 	.word	0x40023c00
 8003814:	40023800 	.word	0x40023800
 8003818:	0800a188 	.word	0x0800a188
 800381c:	20000000 	.word	0x20000000
 8003820:	20000004 	.word	0x20000004

08003824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	2300      	movs	r3, #0
 8003834:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800383a:	4b63      	ldr	r3, [pc, #396]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b04      	cmp	r3, #4
 8003844:	d007      	beq.n	8003856 <HAL_RCC_GetSysClockFreq+0x32>
 8003846:	2b08      	cmp	r3, #8
 8003848:	d008      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x38>
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 80b4 	bne.w	80039b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003850:	4b5e      	ldr	r3, [pc, #376]	; (80039cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003852:	60bb      	str	r3, [r7, #8]
       break;
 8003854:	e0b3      	b.n	80039be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003856:	4b5e      	ldr	r3, [pc, #376]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003858:	60bb      	str	r3, [r7, #8]
      break;
 800385a:	e0b0      	b.n	80039be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800385c:	4b5a      	ldr	r3, [pc, #360]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003864:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003866:	4b58      	ldr	r3, [pc, #352]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d04a      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003872:	4b55      	ldr	r3, [pc, #340]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	099b      	lsrs	r3, r3, #6
 8003878:	f04f 0400 	mov.w	r4, #0
 800387c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	ea03 0501 	and.w	r5, r3, r1
 8003888:	ea04 0602 	and.w	r6, r4, r2
 800388c:	4629      	mov	r1, r5
 800388e:	4632      	mov	r2, r6
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	f04f 0400 	mov.w	r4, #0
 8003898:	0154      	lsls	r4, r2, #5
 800389a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800389e:	014b      	lsls	r3, r1, #5
 80038a0:	4619      	mov	r1, r3
 80038a2:	4622      	mov	r2, r4
 80038a4:	1b49      	subs	r1, r1, r5
 80038a6:	eb62 0206 	sbc.w	r2, r2, r6
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	f04f 0400 	mov.w	r4, #0
 80038b2:	0194      	lsls	r4, r2, #6
 80038b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038b8:	018b      	lsls	r3, r1, #6
 80038ba:	1a5b      	subs	r3, r3, r1
 80038bc:	eb64 0402 	sbc.w	r4, r4, r2
 80038c0:	f04f 0100 	mov.w	r1, #0
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	00e2      	lsls	r2, r4, #3
 80038ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038ce:	00d9      	lsls	r1, r3, #3
 80038d0:	460b      	mov	r3, r1
 80038d2:	4614      	mov	r4, r2
 80038d4:	195b      	adds	r3, r3, r5
 80038d6:	eb44 0406 	adc.w	r4, r4, r6
 80038da:	f04f 0100 	mov.w	r1, #0
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	0262      	lsls	r2, r4, #9
 80038e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80038e8:	0259      	lsls	r1, r3, #9
 80038ea:	460b      	mov	r3, r1
 80038ec:	4614      	mov	r4, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	4621      	mov	r1, r4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f04f 0400 	mov.w	r4, #0
 80038f8:	461a      	mov	r2, r3
 80038fa:	4623      	mov	r3, r4
 80038fc:	f7fc fea4 	bl	8000648 <__aeabi_uldivmod>
 8003900:	4603      	mov	r3, r0
 8003902:	460c      	mov	r4, r1
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e049      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003908:	4b2f      	ldr	r3, [pc, #188]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	f04f 0400 	mov.w	r4, #0
 8003912:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	ea03 0501 	and.w	r5, r3, r1
 800391e:	ea04 0602 	and.w	r6, r4, r2
 8003922:	4629      	mov	r1, r5
 8003924:	4632      	mov	r2, r6
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	f04f 0400 	mov.w	r4, #0
 800392e:	0154      	lsls	r4, r2, #5
 8003930:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003934:	014b      	lsls	r3, r1, #5
 8003936:	4619      	mov	r1, r3
 8003938:	4622      	mov	r2, r4
 800393a:	1b49      	subs	r1, r1, r5
 800393c:	eb62 0206 	sbc.w	r2, r2, r6
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	f04f 0400 	mov.w	r4, #0
 8003948:	0194      	lsls	r4, r2, #6
 800394a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800394e:	018b      	lsls	r3, r1, #6
 8003950:	1a5b      	subs	r3, r3, r1
 8003952:	eb64 0402 	sbc.w	r4, r4, r2
 8003956:	f04f 0100 	mov.w	r1, #0
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	00e2      	lsls	r2, r4, #3
 8003960:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003964:	00d9      	lsls	r1, r3, #3
 8003966:	460b      	mov	r3, r1
 8003968:	4614      	mov	r4, r2
 800396a:	195b      	adds	r3, r3, r5
 800396c:	eb44 0406 	adc.w	r4, r4, r6
 8003970:	f04f 0100 	mov.w	r1, #0
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	02a2      	lsls	r2, r4, #10
 800397a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800397e:	0299      	lsls	r1, r3, #10
 8003980:	460b      	mov	r3, r1
 8003982:	4614      	mov	r4, r2
 8003984:	4618      	mov	r0, r3
 8003986:	4621      	mov	r1, r4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f04f 0400 	mov.w	r4, #0
 800398e:	461a      	mov	r2, r3
 8003990:	4623      	mov	r3, r4
 8003992:	f7fc fe59 	bl	8000648 <__aeabi_uldivmod>
 8003996:	4603      	mov	r3, r0
 8003998:	460c      	mov	r4, r1
 800399a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	3301      	adds	r3, #1
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	60bb      	str	r3, [r7, #8]
      break;
 80039b6:	e002      	b.n	80039be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b8:	4b04      	ldr	r3, [pc, #16]	; (80039cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039ba:	60bb      	str	r3, [r7, #8]
      break;
 80039bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039be:	68bb      	ldr	r3, [r7, #8]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039c8:	40023800 	.word	0x40023800
 80039cc:	00f42400 	.word	0x00f42400
 80039d0:	007a1200 	.word	0x007a1200

080039d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039da:	681b      	ldr	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000000 	.word	0x20000000

080039ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039f0:	f7ff fff0 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 80039f4:	4601      	mov	r1, r0
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	0a9b      	lsrs	r3, r3, #10
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	4a03      	ldr	r2, [pc, #12]	; (8003a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	0800a198 	.word	0x0800a198

08003a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a18:	f7ff ffdc 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8003a1c:	4601      	mov	r1, r0
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0b5b      	lsrs	r3, r3, #13
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4a03      	ldr	r2, [pc, #12]	; (8003a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a2a:	5cd3      	ldrb	r3, [r2, r3]
 8003a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	0800a198 	.word	0x0800a198

08003a3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	220f      	movs	r2, #15
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a4c:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <HAL_RCC_GetClockConfig+0x5c>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0203 	and.w	r2, r3, #3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a58:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <HAL_RCC_GetClockConfig+0x5c>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <HAL_RCC_GetClockConfig+0x5c>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a70:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <HAL_RCC_GetClockConfig+0x5c>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	08db      	lsrs	r3, r3, #3
 8003a76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <HAL_RCC_GetClockConfig+0x60>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 020f 	and.w	r2, r3, #15
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	601a      	str	r2, [r3, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40023c00 	.word	0x40023c00

08003aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e01d      	b.n	8003aee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd fcb8 	bl	800143c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	4619      	mov	r1, r3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	f000 fa14 	bl	8003f0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b085      	sub	sp, #20
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b06      	cmp	r3, #6
 8003b1e:	d007      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d122      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d11b      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f06f 0202 	mvn.w	r2, #2
 8003b6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f9a5 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8003b86:	e005      	b.n	8003b94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f997 	bl	8003ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f9a8 	bl	8003ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d122      	bne.n	8003bee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d11b      	bne.n	8003bee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f06f 0204 	mvn.w	r2, #4
 8003bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f97b 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8003bda:	e005      	b.n	8003be8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f96d 	bl	8003ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f97e 	bl	8003ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d122      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d11b      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f06f 0208 	mvn.w	r2, #8
 8003c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2204      	movs	r2, #4
 8003c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f951 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8003c2e:	e005      	b.n	8003c3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f943 	bl	8003ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f954 	bl	8003ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b10      	cmp	r3, #16
 8003c4e:	d122      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d11b      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f06f 0210 	mvn.w	r2, #16
 8003c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f927 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8003c82:	e005      	b.n	8003c90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f919 	bl	8003ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f92a 	bl	8003ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d107      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0201 	mvn.w	r2, #1
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7fd fa8b 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ccc:	2b80      	cmp	r3, #128	; 0x80
 8003cce:	d10e      	bne.n	8003cee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d107      	bne.n	8003cee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 facf 	bl	800428c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d10e      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	2b40      	cmp	r3, #64	; 0x40
 8003d08:	d107      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f8ef 	bl	8003ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d10e      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d107      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f06f 0220 	mvn.w	r2, #32
 8003d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fa99 	bl	8004278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_TIM_ConfigClockSource+0x18>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e0a6      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x166>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2202      	movs	r2, #2
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d84:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d067      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0x120>
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d80b      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x6c>
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d073      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x140>
 8003da6:	2b10      	cmp	r3, #16
 8003da8:	d802      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x62>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d06f      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003dae:	e078      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d06c      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x140>
 8003db4:	2b30      	cmp	r3, #48	; 0x30
 8003db6:	d06a      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003db8:	e073      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	2b70      	cmp	r3, #112	; 0x70
 8003dbc:	d00d      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x8c>
 8003dbe:	2b70      	cmp	r3, #112	; 0x70
 8003dc0:	d804      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x7e>
 8003dc2:	2b50      	cmp	r3, #80	; 0x50
 8003dc4:	d033      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0xe0>
 8003dc6:	2b60      	cmp	r3, #96	; 0x60
 8003dc8:	d041      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dca:	e06a      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd0:	d066      	beq.n	8003ea0 <HAL_TIM_ConfigClockSource+0x152>
 8003dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd6:	d017      	beq.n	8003e08 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003dd8:	e063      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6899      	ldr	r1, [r3, #8]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f000 f9a9 	bl	8004140 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	609a      	str	r2, [r3, #8]
      break;
 8003e06:	e04c      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	6899      	ldr	r1, [r3, #8]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f000 f992 	bl	8004140 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e2a:	609a      	str	r2, [r3, #8]
      break;
 8003e2c:	e039      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6859      	ldr	r1, [r3, #4]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f000 f906 	bl	800404c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2150      	movs	r1, #80	; 0x50
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f95f 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003e4c:	e029      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6859      	ldr	r1, [r3, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f000 f925 	bl	80040aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2160      	movs	r1, #96	; 0x60
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f94f 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003e6c:	e019      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f000 f8e6 	bl	800404c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2140      	movs	r1, #64	; 0x40
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f93f 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e009      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f000 f936 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003e9e:	e000      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003ea0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a40      	ldr	r2, [pc, #256]	; (8004020 <TIM_Base_SetConfig+0x114>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d013      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2a:	d00f      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a3d      	ldr	r2, [pc, #244]	; (8004024 <TIM_Base_SetConfig+0x118>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00b      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3c      	ldr	r2, [pc, #240]	; (8004028 <TIM_Base_SetConfig+0x11c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d007      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a3b      	ldr	r2, [pc, #236]	; (800402c <TIM_Base_SetConfig+0x120>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_Base_SetConfig+0x40>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a3a      	ldr	r2, [pc, #232]	; (8004030 <TIM_Base_SetConfig+0x124>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d108      	bne.n	8003f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a2f      	ldr	r2, [pc, #188]	; (8004020 <TIM_Base_SetConfig+0x114>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d02b      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6c:	d027      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2c      	ldr	r2, [pc, #176]	; (8004024 <TIM_Base_SetConfig+0x118>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d023      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a2b      	ldr	r2, [pc, #172]	; (8004028 <TIM_Base_SetConfig+0x11c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01f      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a2a      	ldr	r2, [pc, #168]	; (800402c <TIM_Base_SetConfig+0x120>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01b      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a29      	ldr	r2, [pc, #164]	; (8004030 <TIM_Base_SetConfig+0x124>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d017      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a28      	ldr	r2, [pc, #160]	; (8004034 <TIM_Base_SetConfig+0x128>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a27      	ldr	r2, [pc, #156]	; (8004038 <TIM_Base_SetConfig+0x12c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00f      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a26      	ldr	r2, [pc, #152]	; (800403c <TIM_Base_SetConfig+0x130>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00b      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a25      	ldr	r2, [pc, #148]	; (8004040 <TIM_Base_SetConfig+0x134>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d007      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a24      	ldr	r2, [pc, #144]	; (8004044 <TIM_Base_SetConfig+0x138>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d003      	beq.n	8003fbe <TIM_Base_SetConfig+0xb2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a23      	ldr	r2, [pc, #140]	; (8004048 <TIM_Base_SetConfig+0x13c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d108      	bne.n	8003fd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <TIM_Base_SetConfig+0x114>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_Base_SetConfig+0xf8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a0c      	ldr	r2, [pc, #48]	; (8004030 <TIM_Base_SetConfig+0x124>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d103      	bne.n	800400c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	615a      	str	r2, [r3, #20]
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40010000 	.word	0x40010000
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800
 800402c:	40000c00 	.word	0x40000c00
 8004030:	40010400 	.word	0x40010400
 8004034:	40014000 	.word	0x40014000
 8004038:	40014400 	.word	0x40014400
 800403c:	40014800 	.word	0x40014800
 8004040:	40001800 	.word	0x40001800
 8004044:	40001c00 	.word	0x40001c00
 8004048:	40002000 	.word	0x40002000

0800404c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f023 0201 	bic.w	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f023 030a 	bic.w	r3, r3, #10
 8004088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	621a      	str	r2, [r3, #32]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b087      	sub	sp, #28
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0210 	bic.w	r2, r3, #16
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	031b      	lsls	r3, r3, #12
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	f043 0307 	orr.w	r3, r3, #7
 800412c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	609a      	str	r2, [r3, #8]
}
 8004134:	bf00      	nop
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	021a      	lsls	r2, r3, #8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	431a      	orrs	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4313      	orrs	r3, r2
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	609a      	str	r2, [r3, #8]
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004194:	2302      	movs	r3, #2
 8004196:	e05a      	b.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a21      	ldr	r2, [pc, #132]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d022      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e4:	d01d      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d018      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1b      	ldr	r2, [pc, #108]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1a      	ldr	r2, [pc, #104]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00e      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a18      	ldr	r2, [pc, #96]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a17      	ldr	r2, [pc, #92]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a15      	ldr	r2, [pc, #84]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10c      	bne.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	4313      	orrs	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40010000 	.word	0x40010000
 8004260:	40000400 	.word	0x40000400
 8004264:	40000800 	.word	0x40000800
 8004268:	40000c00 	.word	0x40000c00
 800426c:	40010400 	.word	0x40010400
 8004270:	40014000 	.word	0x40014000
 8004274:	40001800 	.word	0x40001800

08004278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e03f      	b.n	8004332 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd f8de 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	; 0x24
 80042d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fab3 	bl	8004850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	4613      	mov	r3, r2
 8004346:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b20      	cmp	r3, #32
 8004352:	d140      	bne.n	80043d6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_UART_Receive_IT+0x26>
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e039      	b.n	80043d8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_UART_Receive_IT+0x38>
 800436e:	2302      	movs	r3, #2
 8004370:	e032      	b.n	80043d8 <HAL_UART_Receive_IT+0x9e>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	88fa      	ldrh	r2, [r7, #6]
 8004384:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	88fa      	ldrh	r2, [r7, #6]
 800438a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2222      	movs	r2, #34	; 0x22
 8004396:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695a      	ldr	r2, [r3, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0220 	orr.w	r2, r2, #32
 80043d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e000      	b.n	80043d8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10d      	bne.n	8004436 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_UART_IRQHandler+0x52>
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f98c 	bl	800474c <UART_Receive_IT>
      return;
 8004434:	e0d1      	b.n	80045da <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80b0 	beq.w	800459e <HAL_UART_IRQHandler+0x1ba>
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d105      	bne.n	8004454 <HAL_UART_IRQHandler+0x70>
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 80a5 	beq.w	800459e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <HAL_UART_IRQHandler+0x90>
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	f043 0201 	orr.w	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_UART_IRQHandler+0xb0>
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448c:	f043 0202 	orr.w	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_UART_IRQHandler+0xd0>
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	f043 0204 	orr.w	r2, r3, #4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00f      	beq.n	80044de <HAL_UART_IRQHandler+0xfa>
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d104      	bne.n	80044d2 <HAL_UART_IRQHandler+0xee>
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	f043 0208 	orr.w	r2, r3, #8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d078      	beq.n	80045d8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <HAL_UART_IRQHandler+0x11c>
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f926 	bl	800474c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	bf0c      	ite	eq
 800450e:	2301      	moveq	r3, #1
 8004510:	2300      	movne	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <HAL_UART_IRQHandler+0x144>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d031      	beq.n	800458c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f86f 	bl	800460c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d123      	bne.n	8004584 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004550:	2b00      	cmp	r3, #0
 8004552:	d013      	beq.n	800457c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004558:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <HAL_UART_IRQHandler+0x1fc>)
 800455a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004560:	4618      	mov	r0, r3
 8004562:	f7fd fec7 	bl	80022f4 <HAL_DMA_Abort_IT>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d016      	beq.n	800459a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004576:	4610      	mov	r0, r2
 8004578:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457a:	e00e      	b.n	800459a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f83b 	bl	80045f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004582:	e00a      	b.n	800459a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f837 	bl	80045f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458a:	e006      	b.n	800459a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f833 	bl	80045f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004598:	e01e      	b.n	80045d8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800459a:	bf00      	nop
    return;
 800459c:	e01c      	b.n	80045d8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_UART_IRQHandler+0x1d6>
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f85c 	bl	8004670 <UART_Transmit_IT>
    return;
 80045b8:	e00f      	b.n	80045da <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <HAL_UART_IRQHandler+0x1f6>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f8a4 	bl	800471c <UART_EndTransmit_IT>
    return;
 80045d4:	bf00      	nop
 80045d6:	e000      	b.n	80045da <HAL_UART_IRQHandler+0x1f6>
    return;
 80045d8:	bf00      	nop
  }
}
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	08004649 	.word	0x08004649

080045e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004622:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0201 	bic.w	r2, r2, #1
 8004632:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff ffc8 	bl	80045f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b21      	cmp	r3, #33	; 0x21
 8004682:	d144      	bne.n	800470e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468c:	d11a      	bne.n	80046c4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d105      	bne.n	80046b8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	1c9a      	adds	r2, r3, #2
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	621a      	str	r2, [r3, #32]
 80046b6:	e00e      	b.n	80046d6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	621a      	str	r2, [r3, #32]
 80046c2:	e008      	b.n	80046d6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	1c59      	adds	r1, r3, #1
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6211      	str	r1, [r2, #32]
 80046ce:	781a      	ldrb	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29b      	uxth	r3, r3
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	4619      	mov	r1, r3
 80046e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10f      	bne.n	800470a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004708:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	e000      	b.n	8004710 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800470e:	2302      	movs	r3, #2
  }
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004732:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff ff51 	bl	80045e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b22      	cmp	r3, #34	; 0x22
 800475e:	d171      	bne.n	8004844 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004768:	d123      	bne.n	80047b2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10e      	bne.n	8004796 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	1c9a      	adds	r2, r3, #2
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	629a      	str	r2, [r3, #40]	; 0x28
 8004794:	e029      	b.n	80047ea <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	b29b      	uxth	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	629a      	str	r2, [r3, #40]	; 0x28
 80047b0:	e01b      	b.n	80047ea <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10a      	bne.n	80047d0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6858      	ldr	r0, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	1c59      	adds	r1, r3, #1
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6291      	str	r1, [r2, #40]	; 0x28
 80047ca:	b2c2      	uxtb	r2, r0
 80047cc:	701a      	strb	r2, [r3, #0]
 80047ce:	e00c      	b.n	80047ea <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	1c58      	adds	r0, r3, #1
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	6288      	str	r0, [r1, #40]	; 0x28
 80047e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	4619      	mov	r1, r3
 80047f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d120      	bne.n	8004840 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0220 	bic.w	r2, r2, #32
 800480c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800481c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f004 fbcf 	bl	8008fda <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	e002      	b.n	8004846 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004844:	2302      	movs	r3, #2
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004892:	f023 030c 	bic.w	r3, r3, #12
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	68f9      	ldr	r1, [r7, #12]
 800489c:	430b      	orrs	r3, r1
 800489e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048be:	f040 818b 	bne.w	8004bd8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4ac1      	ldr	r2, [pc, #772]	; (8004bcc <UART_SetConfig+0x37c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d005      	beq.n	80048d8 <UART_SetConfig+0x88>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4abf      	ldr	r2, [pc, #764]	; (8004bd0 <UART_SetConfig+0x380>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	f040 80bd 	bne.w	8004a52 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048d8:	f7ff f89c 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 80048dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	461d      	mov	r5, r3
 80048e2:	f04f 0600 	mov.w	r6, #0
 80048e6:	46a8      	mov	r8, r5
 80048e8:	46b1      	mov	r9, r6
 80048ea:	eb18 0308 	adds.w	r3, r8, r8
 80048ee:	eb49 0409 	adc.w	r4, r9, r9
 80048f2:	4698      	mov	r8, r3
 80048f4:	46a1      	mov	r9, r4
 80048f6:	eb18 0805 	adds.w	r8, r8, r5
 80048fa:	eb49 0906 	adc.w	r9, r9, r6
 80048fe:	f04f 0100 	mov.w	r1, #0
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800490a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800490e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004912:	4688      	mov	r8, r1
 8004914:	4691      	mov	r9, r2
 8004916:	eb18 0005 	adds.w	r0, r8, r5
 800491a:	eb49 0106 	adc.w	r1, r9, r6
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	461d      	mov	r5, r3
 8004924:	f04f 0600 	mov.w	r6, #0
 8004928:	196b      	adds	r3, r5, r5
 800492a:	eb46 0406 	adc.w	r4, r6, r6
 800492e:	461a      	mov	r2, r3
 8004930:	4623      	mov	r3, r4
 8004932:	f7fb fe89 	bl	8000648 <__aeabi_uldivmod>
 8004936:	4603      	mov	r3, r0
 8004938:	460c      	mov	r4, r1
 800493a:	461a      	mov	r2, r3
 800493c:	4ba5      	ldr	r3, [pc, #660]	; (8004bd4 <UART_SetConfig+0x384>)
 800493e:	fba3 2302 	umull	r2, r3, r3, r2
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	461d      	mov	r5, r3
 800494c:	f04f 0600 	mov.w	r6, #0
 8004950:	46a9      	mov	r9, r5
 8004952:	46b2      	mov	sl, r6
 8004954:	eb19 0309 	adds.w	r3, r9, r9
 8004958:	eb4a 040a 	adc.w	r4, sl, sl
 800495c:	4699      	mov	r9, r3
 800495e:	46a2      	mov	sl, r4
 8004960:	eb19 0905 	adds.w	r9, r9, r5
 8004964:	eb4a 0a06 	adc.w	sl, sl, r6
 8004968:	f04f 0100 	mov.w	r1, #0
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004974:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004978:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800497c:	4689      	mov	r9, r1
 800497e:	4692      	mov	sl, r2
 8004980:	eb19 0005 	adds.w	r0, r9, r5
 8004984:	eb4a 0106 	adc.w	r1, sl, r6
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	461d      	mov	r5, r3
 800498e:	f04f 0600 	mov.w	r6, #0
 8004992:	196b      	adds	r3, r5, r5
 8004994:	eb46 0406 	adc.w	r4, r6, r6
 8004998:	461a      	mov	r2, r3
 800499a:	4623      	mov	r3, r4
 800499c:	f7fb fe54 	bl	8000648 <__aeabi_uldivmod>
 80049a0:	4603      	mov	r3, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	461a      	mov	r2, r3
 80049a6:	4b8b      	ldr	r3, [pc, #556]	; (8004bd4 <UART_SetConfig+0x384>)
 80049a8:	fba3 1302 	umull	r1, r3, r3, r2
 80049ac:	095b      	lsrs	r3, r3, #5
 80049ae:	2164      	movs	r1, #100	; 0x64
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	3332      	adds	r3, #50	; 0x32
 80049ba:	4a86      	ldr	r2, [pc, #536]	; (8004bd4 <UART_SetConfig+0x384>)
 80049bc:	fba2 2303 	umull	r2, r3, r2, r3
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049c8:	4498      	add	r8, r3
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	461d      	mov	r5, r3
 80049ce:	f04f 0600 	mov.w	r6, #0
 80049d2:	46a9      	mov	r9, r5
 80049d4:	46b2      	mov	sl, r6
 80049d6:	eb19 0309 	adds.w	r3, r9, r9
 80049da:	eb4a 040a 	adc.w	r4, sl, sl
 80049de:	4699      	mov	r9, r3
 80049e0:	46a2      	mov	sl, r4
 80049e2:	eb19 0905 	adds.w	r9, r9, r5
 80049e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80049ea:	f04f 0100 	mov.w	r1, #0
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049fe:	4689      	mov	r9, r1
 8004a00:	4692      	mov	sl, r2
 8004a02:	eb19 0005 	adds.w	r0, r9, r5
 8004a06:	eb4a 0106 	adc.w	r1, sl, r6
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	461d      	mov	r5, r3
 8004a10:	f04f 0600 	mov.w	r6, #0
 8004a14:	196b      	adds	r3, r5, r5
 8004a16:	eb46 0406 	adc.w	r4, r6, r6
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	4623      	mov	r3, r4
 8004a1e:	f7fb fe13 	bl	8000648 <__aeabi_uldivmod>
 8004a22:	4603      	mov	r3, r0
 8004a24:	460c      	mov	r4, r1
 8004a26:	461a      	mov	r2, r3
 8004a28:	4b6a      	ldr	r3, [pc, #424]	; (8004bd4 <UART_SetConfig+0x384>)
 8004a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	2164      	movs	r1, #100	; 0x64
 8004a32:	fb01 f303 	mul.w	r3, r1, r3
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	3332      	adds	r3, #50	; 0x32
 8004a3c:	4a65      	ldr	r2, [pc, #404]	; (8004bd4 <UART_SetConfig+0x384>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	f003 0207 	and.w	r2, r3, #7
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4442      	add	r2, r8
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	e26f      	b.n	8004f32 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a52:	f7fe ffcb 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8004a56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	461d      	mov	r5, r3
 8004a5c:	f04f 0600 	mov.w	r6, #0
 8004a60:	46a8      	mov	r8, r5
 8004a62:	46b1      	mov	r9, r6
 8004a64:	eb18 0308 	adds.w	r3, r8, r8
 8004a68:	eb49 0409 	adc.w	r4, r9, r9
 8004a6c:	4698      	mov	r8, r3
 8004a6e:	46a1      	mov	r9, r4
 8004a70:	eb18 0805 	adds.w	r8, r8, r5
 8004a74:	eb49 0906 	adc.w	r9, r9, r6
 8004a78:	f04f 0100 	mov.w	r1, #0
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a8c:	4688      	mov	r8, r1
 8004a8e:	4691      	mov	r9, r2
 8004a90:	eb18 0005 	adds.w	r0, r8, r5
 8004a94:	eb49 0106 	adc.w	r1, r9, r6
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	461d      	mov	r5, r3
 8004a9e:	f04f 0600 	mov.w	r6, #0
 8004aa2:	196b      	adds	r3, r5, r5
 8004aa4:	eb46 0406 	adc.w	r4, r6, r6
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4623      	mov	r3, r4
 8004aac:	f7fb fdcc 	bl	8000648 <__aeabi_uldivmod>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4b47      	ldr	r3, [pc, #284]	; (8004bd4 <UART_SetConfig+0x384>)
 8004ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	461d      	mov	r5, r3
 8004ac6:	f04f 0600 	mov.w	r6, #0
 8004aca:	46a9      	mov	r9, r5
 8004acc:	46b2      	mov	sl, r6
 8004ace:	eb19 0309 	adds.w	r3, r9, r9
 8004ad2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ad6:	4699      	mov	r9, r3
 8004ad8:	46a2      	mov	sl, r4
 8004ada:	eb19 0905 	adds.w	r9, r9, r5
 8004ade:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ae2:	f04f 0100 	mov.w	r1, #0
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004af2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004af6:	4689      	mov	r9, r1
 8004af8:	4692      	mov	sl, r2
 8004afa:	eb19 0005 	adds.w	r0, r9, r5
 8004afe:	eb4a 0106 	adc.w	r1, sl, r6
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	461d      	mov	r5, r3
 8004b08:	f04f 0600 	mov.w	r6, #0
 8004b0c:	196b      	adds	r3, r5, r5
 8004b0e:	eb46 0406 	adc.w	r4, r6, r6
 8004b12:	461a      	mov	r2, r3
 8004b14:	4623      	mov	r3, r4
 8004b16:	f7fb fd97 	bl	8000648 <__aeabi_uldivmod>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	461a      	mov	r2, r3
 8004b20:	4b2c      	ldr	r3, [pc, #176]	; (8004bd4 <UART_SetConfig+0x384>)
 8004b22:	fba3 1302 	umull	r1, r3, r3, r2
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2164      	movs	r1, #100	; 0x64
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	3332      	adds	r3, #50	; 0x32
 8004b34:	4a27      	ldr	r2, [pc, #156]	; (8004bd4 <UART_SetConfig+0x384>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b42:	4498      	add	r8, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	461d      	mov	r5, r3
 8004b48:	f04f 0600 	mov.w	r6, #0
 8004b4c:	46a9      	mov	r9, r5
 8004b4e:	46b2      	mov	sl, r6
 8004b50:	eb19 0309 	adds.w	r3, r9, r9
 8004b54:	eb4a 040a 	adc.w	r4, sl, sl
 8004b58:	4699      	mov	r9, r3
 8004b5a:	46a2      	mov	sl, r4
 8004b5c:	eb19 0905 	adds.w	r9, r9, r5
 8004b60:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b64:	f04f 0100 	mov.w	r1, #0
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b78:	4689      	mov	r9, r1
 8004b7a:	4692      	mov	sl, r2
 8004b7c:	eb19 0005 	adds.w	r0, r9, r5
 8004b80:	eb4a 0106 	adc.w	r1, sl, r6
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	461d      	mov	r5, r3
 8004b8a:	f04f 0600 	mov.w	r6, #0
 8004b8e:	196b      	adds	r3, r5, r5
 8004b90:	eb46 0406 	adc.w	r4, r6, r6
 8004b94:	461a      	mov	r2, r3
 8004b96:	4623      	mov	r3, r4
 8004b98:	f7fb fd56 	bl	8000648 <__aeabi_uldivmod>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <UART_SetConfig+0x384>)
 8004ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	2164      	movs	r1, #100	; 0x64
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	3332      	adds	r3, #50	; 0x32
 8004bb6:	4a07      	ldr	r2, [pc, #28]	; (8004bd4 <UART_SetConfig+0x384>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	f003 0207 	and.w	r2, r3, #7
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4442      	add	r2, r8
 8004bc8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004bca:	e1b2      	b.n	8004f32 <UART_SetConfig+0x6e2>
 8004bcc:	40011000 	.word	0x40011000
 8004bd0:	40011400 	.word	0x40011400
 8004bd4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4ad7      	ldr	r2, [pc, #860]	; (8004f3c <UART_SetConfig+0x6ec>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d005      	beq.n	8004bee <UART_SetConfig+0x39e>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4ad6      	ldr	r2, [pc, #856]	; (8004f40 <UART_SetConfig+0x6f0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	f040 80d1 	bne.w	8004d90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bee:	f7fe ff11 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8004bf2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	469a      	mov	sl, r3
 8004bf8:	f04f 0b00 	mov.w	fp, #0
 8004bfc:	46d0      	mov	r8, sl
 8004bfe:	46d9      	mov	r9, fp
 8004c00:	eb18 0308 	adds.w	r3, r8, r8
 8004c04:	eb49 0409 	adc.w	r4, r9, r9
 8004c08:	4698      	mov	r8, r3
 8004c0a:	46a1      	mov	r9, r4
 8004c0c:	eb18 080a 	adds.w	r8, r8, sl
 8004c10:	eb49 090b 	adc.w	r9, r9, fp
 8004c14:	f04f 0100 	mov.w	r1, #0
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c28:	4688      	mov	r8, r1
 8004c2a:	4691      	mov	r9, r2
 8004c2c:	eb1a 0508 	adds.w	r5, sl, r8
 8004c30:	eb4b 0609 	adc.w	r6, fp, r9
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	f04f 0400 	mov.w	r4, #0
 8004c46:	0094      	lsls	r4, r2, #2
 8004c48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c4c:	008b      	lsls	r3, r1, #2
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4623      	mov	r3, r4
 8004c52:	4628      	mov	r0, r5
 8004c54:	4631      	mov	r1, r6
 8004c56:	f7fb fcf7 	bl	8000648 <__aeabi_uldivmod>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	461a      	mov	r2, r3
 8004c60:	4bb8      	ldr	r3, [pc, #736]	; (8004f44 <UART_SetConfig+0x6f4>)
 8004c62:	fba3 2302 	umull	r2, r3, r3, r2
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	469b      	mov	fp, r3
 8004c70:	f04f 0c00 	mov.w	ip, #0
 8004c74:	46d9      	mov	r9, fp
 8004c76:	46e2      	mov	sl, ip
 8004c78:	eb19 0309 	adds.w	r3, r9, r9
 8004c7c:	eb4a 040a 	adc.w	r4, sl, sl
 8004c80:	4699      	mov	r9, r3
 8004c82:	46a2      	mov	sl, r4
 8004c84:	eb19 090b 	adds.w	r9, r9, fp
 8004c88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c8c:	f04f 0100 	mov.w	r1, #0
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ca0:	4689      	mov	r9, r1
 8004ca2:	4692      	mov	sl, r2
 8004ca4:	eb1b 0509 	adds.w	r5, fp, r9
 8004ca8:	eb4c 060a 	adc.w	r6, ip, sl
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	f04f 0400 	mov.w	r4, #0
 8004cbe:	0094      	lsls	r4, r2, #2
 8004cc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cc4:	008b      	lsls	r3, r1, #2
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4623      	mov	r3, r4
 8004cca:	4628      	mov	r0, r5
 8004ccc:	4631      	mov	r1, r6
 8004cce:	f7fb fcbb 	bl	8000648 <__aeabi_uldivmod>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4b9a      	ldr	r3, [pc, #616]	; (8004f44 <UART_SetConfig+0x6f4>)
 8004cda:	fba3 1302 	umull	r1, r3, r3, r2
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	2164      	movs	r1, #100	; 0x64
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	3332      	adds	r3, #50	; 0x32
 8004cec:	4a95      	ldr	r2, [pc, #596]	; (8004f44 <UART_SetConfig+0x6f4>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf8:	4498      	add	r8, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	469b      	mov	fp, r3
 8004cfe:	f04f 0c00 	mov.w	ip, #0
 8004d02:	46d9      	mov	r9, fp
 8004d04:	46e2      	mov	sl, ip
 8004d06:	eb19 0309 	adds.w	r3, r9, r9
 8004d0a:	eb4a 040a 	adc.w	r4, sl, sl
 8004d0e:	4699      	mov	r9, r3
 8004d10:	46a2      	mov	sl, r4
 8004d12:	eb19 090b 	adds.w	r9, r9, fp
 8004d16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d1a:	f04f 0100 	mov.w	r1, #0
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d2e:	4689      	mov	r9, r1
 8004d30:	4692      	mov	sl, r2
 8004d32:	eb1b 0509 	adds.w	r5, fp, r9
 8004d36:	eb4c 060a 	adc.w	r6, ip, sl
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	f04f 0400 	mov.w	r4, #0
 8004d4c:	0094      	lsls	r4, r2, #2
 8004d4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d52:	008b      	lsls	r3, r1, #2
 8004d54:	461a      	mov	r2, r3
 8004d56:	4623      	mov	r3, r4
 8004d58:	4628      	mov	r0, r5
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	f7fb fc74 	bl	8000648 <__aeabi_uldivmod>
 8004d60:	4603      	mov	r3, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	461a      	mov	r2, r3
 8004d66:	4b77      	ldr	r3, [pc, #476]	; (8004f44 <UART_SetConfig+0x6f4>)
 8004d68:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	2164      	movs	r1, #100	; 0x64
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	3332      	adds	r3, #50	; 0x32
 8004d7a:	4a72      	ldr	r2, [pc, #456]	; (8004f44 <UART_SetConfig+0x6f4>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	f003 020f 	and.w	r2, r3, #15
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4442      	add	r2, r8
 8004d8c:	609a      	str	r2, [r3, #8]
 8004d8e:	e0d0      	b.n	8004f32 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d90:	f7fe fe2c 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8004d94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	469a      	mov	sl, r3
 8004d9a:	f04f 0b00 	mov.w	fp, #0
 8004d9e:	46d0      	mov	r8, sl
 8004da0:	46d9      	mov	r9, fp
 8004da2:	eb18 0308 	adds.w	r3, r8, r8
 8004da6:	eb49 0409 	adc.w	r4, r9, r9
 8004daa:	4698      	mov	r8, r3
 8004dac:	46a1      	mov	r9, r4
 8004dae:	eb18 080a 	adds.w	r8, r8, sl
 8004db2:	eb49 090b 	adc.w	r9, r9, fp
 8004db6:	f04f 0100 	mov.w	r1, #0
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004dc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004dc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004dca:	4688      	mov	r8, r1
 8004dcc:	4691      	mov	r9, r2
 8004dce:	eb1a 0508 	adds.w	r5, sl, r8
 8004dd2:	eb4b 0609 	adc.w	r6, fp, r9
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	f04f 0400 	mov.w	r4, #0
 8004de8:	0094      	lsls	r4, r2, #2
 8004dea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004dee:	008b      	lsls	r3, r1, #2
 8004df0:	461a      	mov	r2, r3
 8004df2:	4623      	mov	r3, r4
 8004df4:	4628      	mov	r0, r5
 8004df6:	4631      	mov	r1, r6
 8004df8:	f7fb fc26 	bl	8000648 <__aeabi_uldivmod>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	461a      	mov	r2, r3
 8004e02:	4b50      	ldr	r3, [pc, #320]	; (8004f44 <UART_SetConfig+0x6f4>)
 8004e04:	fba3 2302 	umull	r2, r3, r3, r2
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	469b      	mov	fp, r3
 8004e12:	f04f 0c00 	mov.w	ip, #0
 8004e16:	46d9      	mov	r9, fp
 8004e18:	46e2      	mov	sl, ip
 8004e1a:	eb19 0309 	adds.w	r3, r9, r9
 8004e1e:	eb4a 040a 	adc.w	r4, sl, sl
 8004e22:	4699      	mov	r9, r3
 8004e24:	46a2      	mov	sl, r4
 8004e26:	eb19 090b 	adds.w	r9, r9, fp
 8004e2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e2e:	f04f 0100 	mov.w	r1, #0
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e42:	4689      	mov	r9, r1
 8004e44:	4692      	mov	sl, r2
 8004e46:	eb1b 0509 	adds.w	r5, fp, r9
 8004e4a:	eb4c 060a 	adc.w	r6, ip, sl
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	4619      	mov	r1, r3
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	f04f 0400 	mov.w	r4, #0
 8004e60:	0094      	lsls	r4, r2, #2
 8004e62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e66:	008b      	lsls	r3, r1, #2
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	4631      	mov	r1, r6
 8004e70:	f7fb fbea 	bl	8000648 <__aeabi_uldivmod>
 8004e74:	4603      	mov	r3, r0
 8004e76:	460c      	mov	r4, r1
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4b32      	ldr	r3, [pc, #200]	; (8004f44 <UART_SetConfig+0x6f4>)
 8004e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	2164      	movs	r1, #100	; 0x64
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	3332      	adds	r3, #50	; 0x32
 8004e8e:	4a2d      	ldr	r2, [pc, #180]	; (8004f44 <UART_SetConfig+0x6f4>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e9a:	4498      	add	r8, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	469b      	mov	fp, r3
 8004ea0:	f04f 0c00 	mov.w	ip, #0
 8004ea4:	46d9      	mov	r9, fp
 8004ea6:	46e2      	mov	sl, ip
 8004ea8:	eb19 0309 	adds.w	r3, r9, r9
 8004eac:	eb4a 040a 	adc.w	r4, sl, sl
 8004eb0:	4699      	mov	r9, r3
 8004eb2:	46a2      	mov	sl, r4
 8004eb4:	eb19 090b 	adds.w	r9, r9, fp
 8004eb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ebc:	f04f 0100 	mov.w	r1, #0
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ec8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ecc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ed0:	4689      	mov	r9, r1
 8004ed2:	4692      	mov	sl, r2
 8004ed4:	eb1b 0509 	adds.w	r5, fp, r9
 8004ed8:	eb4c 060a 	adc.w	r6, ip, sl
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	f04f 0400 	mov.w	r4, #0
 8004eee:	0094      	lsls	r4, r2, #2
 8004ef0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ef4:	008b      	lsls	r3, r1, #2
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	4623      	mov	r3, r4
 8004efa:	4628      	mov	r0, r5
 8004efc:	4631      	mov	r1, r6
 8004efe:	f7fb fba3 	bl	8000648 <__aeabi_uldivmod>
 8004f02:	4603      	mov	r3, r0
 8004f04:	460c      	mov	r4, r1
 8004f06:	461a      	mov	r2, r3
 8004f08:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <UART_SetConfig+0x6f4>)
 8004f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	2164      	movs	r1, #100	; 0x64
 8004f12:	fb01 f303 	mul.w	r3, r1, r3
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	3332      	adds	r3, #50	; 0x32
 8004f1c:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <UART_SetConfig+0x6f4>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	f003 020f 	and.w	r2, r3, #15
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4442      	add	r2, r8
 8004f2e:	609a      	str	r2, [r3, #8]
}
 8004f30:	e7ff      	b.n	8004f32 <UART_SetConfig+0x6e2>
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3c:	40011000 	.word	0x40011000
 8004f40:	40011400 	.word	0x40011400
 8004f44:	51eb851f 	.word	0x51eb851f

08004f48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4a07      	ldr	r2, [pc, #28]	; (8004f74 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	4a06      	ldr	r2, [pc, #24]	; (8004f78 <vApplicationGetIdleTaskMemory+0x30>)
 8004f5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2280      	movs	r2, #128	; 0x80
 8004f64:	601a      	str	r2, [r3, #0]
}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	200000bc 	.word	0x200000bc
 8004f78:	20000118 	.word	0x20000118

08004f7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4a07      	ldr	r2, [pc, #28]	; (8004fa8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4a06      	ldr	r2, [pc, #24]	; (8004fac <vApplicationGetTimerTaskMemory+0x30>)
 8004f92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f9a:	601a      	str	r2, [r3, #0]
}
 8004f9c:	bf00      	nop
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	20000318 	.word	0x20000318
 8004fac:	20000374 	.word	0x20000374

08004fb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f103 0208 	add.w	r2, r3, #8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f103 0208 	add.w	r2, r3, #8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f103 0208 	add.w	r2, r3, #8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800500a:	b480      	push	{r7}
 800500c:	b085      	sub	sp, #20
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	601a      	str	r2, [r3, #0]
}
 8005046:	bf00      	nop
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005068:	d103      	bne.n	8005072 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	e00c      	b.n	800508c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3308      	adds	r3, #8
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	e002      	b.n	8005080 <vListInsert+0x2e>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	429a      	cmp	r2, r3
 800508a:	d2f6      	bcs.n	800507a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	601a      	str	r2, [r3, #0]
}
 80050b8:	bf00      	nop
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6892      	ldr	r2, [r2, #8]
 80050da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6852      	ldr	r2, [r2, #4]
 80050e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d103      	bne.n	80050f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	1e5a      	subs	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	e7fe      	b.n	800513e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005140:	f002 fa6c 	bl	800761c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514c:	68f9      	ldr	r1, [r7, #12]
 800514e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	441a      	add	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005170:	3b01      	subs	r3, #1
 8005172:	68f9      	ldr	r1, [r7, #12]
 8005174:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005176:	fb01 f303 	mul.w	r3, r1, r3
 800517a:	441a      	add	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	22ff      	movs	r2, #255	; 0xff
 8005184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	22ff      	movs	r2, #255	; 0xff
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d114      	bne.n	80051c0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01a      	beq.n	80051d4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3310      	adds	r3, #16
 80051a2:	4618      	mov	r0, r3
 80051a4:	f001 fa3e 	bl	8006624 <xTaskRemoveFromEventList>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d012      	beq.n	80051d4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <xQueueGenericReset+0xcc>)
 80051b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	e009      	b.n	80051d4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3310      	adds	r3, #16
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff fef3 	bl	8004fb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3324      	adds	r3, #36	; 0x24
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff feee 	bl	8004fb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051d4:	f002 fa50 	bl	8007678 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051d8:	2301      	movs	r3, #1
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08e      	sub	sp, #56	; 0x38
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <xQueueGenericCreateStatic+0x28>
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	62bb      	str	r3, [r7, #40]	; 0x28
 800520e:	e7fe      	b.n	800520e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d109      	bne.n	800522a <xQueueGenericCreateStatic+0x42>
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
 8005228:	e7fe      	b.n	8005228 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <xQueueGenericCreateStatic+0x4e>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <xQueueGenericCreateStatic+0x52>
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <xQueueGenericCreateStatic+0x54>
 800523a:	2300      	movs	r3, #0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d109      	bne.n	8005254 <xQueueGenericCreateStatic+0x6c>
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	623b      	str	r3, [r7, #32]
 8005252:	e7fe      	b.n	8005252 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <xQueueGenericCreateStatic+0x78>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <xQueueGenericCreateStatic+0x7c>
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <xQueueGenericCreateStatic+0x7e>
 8005264:	2300      	movs	r3, #0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d109      	bne.n	800527e <xQueueGenericCreateStatic+0x96>
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	61fb      	str	r3, [r7, #28]
 800527c:	e7fe      	b.n	800527c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800527e:	2350      	movs	r3, #80	; 0x50
 8005280:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b50      	cmp	r3, #80	; 0x50
 8005286:	d009      	beq.n	800529c <xQueueGenericCreateStatic+0xb4>
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e7fe      	b.n	800529a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800529c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00d      	beq.n	80052c4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	4613      	mov	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f844 	bl	800534c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3730      	adds	r7, #48	; 0x30
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b08a      	sub	sp, #40	; 0x28
 80052d2:	af02      	add	r7, sp, #8
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	4613      	mov	r3, r2
 80052da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <xQueueGenericCreate+0x28>
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	e7fe      	b.n	80052f4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	e004      	b.n	800530c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	3350      	adds	r3, #80	; 0x50
 8005310:	4618      	mov	r0, r3
 8005312:	f002 fa9d 	bl	8007850 <pvPortMalloc>
 8005316:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d011      	beq.n	8005342 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	3350      	adds	r3, #80	; 0x50
 8005326:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005330:	79fa      	ldrb	r2, [r7, #7]
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	4613      	mov	r3, r2
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f805 	bl	800534c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005342:	69bb      	ldr	r3, [r7, #24]
	}
 8005344:	4618      	mov	r0, r3
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e002      	b.n	800536e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800537a:	2101      	movs	r1, #1
 800537c:	69b8      	ldr	r0, [r7, #24]
 800537e:	f7ff fecb 	bl	8005118 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	78fa      	ldrb	r2, [r7, #3]
 8005386:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08e      	sub	sp, #56	; 0x38
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053a2:	2300      	movs	r3, #0
 80053a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <xQueueGenericSend+0x30>
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c2:	e7fe      	b.n	80053c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d103      	bne.n	80053d2 <xQueueGenericSend+0x3e>
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <xQueueGenericSend+0x42>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <xQueueGenericSend+0x44>
 80053d6:	2300      	movs	r3, #0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d109      	bne.n	80053f0 <xQueueGenericSend+0x5c>
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
 80053ee:	e7fe      	b.n	80053ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d103      	bne.n	80053fe <xQueueGenericSend+0x6a>
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <xQueueGenericSend+0x6e>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <xQueueGenericSend+0x70>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d109      	bne.n	800541c <xQueueGenericSend+0x88>
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	623b      	str	r3, [r7, #32]
 800541a:	e7fe      	b.n	800541a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800541c:	f001 fab8 	bl	8006990 <xTaskGetSchedulerState>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d102      	bne.n	800542c <xQueueGenericSend+0x98>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <xQueueGenericSend+0x9c>
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <xQueueGenericSend+0x9e>
 8005430:	2300      	movs	r3, #0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d109      	bne.n	800544a <xQueueGenericSend+0xb6>
 8005436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e7fe      	b.n	8005448 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800544a:	f002 f8e7 	bl	800761c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005456:	429a      	cmp	r2, r3
 8005458:	d302      	bcc.n	8005460 <xQueueGenericSend+0xcc>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d129      	bne.n	80054b4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005466:	f000 fb1f 	bl	8005aa8 <prvCopyDataToQueue>
 800546a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	d010      	beq.n	8005496 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	3324      	adds	r3, #36	; 0x24
 8005478:	4618      	mov	r0, r3
 800547a:	f001 f8d3 	bl	8006624 <xTaskRemoveFromEventList>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d013      	beq.n	80054ac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005484:	4b3f      	ldr	r3, [pc, #252]	; (8005584 <xQueueGenericSend+0x1f0>)
 8005486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	e00a      	b.n	80054ac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800549c:	4b39      	ldr	r3, [pc, #228]	; (8005584 <xQueueGenericSend+0x1f0>)
 800549e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054ac:	f002 f8e4 	bl	8007678 <vPortExitCritical>
				return pdPASS;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e063      	b.n	800557c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d103      	bne.n	80054c2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054ba:	f002 f8dd 	bl	8007678 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	e05c      	b.n	800557c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d106      	bne.n	80054d6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054c8:	f107 0314 	add.w	r3, r7, #20
 80054cc:	4618      	mov	r0, r3
 80054ce:	f001 f90b 	bl	80066e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054d2:	2301      	movs	r3, #1
 80054d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054d6:	f002 f8cf 	bl	8007678 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054da:	f000 fe87 	bl	80061ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054de:	f002 f89d 	bl	800761c <vPortEnterCritical>
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054e8:	b25b      	sxtb	r3, r3
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ee:	d103      	bne.n	80054f8 <xQueueGenericSend+0x164>
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054fe:	b25b      	sxtb	r3, r3
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005504:	d103      	bne.n	800550e <xQueueGenericSend+0x17a>
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800550e:	f002 f8b3 	bl	8007678 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005512:	1d3a      	adds	r2, r7, #4
 8005514:	f107 0314 	add.w	r3, r7, #20
 8005518:	4611      	mov	r1, r2
 800551a:	4618      	mov	r0, r3
 800551c:	f001 f8fa 	bl	8006714 <xTaskCheckForTimeOut>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d124      	bne.n	8005570 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005528:	f000 fbb6 	bl	8005c98 <prvIsQueueFull>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d018      	beq.n	8005564 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	3310      	adds	r3, #16
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	4611      	mov	r1, r2
 800553a:	4618      	mov	r0, r3
 800553c:	f001 f824 	bl	8006588 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005542:	f000 fb41 	bl	8005bc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005546:	f000 fe5f 	bl	8006208 <xTaskResumeAll>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	f47f af7c 	bne.w	800544a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <xQueueGenericSend+0x1f0>)
 8005554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	e772      	b.n	800544a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005566:	f000 fb2f 	bl	8005bc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800556a:	f000 fe4d 	bl	8006208 <xTaskResumeAll>
 800556e:	e76c      	b.n	800544a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005572:	f000 fb29 	bl	8005bc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005576:	f000 fe47 	bl	8006208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800557a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800557c:	4618      	mov	r0, r3
 800557e:	3738      	adds	r7, #56	; 0x38
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	e000ed04 	.word	0xe000ed04

08005588 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08e      	sub	sp, #56	; 0x38
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <xQueueGenericSendFromISR+0x2c>
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
 80055b2:	e7fe      	b.n	80055b2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d103      	bne.n	80055c2 <xQueueGenericSendFromISR+0x3a>
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <xQueueGenericSendFromISR+0x3e>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <xQueueGenericSendFromISR+0x40>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d109      	bne.n	80055e0 <xQueueGenericSendFromISR+0x58>
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	623b      	str	r3, [r7, #32]
 80055de:	e7fe      	b.n	80055de <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d103      	bne.n	80055ee <xQueueGenericSendFromISR+0x66>
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <xQueueGenericSendFromISR+0x6a>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <xQueueGenericSendFromISR+0x6c>
 80055f2:	2300      	movs	r3, #0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <xQueueGenericSendFromISR+0x84>
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	e7fe      	b.n	800560a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800560c:	f002 f8e2 	bl	80077d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005610:	f3ef 8211 	mrs	r2, BASEPRI
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	61ba      	str	r2, [r7, #24]
 8005626:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005628:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005634:	429a      	cmp	r2, r3
 8005636:	d302      	bcc.n	800563e <xQueueGenericSendFromISR+0xb6>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d12c      	bne.n	8005698 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800564e:	f000 fa2b 	bl	8005aa8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005652:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800565a:	d112      	bne.n	8005682 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	2b00      	cmp	r3, #0
 8005662:	d016      	beq.n	8005692 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	3324      	adds	r3, #36	; 0x24
 8005668:	4618      	mov	r0, r3
 800566a:	f000 ffdb 	bl	8006624 <xTaskRemoveFromEventList>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00e      	beq.n	8005692 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00b      	beq.n	8005692 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	e007      	b.n	8005692 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005686:	3301      	adds	r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	b25a      	sxtb	r2, r3
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005692:	2301      	movs	r3, #1
 8005694:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005696:	e001      	b.n	800569c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005698:	2300      	movs	r3, #0
 800569a:	637b      	str	r3, [r7, #52]	; 0x34
 800569c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3738      	adds	r7, #56	; 0x38
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08c      	sub	sp, #48	; 0x30
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056bc:	2300      	movs	r3, #0
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <xQueueReceive+0x2e>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	623b      	str	r3, [r7, #32]
 80056dc:	e7fe      	b.n	80056dc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d103      	bne.n	80056ec <xQueueReceive+0x3c>
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <xQueueReceive+0x40>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <xQueueReceive+0x42>
 80056f0:	2300      	movs	r3, #0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <xQueueReceive+0x5a>
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	e7fe      	b.n	8005708 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800570a:	f001 f941 	bl	8006990 <xTaskGetSchedulerState>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <xQueueReceive+0x6a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <xQueueReceive+0x6e>
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <xQueueReceive+0x70>
 800571e:	2300      	movs	r3, #0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d109      	bne.n	8005738 <xQueueReceive+0x88>
 8005724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	e7fe      	b.n	8005736 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005738:	f001 ff70 	bl	800761c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01f      	beq.n	8005788 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800574c:	f000 fa16 	bl	8005b7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	1e5a      	subs	r2, r3, #1
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00f      	beq.n	8005780 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	3310      	adds	r3, #16
 8005764:	4618      	mov	r0, r3
 8005766:	f000 ff5d 	bl	8006624 <xTaskRemoveFromEventList>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005770:	4b3c      	ldr	r3, [pc, #240]	; (8005864 <xQueueReceive+0x1b4>)
 8005772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005780:	f001 ff7a 	bl	8007678 <vPortExitCritical>
				return pdPASS;
 8005784:	2301      	movs	r3, #1
 8005786:	e069      	b.n	800585c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800578e:	f001 ff73 	bl	8007678 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005792:	2300      	movs	r3, #0
 8005794:	e062      	b.n	800585c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d106      	bne.n	80057aa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800579c:	f107 0310 	add.w	r3, r7, #16
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 ffa1 	bl	80066e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057aa:	f001 ff65 	bl	8007678 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057ae:	f000 fd1d 	bl	80061ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057b2:	f001 ff33 	bl	800761c <vPortEnterCritical>
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057bc:	b25b      	sxtb	r3, r3
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057c2:	d103      	bne.n	80057cc <xQueueReceive+0x11c>
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057d2:	b25b      	sxtb	r3, r3
 80057d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d8:	d103      	bne.n	80057e2 <xQueueReceive+0x132>
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e2:	f001 ff49 	bl	8007678 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057e6:	1d3a      	adds	r2, r7, #4
 80057e8:	f107 0310 	add.w	r3, r7, #16
 80057ec:	4611      	mov	r1, r2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 ff90 	bl	8006714 <xTaskCheckForTimeOut>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d123      	bne.n	8005842 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057fc:	f000 fa36 	bl	8005c6c <prvIsQueueEmpty>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d017      	beq.n	8005836 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	3324      	adds	r3, #36	; 0x24
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f000 feba 	bl	8006588 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005816:	f000 f9d7 	bl	8005bc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800581a:	f000 fcf5 	bl	8006208 <xTaskResumeAll>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d189      	bne.n	8005738 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005824:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <xQueueReceive+0x1b4>)
 8005826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	e780      	b.n	8005738 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005838:	f000 f9c6 	bl	8005bc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800583c:	f000 fce4 	bl	8006208 <xTaskResumeAll>
 8005840:	e77a      	b.n	8005738 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005844:	f000 f9c0 	bl	8005bc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005848:	f000 fcde 	bl	8006208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800584c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800584e:	f000 fa0d 	bl	8005c6c <prvIsQueueEmpty>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	f43f af6f 	beq.w	8005738 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800585a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800585c:	4618      	mov	r0, r3
 800585e:	3730      	adds	r7, #48	; 0x30
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	e000ed04 	.word	0xe000ed04

08005868 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08e      	sub	sp, #56	; 0x38
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005872:	2300      	movs	r3, #0
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800587a:	2300      	movs	r3, #0
 800587c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	2b00      	cmp	r3, #0
 8005882:	d109      	bne.n	8005898 <xQueueSemaphoreTake+0x30>
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	623b      	str	r3, [r7, #32]
 8005896:	e7fe      	b.n	8005896 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d009      	beq.n	80058b4 <xQueueSemaphoreTake+0x4c>
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	e7fe      	b.n	80058b2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058b4:	f001 f86c 	bl	8006990 <xTaskGetSchedulerState>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d102      	bne.n	80058c4 <xQueueSemaphoreTake+0x5c>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <xQueueSemaphoreTake+0x60>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <xQueueSemaphoreTake+0x62>
 80058c8:	2300      	movs	r3, #0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <xQueueSemaphoreTake+0x7a>
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	e7fe      	b.n	80058e0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058e2:	f001 fe9b 	bl	800761c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d024      	beq.n	800593c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	1e5a      	subs	r2, r3, #1
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d104      	bne.n	800590c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005902:	f001 f9b7 	bl	8006c74 <pvTaskIncrementMutexHeldCount>
 8005906:	4602      	mov	r2, r0
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800590c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00f      	beq.n	8005934 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	3310      	adds	r3, #16
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fe83 	bl	8006624 <xTaskRemoveFromEventList>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005924:	4b53      	ldr	r3, [pc, #332]	; (8005a74 <xQueueSemaphoreTake+0x20c>)
 8005926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005934:	f001 fea0 	bl	8007678 <vPortExitCritical>
				return pdPASS;
 8005938:	2301      	movs	r3, #1
 800593a:	e096      	b.n	8005a6a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d110      	bne.n	8005964 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	2b00      	cmp	r3, #0
 8005946:	d009      	beq.n	800595c <xQueueSemaphoreTake+0xf4>
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	e7fe      	b.n	800595a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800595c:	f001 fe8c 	bl	8007678 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005960:	2300      	movs	r3, #0
 8005962:	e082      	b.n	8005a6a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800596a:	f107 030c 	add.w	r3, r7, #12
 800596e:	4618      	mov	r0, r3
 8005970:	f000 feba 	bl	80066e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005974:	2301      	movs	r3, #1
 8005976:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005978:	f001 fe7e 	bl	8007678 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800597c:	f000 fc36 	bl	80061ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005980:	f001 fe4c 	bl	800761c <vPortEnterCritical>
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800598a:	b25b      	sxtb	r3, r3
 800598c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005990:	d103      	bne.n	800599a <xQueueSemaphoreTake+0x132>
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800599a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059a0:	b25b      	sxtb	r3, r3
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059a6:	d103      	bne.n	80059b0 <xQueueSemaphoreTake+0x148>
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059b0:	f001 fe62 	bl	8007678 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059b4:	463a      	mov	r2, r7
 80059b6:	f107 030c 	add.w	r3, r7, #12
 80059ba:	4611      	mov	r1, r2
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fea9 	bl	8006714 <xTaskCheckForTimeOut>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d132      	bne.n	8005a2e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059ca:	f000 f94f 	bl	8005c6c <prvIsQueueEmpty>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d026      	beq.n	8005a22 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80059dc:	f001 fe1e 	bl	800761c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fff1 	bl	80069cc <xTaskPriorityInherit>
 80059ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80059ec:	f001 fe44 	bl	8007678 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	3324      	adds	r3, #36	; 0x24
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	4611      	mov	r1, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fdc5 	bl	8006588 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a00:	f000 f8e2 	bl	8005bc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a04:	f000 fc00 	bl	8006208 <xTaskResumeAll>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f47f af69 	bne.w	80058e2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005a10:	4b18      	ldr	r3, [pc, #96]	; (8005a74 <xQueueSemaphoreTake+0x20c>)
 8005a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	e75f      	b.n	80058e2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a24:	f000 f8d0 	bl	8005bc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a28:	f000 fbee 	bl	8006208 <xTaskResumeAll>
 8005a2c:	e759      	b.n	80058e2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005a2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a30:	f000 f8ca 	bl	8005bc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a34:	f000 fbe8 	bl	8006208 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a3a:	f000 f917 	bl	8005c6c <prvIsQueueEmpty>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f43f af4e 	beq.w	80058e2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00d      	beq.n	8005a68 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005a4c:	f001 fde6 	bl	800761c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005a50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a52:	f000 f811 	bl	8005a78 <prvGetDisinheritPriorityAfterTimeout>
 8005a56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 f888 	bl	8006b74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a64:	f001 fe08 	bl	8007678 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3738      	adds	r7, #56	; 0x38
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d006      	beq.n	8005a96 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e001      	b.n	8005a9a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
	}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10d      	bne.n	8005ae2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d14d      	bne.n	8005b6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 ffe2 	bl	8006a9c <xTaskPriorityDisinherit>
 8005ad8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	609a      	str	r2, [r3, #8]
 8005ae0:	e043      	b.n	8005b6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d119      	bne.n	8005b1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6858      	ldr	r0, [r3, #4]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	461a      	mov	r2, r3
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	f003 fe84 	bl	8009800 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	441a      	add	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d32b      	bcc.n	8005b6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	e026      	b.n	8005b6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68d8      	ldr	r0, [r3, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	461a      	mov	r2, r3
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	f003 fe6a 	bl	8009800 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	425b      	negs	r3, r3
 8005b36:	441a      	add	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d207      	bcs.n	8005b58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	425b      	negs	r3, r3
 8005b52:	441a      	add	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d105      	bne.n	8005b6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b72:	697b      	ldr	r3, [r7, #20]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d018      	beq.n	8005bc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	441a      	add	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d303      	bcc.n	8005bb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68d9      	ldr	r1, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6838      	ldr	r0, [r7, #0]
 8005bbc:	f003 fe20 	bl	8009800 <memcpy>
	}
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bd0:	f001 fd24 	bl	800761c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bdc:	e011      	b.n	8005c02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d012      	beq.n	8005c0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3324      	adds	r3, #36	; 0x24
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fd1a 	bl	8006624 <xTaskRemoveFromEventList>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005bf6:	f000 fded 	bl	80067d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	dce9      	bgt.n	8005bde <prvUnlockQueue+0x16>
 8005c0a:	e000      	b.n	8005c0e <prvUnlockQueue+0x46>
					break;
 8005c0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	22ff      	movs	r2, #255	; 0xff
 8005c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c16:	f001 fd2f 	bl	8007678 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c1a:	f001 fcff 	bl	800761c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c26:	e011      	b.n	8005c4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d012      	beq.n	8005c56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3310      	adds	r3, #16
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fcf5 	bl	8006624 <xTaskRemoveFromEventList>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c40:	f000 fdc8 	bl	80067d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c44:	7bbb      	ldrb	r3, [r7, #14]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	dce9      	bgt.n	8005c28 <prvUnlockQueue+0x60>
 8005c54:	e000      	b.n	8005c58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	22ff      	movs	r2, #255	; 0xff
 8005c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c60:	f001 fd0a 	bl	8007678 <vPortExitCritical>
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c74:	f001 fcd2 	bl	800761c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d102      	bne.n	8005c86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c80:	2301      	movs	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e001      	b.n	8005c8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c8a:	f001 fcf5 	bl	8007678 <vPortExitCritical>

	return xReturn;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ca0:	f001 fcbc 	bl	800761c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d102      	bne.n	8005cb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e001      	b.n	8005cba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cba:	f001 fcdd 	bl	8007678 <vPortExitCritical>

	return xReturn;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	e014      	b.n	8005d02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cd8:	4a0e      	ldr	r2, [pc, #56]	; (8005d14 <vQueueAddToRegistry+0x4c>)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10b      	bne.n	8005cfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ce4:	490b      	ldr	r1, [pc, #44]	; (8005d14 <vQueueAddToRegistry+0x4c>)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005cee:	4a09      	ldr	r2, [pc, #36]	; (8005d14 <vQueueAddToRegistry+0x4c>)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005cfa:	e005      	b.n	8005d08 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b07      	cmp	r3, #7
 8005d06:	d9e7      	bls.n	8005cd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d08:	bf00      	nop
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	20004cb4 	.word	0x20004cb4

08005d18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d28:	f001 fc78 	bl	800761c <vPortEnterCritical>
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d32:	b25b      	sxtb	r3, r3
 8005d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d38:	d103      	bne.n	8005d42 <vQueueWaitForMessageRestricted+0x2a>
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d48:	b25b      	sxtb	r3, r3
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d4e:	d103      	bne.n	8005d58 <vQueueWaitForMessageRestricted+0x40>
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d58:	f001 fc8e 	bl	8007678 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	3324      	adds	r3, #36	; 0x24
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fc2f 	bl	80065d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d72:	6978      	ldr	r0, [r7, #20]
 8005d74:	f7ff ff28 	bl	8005bc8 <prvUnlockQueue>
	}
 8005d78:	bf00      	nop
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08e      	sub	sp, #56	; 0x38
 8005d84:	af04      	add	r7, sp, #16
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d109      	bne.n	8005da8 <xTaskCreateStatic+0x28>
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	623b      	str	r3, [r7, #32]
 8005da6:	e7fe      	b.n	8005da6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d109      	bne.n	8005dc2 <xTaskCreateStatic+0x42>
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	e7fe      	b.n	8005dc0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dc2:	235c      	movs	r3, #92	; 0x5c
 8005dc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b5c      	cmp	r3, #92	; 0x5c
 8005dca:	d009      	beq.n	8005de0 <xTaskCreateStatic+0x60>
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	e7fe      	b.n	8005dde <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005de0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01e      	beq.n	8005e26 <xTaskCreateStatic+0xa6>
 8005de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d01b      	beq.n	8005e26 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e00:	2300      	movs	r3, #0
 8005e02:	9303      	str	r3, [sp, #12]
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	9302      	str	r3, [sp, #8]
 8005e08:	f107 0314 	add.w	r3, r7, #20
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f850 	bl	8005ebe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e20:	f000 f8dc 	bl	8005fdc <prvAddNewTaskToReadyList>
 8005e24:	e001      	b.n	8005e2a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e2a:	697b      	ldr	r3, [r7, #20]
	}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3728      	adds	r7, #40	; 0x28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08c      	sub	sp, #48	; 0x30
 8005e38:	af04      	add	r7, sp, #16
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	4613      	mov	r3, r2
 8005e42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e44:	88fb      	ldrh	r3, [r7, #6]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fd01 	bl	8007850 <pvPortMalloc>
 8005e4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00e      	beq.n	8005e74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e56:	205c      	movs	r0, #92	; 0x5c
 8005e58:	f001 fcfa 	bl	8007850 <pvPortMalloc>
 8005e5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
 8005e6a:	e005      	b.n	8005e78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e6c:	6978      	ldr	r0, [r7, #20]
 8005e6e:	f001 fdb1 	bl	80079d4 <vPortFree>
 8005e72:	e001      	b.n	8005e78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d017      	beq.n	8005eae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e86:	88fa      	ldrh	r2, [r7, #6]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	9303      	str	r3, [sp, #12]
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	9302      	str	r3, [sp, #8]
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f80e 	bl	8005ebe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ea2:	69f8      	ldr	r0, [r7, #28]
 8005ea4:	f000 f89a 	bl	8005fdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	e002      	b.n	8005eb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005eb4:	69bb      	ldr	r3, [r7, #24]
	}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b088      	sub	sp, #32
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ece:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	21a5      	movs	r1, #165	; 0xa5
 8005ed8:	f003 fc9d 	bl	8009816 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f023 0307 	bic.w	r3, r3, #7
 8005ef4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d009      	beq.n	8005f14 <prvInitialiseNewTask+0x56>
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	e7fe      	b.n	8005f12 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d01f      	beq.n	8005f5a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61fb      	str	r3, [r7, #28]
 8005f1e:	e012      	b.n	8005f46 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	4413      	add	r3, r2
 8005f26:	7819      	ldrb	r1, [r3, #0]
 8005f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3334      	adds	r3, #52	; 0x34
 8005f30:	460a      	mov	r2, r1
 8005f32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d006      	beq.n	8005f4e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	3301      	adds	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	2b0f      	cmp	r3, #15
 8005f4a:	d9e9      	bls.n	8005f20 <prvInitialiseNewTask+0x62>
 8005f4c:	e000      	b.n	8005f50 <prvInitialiseNewTask+0x92>
			{
				break;
 8005f4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f58:	e003      	b.n	8005f62 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	2b37      	cmp	r3, #55	; 0x37
 8005f66:	d901      	bls.n	8005f6c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f68:	2337      	movs	r3, #55	; 0x37
 8005f6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	3304      	adds	r3, #4
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff f834 	bl	8004ff0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	3318      	adds	r3, #24
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff f82f 	bl	8004ff0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	2200      	movs	r2, #0
 8005fac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	68f9      	ldr	r1, [r7, #12]
 8005fba:	69b8      	ldr	r0, [r7, #24]
 8005fbc:	f001 fa08 	bl	80073d0 <pxPortInitialiseStack>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fd2:	bf00      	nop
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fe4:	f001 fb1a 	bl	800761c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fe8:	4b2d      	ldr	r3, [pc, #180]	; (80060a0 <prvAddNewTaskToReadyList+0xc4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3301      	adds	r3, #1
 8005fee:	4a2c      	ldr	r2, [pc, #176]	; (80060a0 <prvAddNewTaskToReadyList+0xc4>)
 8005ff0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ff2:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d109      	bne.n	800600e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006000:	4b27      	ldr	r3, [pc, #156]	; (80060a0 <prvAddNewTaskToReadyList+0xc4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d110      	bne.n	800602a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006008:	f000 fc08 	bl	800681c <prvInitialiseTaskLists>
 800600c:	e00d      	b.n	800602a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800600e:	4b26      	ldr	r3, [pc, #152]	; (80060a8 <prvAddNewTaskToReadyList+0xcc>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006016:	4b23      	ldr	r3, [pc, #140]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	429a      	cmp	r2, r3
 8006022:	d802      	bhi.n	800602a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006024:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800602a:	4b20      	ldr	r3, [pc, #128]	; (80060ac <prvAddNewTaskToReadyList+0xd0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3301      	adds	r3, #1
 8006030:	4a1e      	ldr	r2, [pc, #120]	; (80060ac <prvAddNewTaskToReadyList+0xd0>)
 8006032:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006034:	4b1d      	ldr	r3, [pc, #116]	; (80060ac <prvAddNewTaskToReadyList+0xd0>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <prvAddNewTaskToReadyList+0xd4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d903      	bls.n	8006050 <prvAddNewTaskToReadyList+0x74>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	4a18      	ldr	r2, [pc, #96]	; (80060b0 <prvAddNewTaskToReadyList+0xd4>)
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4a15      	ldr	r2, [pc, #84]	; (80060b4 <prvAddNewTaskToReadyList+0xd8>)
 800605e:	441a      	add	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f7fe ffcf 	bl	800500a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800606c:	f001 fb04 	bl	8007678 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006070:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <prvAddNewTaskToReadyList+0xcc>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00e      	beq.n	8006096 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006078:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	429a      	cmp	r2, r3
 8006084:	d207      	bcs.n	8006096 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvAddNewTaskToReadyList+0xdc>)
 8006088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000c48 	.word	0x20000c48
 80060a4:	20000774 	.word	0x20000774
 80060a8:	20000c54 	.word	0x20000c54
 80060ac:	20000c64 	.word	0x20000c64
 80060b0:	20000c50 	.word	0x20000c50
 80060b4:	20000778 	.word	0x20000778
 80060b8:	e000ed04 	.word	0xe000ed04

080060bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d016      	beq.n	80060fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <vTaskDelay+0x60>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <vTaskDelay+0x2e>
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	60bb      	str	r3, [r7, #8]
 80060e8:	e7fe      	b.n	80060e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80060ea:	f000 f87f 	bl	80061ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060ee:	2100      	movs	r1, #0
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fdd3 	bl	8006c9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060f6:	f000 f887 	bl	8006208 <xTaskResumeAll>
 80060fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d107      	bne.n	8006112 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006102:	4b07      	ldr	r3, [pc, #28]	; (8006120 <vTaskDelay+0x64>)
 8006104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006112:	bf00      	nop
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000c70 	.word	0x20000c70
 8006120:	e000ed04 	.word	0xe000ed04

08006124 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08a      	sub	sp, #40	; 0x28
 8006128:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006132:	463a      	mov	r2, r7
 8006134:	1d39      	adds	r1, r7, #4
 8006136:	f107 0308 	add.w	r3, r7, #8
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe ff04 	bl	8004f48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	9202      	str	r2, [sp, #8]
 8006148:	9301      	str	r3, [sp, #4]
 800614a:	2300      	movs	r3, #0
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	2300      	movs	r3, #0
 8006150:	460a      	mov	r2, r1
 8006152:	4920      	ldr	r1, [pc, #128]	; (80061d4 <vTaskStartScheduler+0xb0>)
 8006154:	4820      	ldr	r0, [pc, #128]	; (80061d8 <vTaskStartScheduler+0xb4>)
 8006156:	f7ff fe13 	bl	8005d80 <xTaskCreateStatic>
 800615a:	4602      	mov	r2, r0
 800615c:	4b1f      	ldr	r3, [pc, #124]	; (80061dc <vTaskStartScheduler+0xb8>)
 800615e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006160:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <vTaskStartScheduler+0xb8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006168:	2301      	movs	r3, #1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e001      	b.n	8006172 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d102      	bne.n	800617e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006178:	f000 fde4 	bl	8006d44 <xTimerCreateTimerTask>
 800617c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d115      	bne.n	80061b0 <vTaskStartScheduler+0x8c>
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006196:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <vTaskStartScheduler+0xbc>)
 8006198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800619c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800619e:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <vTaskStartScheduler+0xc0>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061a4:	4b10      	ldr	r3, [pc, #64]	; (80061e8 <vTaskStartScheduler+0xc4>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061aa:	f001 f999 	bl	80074e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061ae:	e00d      	b.n	80061cc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061b6:	d109      	bne.n	80061cc <vTaskStartScheduler+0xa8>
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	e7fe      	b.n	80061ca <vTaskStartScheduler+0xa6>
}
 80061cc:	bf00      	nop
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	0800a038 	.word	0x0800a038
 80061d8:	080067ed 	.word	0x080067ed
 80061dc:	20000c6c 	.word	0x20000c6c
 80061e0:	20000c68 	.word	0x20000c68
 80061e4:	20000c54 	.word	0x20000c54
 80061e8:	20000c4c 	.word	0x20000c4c

080061ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061f0:	4b04      	ldr	r3, [pc, #16]	; (8006204 <vTaskSuspendAll+0x18>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3301      	adds	r3, #1
 80061f6:	4a03      	ldr	r2, [pc, #12]	; (8006204 <vTaskSuspendAll+0x18>)
 80061f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80061fa:	bf00      	nop
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	20000c70 	.word	0x20000c70

08006208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006212:	2300      	movs	r3, #0
 8006214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006216:	4b41      	ldr	r3, [pc, #260]	; (800631c <xTaskResumeAll+0x114>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <xTaskResumeAll+0x2a>
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	e7fe      	b.n	8006230 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006232:	f001 f9f3 	bl	800761c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006236:	4b39      	ldr	r3, [pc, #228]	; (800631c <xTaskResumeAll+0x114>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3b01      	subs	r3, #1
 800623c:	4a37      	ldr	r2, [pc, #220]	; (800631c <xTaskResumeAll+0x114>)
 800623e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006240:	4b36      	ldr	r3, [pc, #216]	; (800631c <xTaskResumeAll+0x114>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d162      	bne.n	800630e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006248:	4b35      	ldr	r3, [pc, #212]	; (8006320 <xTaskResumeAll+0x118>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d05e      	beq.n	800630e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006250:	e02f      	b.n	80062b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006252:	4b34      	ldr	r3, [pc, #208]	; (8006324 <xTaskResumeAll+0x11c>)
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3318      	adds	r3, #24
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe ff30 	bl	80050c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3304      	adds	r3, #4
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe ff2b 	bl	80050c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006272:	4b2d      	ldr	r3, [pc, #180]	; (8006328 <xTaskResumeAll+0x120>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d903      	bls.n	8006282 <xTaskResumeAll+0x7a>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627e:	4a2a      	ldr	r2, [pc, #168]	; (8006328 <xTaskResumeAll+0x120>)
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4a27      	ldr	r2, [pc, #156]	; (800632c <xTaskResumeAll+0x124>)
 8006290:	441a      	add	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3304      	adds	r3, #4
 8006296:	4619      	mov	r1, r3
 8006298:	4610      	mov	r0, r2
 800629a:	f7fe feb6 	bl	800500a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a2:	4b23      	ldr	r3, [pc, #140]	; (8006330 <xTaskResumeAll+0x128>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d302      	bcc.n	80062b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80062ac:	4b21      	ldr	r3, [pc, #132]	; (8006334 <xTaskResumeAll+0x12c>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062b2:	4b1c      	ldr	r3, [pc, #112]	; (8006324 <xTaskResumeAll+0x11c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1cb      	bne.n	8006252 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062c0:	f000 fb46 	bl	8006950 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062c4:	4b1c      	ldr	r3, [pc, #112]	; (8006338 <xTaskResumeAll+0x130>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d010      	beq.n	80062f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062d0:	f000 f846 	bl	8006360 <xTaskIncrementTick>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80062da:	4b16      	ldr	r3, [pc, #88]	; (8006334 <xTaskResumeAll+0x12c>)
 80062dc:	2201      	movs	r2, #1
 80062de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f1      	bne.n	80062d0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80062ec:	4b12      	ldr	r3, [pc, #72]	; (8006338 <xTaskResumeAll+0x130>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062f2:	4b10      	ldr	r3, [pc, #64]	; (8006334 <xTaskResumeAll+0x12c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062fa:	2301      	movs	r3, #1
 80062fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062fe:	4b0f      	ldr	r3, [pc, #60]	; (800633c <xTaskResumeAll+0x134>)
 8006300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800630e:	f001 f9b3 	bl	8007678 <vPortExitCritical>

	return xAlreadyYielded;
 8006312:	68bb      	ldr	r3, [r7, #8]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20000c70 	.word	0x20000c70
 8006320:	20000c48 	.word	0x20000c48
 8006324:	20000c08 	.word	0x20000c08
 8006328:	20000c50 	.word	0x20000c50
 800632c:	20000778 	.word	0x20000778
 8006330:	20000774 	.word	0x20000774
 8006334:	20000c5c 	.word	0x20000c5c
 8006338:	20000c58 	.word	0x20000c58
 800633c:	e000ed04 	.word	0xe000ed04

08006340 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006346:	4b05      	ldr	r3, [pc, #20]	; (800635c <xTaskGetTickCount+0x1c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800634c:	687b      	ldr	r3, [r7, #4]
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000c4c 	.word	0x20000c4c

08006360 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800636a:	4b4e      	ldr	r3, [pc, #312]	; (80064a4 <xTaskIncrementTick+0x144>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 8088 	bne.w	8006484 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006374:	4b4c      	ldr	r3, [pc, #304]	; (80064a8 <xTaskIncrementTick+0x148>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3301      	adds	r3, #1
 800637a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800637c:	4a4a      	ldr	r2, [pc, #296]	; (80064a8 <xTaskIncrementTick+0x148>)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d11f      	bne.n	80063c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006388:	4b48      	ldr	r3, [pc, #288]	; (80064ac <xTaskIncrementTick+0x14c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <xTaskIncrementTick+0x46>
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	603b      	str	r3, [r7, #0]
 80063a4:	e7fe      	b.n	80063a4 <xTaskIncrementTick+0x44>
 80063a6:	4b41      	ldr	r3, [pc, #260]	; (80064ac <xTaskIncrementTick+0x14c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	4b40      	ldr	r3, [pc, #256]	; (80064b0 <xTaskIncrementTick+0x150>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a3e      	ldr	r2, [pc, #248]	; (80064ac <xTaskIncrementTick+0x14c>)
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	4a3e      	ldr	r2, [pc, #248]	; (80064b0 <xTaskIncrementTick+0x150>)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	4b3e      	ldr	r3, [pc, #248]	; (80064b4 <xTaskIncrementTick+0x154>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3301      	adds	r3, #1
 80063c0:	4a3c      	ldr	r2, [pc, #240]	; (80064b4 <xTaskIncrementTick+0x154>)
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	f000 fac4 	bl	8006950 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063c8:	4b3b      	ldr	r3, [pc, #236]	; (80064b8 <xTaskIncrementTick+0x158>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d349      	bcc.n	8006466 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063d2:	4b36      	ldr	r3, [pc, #216]	; (80064ac <xTaskIncrementTick+0x14c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063dc:	4b36      	ldr	r3, [pc, #216]	; (80064b8 <xTaskIncrementTick+0x158>)
 80063de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063e2:	601a      	str	r2, [r3, #0]
					break;
 80063e4:	e03f      	b.n	8006466 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063e6:	4b31      	ldr	r3, [pc, #196]	; (80064ac <xTaskIncrementTick+0x14c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d203      	bcs.n	8006406 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063fe:	4a2e      	ldr	r2, [pc, #184]	; (80064b8 <xTaskIncrementTick+0x158>)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006404:	e02f      	b.n	8006466 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	3304      	adds	r3, #4
 800640a:	4618      	mov	r0, r3
 800640c:	f7fe fe5a 	bl	80050c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	2b00      	cmp	r3, #0
 8006416:	d004      	beq.n	8006422 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	3318      	adds	r3, #24
 800641c:	4618      	mov	r0, r3
 800641e:	f7fe fe51 	bl	80050c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006426:	4b25      	ldr	r3, [pc, #148]	; (80064bc <xTaskIncrementTick+0x15c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d903      	bls.n	8006436 <xTaskIncrementTick+0xd6>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	4a22      	ldr	r2, [pc, #136]	; (80064bc <xTaskIncrementTick+0x15c>)
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4a1f      	ldr	r2, [pc, #124]	; (80064c0 <xTaskIncrementTick+0x160>)
 8006444:	441a      	add	r2, r3
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	3304      	adds	r3, #4
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f7fe fddc 	bl	800500a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006456:	4b1b      	ldr	r3, [pc, #108]	; (80064c4 <xTaskIncrementTick+0x164>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	429a      	cmp	r2, r3
 800645e:	d3b8      	bcc.n	80063d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006460:	2301      	movs	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006464:	e7b5      	b.n	80063d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006466:	4b17      	ldr	r3, [pc, #92]	; (80064c4 <xTaskIncrementTick+0x164>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646c:	4914      	ldr	r1, [pc, #80]	; (80064c0 <xTaskIncrementTick+0x160>)
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	440b      	add	r3, r1
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d907      	bls.n	800648e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800647e:	2301      	movs	r3, #1
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	e004      	b.n	800648e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006484:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <xTaskIncrementTick+0x168>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3301      	adds	r3, #1
 800648a:	4a0f      	ldr	r2, [pc, #60]	; (80064c8 <xTaskIncrementTick+0x168>)
 800648c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800648e:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <xTaskIncrementTick+0x16c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006496:	2301      	movs	r3, #1
 8006498:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800649a:	697b      	ldr	r3, [r7, #20]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20000c70 	.word	0x20000c70
 80064a8:	20000c4c 	.word	0x20000c4c
 80064ac:	20000c00 	.word	0x20000c00
 80064b0:	20000c04 	.word	0x20000c04
 80064b4:	20000c60 	.word	0x20000c60
 80064b8:	20000c68 	.word	0x20000c68
 80064bc:	20000c50 	.word	0x20000c50
 80064c0:	20000778 	.word	0x20000778
 80064c4:	20000774 	.word	0x20000774
 80064c8:	20000c58 	.word	0x20000c58
 80064cc:	20000c5c 	.word	0x20000c5c

080064d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064d6:	4b27      	ldr	r3, [pc, #156]	; (8006574 <vTaskSwitchContext+0xa4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064de:	4b26      	ldr	r3, [pc, #152]	; (8006578 <vTaskSwitchContext+0xa8>)
 80064e0:	2201      	movs	r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064e4:	e040      	b.n	8006568 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80064e6:	4b24      	ldr	r3, [pc, #144]	; (8006578 <vTaskSwitchContext+0xa8>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ec:	4b23      	ldr	r3, [pc, #140]	; (800657c <vTaskSwitchContext+0xac>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	e00f      	b.n	8006514 <vTaskSwitchContext+0x44>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d109      	bne.n	800650e <vTaskSwitchContext+0x3e>
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	607b      	str	r3, [r7, #4]
 800650c:	e7fe      	b.n	800650c <vTaskSwitchContext+0x3c>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3b01      	subs	r3, #1
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	491a      	ldr	r1, [pc, #104]	; (8006580 <vTaskSwitchContext+0xb0>)
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0e5      	beq.n	80064f4 <vTaskSwitchContext+0x24>
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4a13      	ldr	r2, [pc, #76]	; (8006580 <vTaskSwitchContext+0xb0>)
 8006534:	4413      	add	r3, r2
 8006536:	60bb      	str	r3, [r7, #8]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	3308      	adds	r3, #8
 800654a:	429a      	cmp	r2, r3
 800654c:	d104      	bne.n	8006558 <vTaskSwitchContext+0x88>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	605a      	str	r2, [r3, #4]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	4a09      	ldr	r2, [pc, #36]	; (8006584 <vTaskSwitchContext+0xb4>)
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	4a06      	ldr	r2, [pc, #24]	; (800657c <vTaskSwitchContext+0xac>)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6013      	str	r3, [r2, #0]
}
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	20000c70 	.word	0x20000c70
 8006578:	20000c5c 	.word	0x20000c5c
 800657c:	20000c50 	.word	0x20000c50
 8006580:	20000778 	.word	0x20000778
 8006584:	20000774 	.word	0x20000774

08006588 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d109      	bne.n	80065ac <vTaskPlaceOnEventList+0x24>
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	e7fe      	b.n	80065aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065ac:	4b07      	ldr	r3, [pc, #28]	; (80065cc <vTaskPlaceOnEventList+0x44>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3318      	adds	r3, #24
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7fe fd4c 	bl	8005052 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065ba:	2101      	movs	r1, #1
 80065bc:	6838      	ldr	r0, [r7, #0]
 80065be:	f000 fb6d 	bl	8006c9c <prvAddCurrentTaskToDelayedList>
}
 80065c2:	bf00      	nop
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000774 	.word	0x20000774

080065d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d109      	bne.n	80065f6 <vTaskPlaceOnEventListRestricted+0x26>
 80065e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e7fe      	b.n	80065f4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065f6:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <vTaskPlaceOnEventListRestricted+0x50>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3318      	adds	r3, #24
 80065fc:	4619      	mov	r1, r3
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f7fe fd03 	bl	800500a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800660a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800660e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	68b8      	ldr	r0, [r7, #8]
 8006614:	f000 fb42 	bl	8006c9c <prvAddCurrentTaskToDelayedList>
	}
 8006618:	bf00      	nop
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	20000774 	.word	0x20000774

08006624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <xTaskRemoveFromEventList+0x2a>
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	e7fe      	b.n	800664c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	3318      	adds	r3, #24
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe fd36 	bl	80050c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006658:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <xTaskRemoveFromEventList+0xac>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d11d      	bne.n	800669c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	3304      	adds	r3, #4
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe fd2d 	bl	80050c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666e:	4b19      	ldr	r3, [pc, #100]	; (80066d4 <xTaskRemoveFromEventList+0xb0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d903      	bls.n	800667e <xTaskRemoveFromEventList+0x5a>
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	4a16      	ldr	r2, [pc, #88]	; (80066d4 <xTaskRemoveFromEventList+0xb0>)
 800667c:	6013      	str	r3, [r2, #0]
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006682:	4613      	mov	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4a13      	ldr	r2, [pc, #76]	; (80066d8 <xTaskRemoveFromEventList+0xb4>)
 800668c:	441a      	add	r2, r3
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	3304      	adds	r3, #4
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f7fe fcb8 	bl	800500a <vListInsertEnd>
 800669a:	e005      	b.n	80066a8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	3318      	adds	r3, #24
 80066a0:	4619      	mov	r1, r3
 80066a2:	480e      	ldr	r0, [pc, #56]	; (80066dc <xTaskRemoveFromEventList+0xb8>)
 80066a4:	f7fe fcb1 	bl	800500a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ac:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <xTaskRemoveFromEventList+0xbc>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d905      	bls.n	80066c2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066b6:	2301      	movs	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066ba:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <xTaskRemoveFromEventList+0xc0>)
 80066bc:	2201      	movs	r2, #1
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	e001      	b.n	80066c6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066c6:	697b      	ldr	r3, [r7, #20]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	20000c70 	.word	0x20000c70
 80066d4:	20000c50 	.word	0x20000c50
 80066d8:	20000778 	.word	0x20000778
 80066dc:	20000c08 	.word	0x20000c08
 80066e0:	20000774 	.word	0x20000774
 80066e4:	20000c5c 	.word	0x20000c5c

080066e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <vTaskInternalSetTimeOutState+0x24>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <vTaskInternalSetTimeOutState+0x28>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	605a      	str	r2, [r3, #4]
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000c60 	.word	0x20000c60
 8006710:	20000c4c 	.word	0x20000c4c

08006714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d109      	bne.n	8006738 <xTaskCheckForTimeOut+0x24>
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	613b      	str	r3, [r7, #16]
 8006736:	e7fe      	b.n	8006736 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d109      	bne.n	8006752 <xTaskCheckForTimeOut+0x3e>
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	e7fe      	b.n	8006750 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006752:	f000 ff63 	bl	800761c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006756:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <xTaskCheckForTimeOut+0xb8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800676e:	d102      	bne.n	8006776 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006770:	2300      	movs	r3, #0
 8006772:	61fb      	str	r3, [r7, #28]
 8006774:	e023      	b.n	80067be <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <xTaskCheckForTimeOut+0xbc>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d007      	beq.n	8006792 <xTaskCheckForTimeOut+0x7e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	429a      	cmp	r2, r3
 800678a:	d302      	bcc.n	8006792 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800678c:	2301      	movs	r3, #1
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	e015      	b.n	80067be <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	429a      	cmp	r2, r3
 800679a:	d20b      	bcs.n	80067b4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	1ad2      	subs	r2, r2, r3
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff ff9d 	bl	80066e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067ae:	2300      	movs	r3, #0
 80067b0:	61fb      	str	r3, [r7, #28]
 80067b2:	e004      	b.n	80067be <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067ba:	2301      	movs	r3, #1
 80067bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067be:	f000 ff5b 	bl	8007678 <vPortExitCritical>

	return xReturn;
 80067c2:	69fb      	ldr	r3, [r7, #28]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3720      	adds	r7, #32
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000c4c 	.word	0x20000c4c
 80067d0:	20000c60 	.word	0x20000c60

080067d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067d8:	4b03      	ldr	r3, [pc, #12]	; (80067e8 <vTaskMissedYield+0x14>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
}
 80067de:	bf00      	nop
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	20000c5c 	.word	0x20000c5c

080067ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067f4:	f000 f852 	bl	800689c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067f8:	4b06      	ldr	r3, [pc, #24]	; (8006814 <prvIdleTask+0x28>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d9f9      	bls.n	80067f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006800:	4b05      	ldr	r3, [pc, #20]	; (8006818 <prvIdleTask+0x2c>)
 8006802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006810:	e7f0      	b.n	80067f4 <prvIdleTask+0x8>
 8006812:	bf00      	nop
 8006814:	20000778 	.word	0x20000778
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006822:	2300      	movs	r3, #0
 8006824:	607b      	str	r3, [r7, #4]
 8006826:	e00c      	b.n	8006842 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4a12      	ldr	r2, [pc, #72]	; (800687c <prvInitialiseTaskLists+0x60>)
 8006834:	4413      	add	r3, r2
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe fbba 	bl	8004fb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3301      	adds	r3, #1
 8006840:	607b      	str	r3, [r7, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b37      	cmp	r3, #55	; 0x37
 8006846:	d9ef      	bls.n	8006828 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006848:	480d      	ldr	r0, [pc, #52]	; (8006880 <prvInitialiseTaskLists+0x64>)
 800684a:	f7fe fbb1 	bl	8004fb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800684e:	480d      	ldr	r0, [pc, #52]	; (8006884 <prvInitialiseTaskLists+0x68>)
 8006850:	f7fe fbae 	bl	8004fb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006854:	480c      	ldr	r0, [pc, #48]	; (8006888 <prvInitialiseTaskLists+0x6c>)
 8006856:	f7fe fbab 	bl	8004fb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800685a:	480c      	ldr	r0, [pc, #48]	; (800688c <prvInitialiseTaskLists+0x70>)
 800685c:	f7fe fba8 	bl	8004fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006860:	480b      	ldr	r0, [pc, #44]	; (8006890 <prvInitialiseTaskLists+0x74>)
 8006862:	f7fe fba5 	bl	8004fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006866:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <prvInitialiseTaskLists+0x78>)
 8006868:	4a05      	ldr	r2, [pc, #20]	; (8006880 <prvInitialiseTaskLists+0x64>)
 800686a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800686c:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <prvInitialiseTaskLists+0x7c>)
 800686e:	4a05      	ldr	r2, [pc, #20]	; (8006884 <prvInitialiseTaskLists+0x68>)
 8006870:	601a      	str	r2, [r3, #0]
}
 8006872:	bf00      	nop
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000778 	.word	0x20000778
 8006880:	20000bd8 	.word	0x20000bd8
 8006884:	20000bec 	.word	0x20000bec
 8006888:	20000c08 	.word	0x20000c08
 800688c:	20000c1c 	.word	0x20000c1c
 8006890:	20000c34 	.word	0x20000c34
 8006894:	20000c00 	.word	0x20000c00
 8006898:	20000c04 	.word	0x20000c04

0800689c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068a2:	e019      	b.n	80068d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068a4:	f000 feba 	bl	800761c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a8:	4b0f      	ldr	r3, [pc, #60]	; (80068e8 <prvCheckTasksWaitingTermination+0x4c>)
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fe fc05 	bl	80050c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068ba:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <prvCheckTasksWaitingTermination+0x50>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3b01      	subs	r3, #1
 80068c0:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <prvCheckTasksWaitingTermination+0x50>)
 80068c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068c4:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <prvCheckTasksWaitingTermination+0x54>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	4a09      	ldr	r2, [pc, #36]	; (80068f0 <prvCheckTasksWaitingTermination+0x54>)
 80068cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068ce:	f000 fed3 	bl	8007678 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f80e 	bl	80068f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068d8:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <prvCheckTasksWaitingTermination+0x54>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e1      	bne.n	80068a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20000c1c 	.word	0x20000c1c
 80068ec:	20000c48 	.word	0x20000c48
 80068f0:	20000c30 	.word	0x20000c30

080068f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006902:	2b00      	cmp	r3, #0
 8006904:	d108      	bne.n	8006918 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	4618      	mov	r0, r3
 800690c:	f001 f862 	bl	80079d4 <vPortFree>
				vPortFree( pxTCB );
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 f85f 	bl	80079d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006916:	e017      	b.n	8006948 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800691e:	2b01      	cmp	r3, #1
 8006920:	d103      	bne.n	800692a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f001 f856 	bl	80079d4 <vPortFree>
	}
 8006928:	e00e      	b.n	8006948 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006930:	2b02      	cmp	r3, #2
 8006932:	d009      	beq.n	8006948 <prvDeleteTCB+0x54>
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	e7fe      	b.n	8006946 <prvDeleteTCB+0x52>
	}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006956:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <prvResetNextTaskUnblockTime+0x38>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d104      	bne.n	800696a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006960:	4b0a      	ldr	r3, [pc, #40]	; (800698c <prvResetNextTaskUnblockTime+0x3c>)
 8006962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006966:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006968:	e008      	b.n	800697c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800696a:	4b07      	ldr	r3, [pc, #28]	; (8006988 <prvResetNextTaskUnblockTime+0x38>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4a04      	ldr	r2, [pc, #16]	; (800698c <prvResetNextTaskUnblockTime+0x3c>)
 800697a:	6013      	str	r3, [r2, #0]
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	20000c00 	.word	0x20000c00
 800698c:	20000c68 	.word	0x20000c68

08006990 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006996:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <xTaskGetSchedulerState+0x34>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800699e:	2301      	movs	r3, #1
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	e008      	b.n	80069b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a4:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <xTaskGetSchedulerState+0x38>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069ac:	2302      	movs	r3, #2
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	e001      	b.n	80069b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069b2:	2300      	movs	r3, #0
 80069b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069b6:	687b      	ldr	r3, [r7, #4]
	}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	20000c54 	.word	0x20000c54
 80069c8:	20000c70 	.word	0x20000c70

080069cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d051      	beq.n	8006a86 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e6:	4b2a      	ldr	r3, [pc, #168]	; (8006a90 <xTaskPriorityInherit+0xc4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d241      	bcs.n	8006a74 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	db06      	blt.n	8006a06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f8:	4b25      	ldr	r3, [pc, #148]	; (8006a90 <xTaskPriorityInherit+0xc4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6959      	ldr	r1, [r3, #20]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4a1f      	ldr	r2, [pc, #124]	; (8006a94 <xTaskPriorityInherit+0xc8>)
 8006a18:	4413      	add	r3, r2
 8006a1a:	4299      	cmp	r1, r3
 8006a1c:	d122      	bne.n	8006a64 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fb4e 	bl	80050c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a28:	4b19      	ldr	r3, [pc, #100]	; (8006a90 <xTaskPriorityInherit+0xc4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a36:	4b18      	ldr	r3, [pc, #96]	; (8006a98 <xTaskPriorityInherit+0xcc>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d903      	bls.n	8006a46 <xTaskPriorityInherit+0x7a>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a42:	4a15      	ldr	r2, [pc, #84]	; (8006a98 <xTaskPriorityInherit+0xcc>)
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4a10      	ldr	r2, [pc, #64]	; (8006a94 <xTaskPriorityInherit+0xc8>)
 8006a54:	441a      	add	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	f7fe fad4 	bl	800500a <vListInsertEnd>
 8006a62:	e004      	b.n	8006a6e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <xTaskPriorityInherit+0xc4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e008      	b.n	8006a86 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a78:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <xTaskPriorityInherit+0xc4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d201      	bcs.n	8006a86 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a82:	2301      	movs	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a86:	68fb      	ldr	r3, [r7, #12]
	}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20000774 	.word	0x20000774
 8006a94:	20000778 	.word	0x20000778
 8006a98:	20000c50 	.word	0x20000c50

08006a9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d054      	beq.n	8006b5c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ab2:	4b2d      	ldr	r3, [pc, #180]	; (8006b68 <xTaskPriorityDisinherit+0xcc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d009      	beq.n	8006ad0 <xTaskPriorityDisinherit+0x34>
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	e7fe      	b.n	8006ace <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d109      	bne.n	8006aec <xTaskPriorityDisinherit+0x50>
 8006ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	e7fe      	b.n	8006aea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af0:	1e5a      	subs	r2, r3, #1
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d02c      	beq.n	8006b5c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d128      	bne.n	8006b5c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe fad8 	bl	80050c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2c:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <xTaskPriorityDisinherit+0xd0>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d903      	bls.n	8006b3c <xTaskPriorityDisinherit+0xa0>
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	4a0c      	ldr	r2, [pc, #48]	; (8006b6c <xTaskPriorityDisinherit+0xd0>)
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b40:	4613      	mov	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4a09      	ldr	r2, [pc, #36]	; (8006b70 <xTaskPriorityDisinherit+0xd4>)
 8006b4a:	441a      	add	r2, r3
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	3304      	adds	r3, #4
 8006b50:	4619      	mov	r1, r3
 8006b52:	4610      	mov	r0, r2
 8006b54:	f7fe fa59 	bl	800500a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b5c:	697b      	ldr	r3, [r7, #20]
	}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20000774 	.word	0x20000774
 8006b6c:	20000c50 	.word	0x20000c50
 8006b70:	20000778 	.word	0x20000778

08006b74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b82:	2301      	movs	r3, #1
 8006b84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d068      	beq.n	8006c5e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d109      	bne.n	8006ba8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	e7fe      	b.n	8006ba6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d902      	bls.n	8006bb8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	e002      	b.n	8006bbe <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d04a      	beq.n	8006c5e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d145      	bne.n	8006c5e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006bd2:	4b25      	ldr	r3, [pc, #148]	; (8006c68 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d109      	bne.n	8006bf0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	e7fe      	b.n	8006bee <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	db04      	blt.n	8006c0e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	6959      	ldr	r1, [r3, #20]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4a13      	ldr	r2, [pc, #76]	; (8006c6c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006c1e:	4413      	add	r3, r2
 8006c20:	4299      	cmp	r1, r3
 8006c22:	d11c      	bne.n	8006c5e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	3304      	adds	r3, #4
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fe fa4b 	bl	80050c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c32:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d903      	bls.n	8006c42 <vTaskPriorityDisinheritAfterTimeout+0xce>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3e:	4a0c      	ldr	r2, [pc, #48]	; (8006c70 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4a07      	ldr	r2, [pc, #28]	; (8006c6c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006c50:	441a      	add	r2, r3
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f7fe f9d6 	bl	800500a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c5e:	bf00      	nop
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000774 	.word	0x20000774
 8006c6c:	20000778 	.word	0x20000778
 8006c70:	20000c50 	.word	0x20000c50

08006c74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c78:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d004      	beq.n	8006c8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c80:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c86:	3201      	adds	r2, #1
 8006c88:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006c8a:	4b03      	ldr	r3, [pc, #12]	; (8006c98 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
	}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	20000774 	.word	0x20000774

08006c9c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ca6:	4b21      	ldr	r3, [pc, #132]	; (8006d2c <prvAddCurrentTaskToDelayedList+0x90>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cac:	4b20      	ldr	r3, [pc, #128]	; (8006d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe fa06 	bl	80050c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cbe:	d10a      	bne.n	8006cd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d007      	beq.n	8006cd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cc6:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4819      	ldr	r0, [pc, #100]	; (8006d34 <prvAddCurrentTaskToDelayedList+0x98>)
 8006cd0:	f7fe f99b 	bl	800500a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cd4:	e026      	b.n	8006d24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4413      	add	r3, r2
 8006cdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cde:	4b14      	ldr	r3, [pc, #80]	; (8006d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d209      	bcs.n	8006d02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cee:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b0f      	ldr	r3, [pc, #60]	; (8006d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	f7fe f9a9 	bl	8005052 <vListInsert>
}
 8006d00:	e010      	b.n	8006d24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d02:	4b0e      	ldr	r3, [pc, #56]	; (8006d3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4610      	mov	r0, r2
 8006d10:	f7fe f99f 	bl	8005052 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d14:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d202      	bcs.n	8006d24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d1e:	4a08      	ldr	r2, [pc, #32]	; (8006d40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	6013      	str	r3, [r2, #0]
}
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20000c4c 	.word	0x20000c4c
 8006d30:	20000774 	.word	0x20000774
 8006d34:	20000c34 	.word	0x20000c34
 8006d38:	20000c04 	.word	0x20000c04
 8006d3c:	20000c00 	.word	0x20000c00
 8006d40:	20000c68 	.word	0x20000c68

08006d44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	; 0x28
 8006d48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d4e:	f000 faff 	bl	8007350 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d52:	4b1c      	ldr	r3, [pc, #112]	; (8006dc4 <xTimerCreateTimerTask+0x80>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d021      	beq.n	8006d9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d62:	1d3a      	adds	r2, r7, #4
 8006d64:	f107 0108 	add.w	r1, r7, #8
 8006d68:	f107 030c 	add.w	r3, r7, #12
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fe f905 	bl	8004f7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	9202      	str	r2, [sp, #8]
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	2300      	movs	r3, #0
 8006d82:	460a      	mov	r2, r1
 8006d84:	4910      	ldr	r1, [pc, #64]	; (8006dc8 <xTimerCreateTimerTask+0x84>)
 8006d86:	4811      	ldr	r0, [pc, #68]	; (8006dcc <xTimerCreateTimerTask+0x88>)
 8006d88:	f7fe fffa 	bl	8005d80 <xTaskCreateStatic>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <xTimerCreateTimerTask+0x8c>)
 8006d90:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d92:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <xTimerCreateTimerTask+0x8c>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d109      	bne.n	8006db8 <xTimerCreateTimerTask+0x74>
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	e7fe      	b.n	8006db6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006db8:	697b      	ldr	r3, [r7, #20]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000ca4 	.word	0x20000ca4
 8006dc8:	0800a040 	.word	0x0800a040
 8006dcc:	08006f05 	.word	0x08006f05
 8006dd0:	20000ca8 	.word	0x20000ca8

08006dd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08a      	sub	sp, #40	; 0x28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d109      	bne.n	8006e00 <xTimerGenericCommand+0x2c>
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	623b      	str	r3, [r7, #32]
 8006dfe:	e7fe      	b.n	8006dfe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e00:	4b19      	ldr	r3, [pc, #100]	; (8006e68 <xTimerGenericCommand+0x94>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d02a      	beq.n	8006e5e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b05      	cmp	r3, #5
 8006e18:	dc18      	bgt.n	8006e4c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e1a:	f7ff fdb9 	bl	8006990 <xTaskGetSchedulerState>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d109      	bne.n	8006e38 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e24:	4b10      	ldr	r3, [pc, #64]	; (8006e68 <xTimerGenericCommand+0x94>)
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	f107 0110 	add.w	r1, r7, #16
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e30:	f7fe fab0 	bl	8005394 <xQueueGenericSend>
 8006e34:	6278      	str	r0, [r7, #36]	; 0x24
 8006e36:	e012      	b.n	8006e5e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e38:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <xTimerGenericCommand+0x94>)
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	f107 0110 	add.w	r1, r7, #16
 8006e40:	2300      	movs	r3, #0
 8006e42:	2200      	movs	r2, #0
 8006e44:	f7fe faa6 	bl	8005394 <xQueueGenericSend>
 8006e48:	6278      	str	r0, [r7, #36]	; 0x24
 8006e4a:	e008      	b.n	8006e5e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e4c:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <xTimerGenericCommand+0x94>)
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	f107 0110 	add.w	r1, r7, #16
 8006e54:	2300      	movs	r3, #0
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	f7fe fb96 	bl	8005588 <xQueueGenericSendFromISR>
 8006e5c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3728      	adds	r7, #40	; 0x28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20000ca4 	.word	0x20000ca4

08006e6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e76:	4b22      	ldr	r3, [pc, #136]	; (8006f00 <prvProcessExpiredTimer+0x94>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	3304      	adds	r3, #4
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe f91d 	bl	80050c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d021      	beq.n	8006edc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	699a      	ldr	r2, [r3, #24]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	18d1      	adds	r1, r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	6978      	ldr	r0, [r7, #20]
 8006ea6:	f000 f8d1 	bl	800704c <prvInsertTimerInActiveList>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01e      	beq.n	8006eee <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	2100      	movs	r1, #0
 8006eba:	6978      	ldr	r0, [r7, #20]
 8006ebc:	f7ff ff8a 	bl	8006dd4 <xTimerGenericCommand>
 8006ec0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d112      	bne.n	8006eee <prvProcessExpiredTimer+0x82>
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	e7fe      	b.n	8006eda <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ee2:	f023 0301 	bic.w	r3, r3, #1
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	6978      	ldr	r0, [r7, #20]
 8006ef4:	4798      	blx	r3
}
 8006ef6:	bf00      	nop
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000c9c 	.word	0x20000c9c

08006f04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f0c:	f107 0308 	add.w	r3, r7, #8
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 f857 	bl	8006fc4 <prvGetNextExpireTime>
 8006f16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f803 	bl	8006f28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f22:	f000 f8d5 	bl	80070d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f26:	e7f1      	b.n	8006f0c <prvTimerTask+0x8>

08006f28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f32:	f7ff f95b 	bl	80061ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f36:	f107 0308 	add.w	r3, r7, #8
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 f866 	bl	800700c <prvSampleTimeNow>
 8006f40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d130      	bne.n	8006faa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10a      	bne.n	8006f64 <prvProcessTimerOrBlockTask+0x3c>
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d806      	bhi.n	8006f64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f56:	f7ff f957 	bl	8006208 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f5a:	68f9      	ldr	r1, [r7, #12]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff ff85 	bl	8006e6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f62:	e024      	b.n	8006fae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d008      	beq.n	8006f7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f6a:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <prvProcessTimerOrBlockTask+0x90>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <prvProcessTimerOrBlockTask+0x50>
 8006f74:	2301      	movs	r3, #1
 8006f76:	e000      	b.n	8006f7a <prvProcessTimerOrBlockTask+0x52>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <prvProcessTimerOrBlockTask+0x94>)
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f7fe fec5 	bl	8005d18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f8e:	f7ff f93b 	bl	8006208 <xTaskResumeAll>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10a      	bne.n	8006fae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f98:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <prvProcessTimerOrBlockTask+0x98>)
 8006f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	f3bf 8f6f 	isb	sy
}
 8006fa8:	e001      	b.n	8006fae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006faa:	f7ff f92d 	bl	8006208 <xTaskResumeAll>
}
 8006fae:	bf00      	nop
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000ca0 	.word	0x20000ca0
 8006fbc:	20000ca4 	.word	0x20000ca4
 8006fc0:	e000ed04 	.word	0xe000ed04

08006fc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fcc:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <prvGetNextExpireTime+0x44>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <prvGetNextExpireTime+0x16>
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	e000      	b.n	8006fdc <prvGetNextExpireTime+0x18>
 8006fda:	2200      	movs	r2, #0
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d105      	bne.n	8006ff4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fe8:	4b07      	ldr	r3, [pc, #28]	; (8007008 <prvGetNextExpireTime+0x44>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	e001      	b.n	8006ff8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20000c9c 	.word	0x20000c9c

0800700c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007014:	f7ff f994 	bl	8006340 <xTaskGetTickCount>
 8007018:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800701a:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <prvSampleTimeNow+0x3c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	429a      	cmp	r2, r3
 8007022:	d205      	bcs.n	8007030 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007024:	f000 f930 	bl	8007288 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e002      	b.n	8007036 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007036:	4a04      	ldr	r2, [pc, #16]	; (8007048 <prvSampleTimeNow+0x3c>)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800703c:	68fb      	ldr	r3, [r7, #12]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000cac 	.word	0x20000cac

0800704c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800705a:	2300      	movs	r3, #0
 800705c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	429a      	cmp	r2, r3
 8007070:	d812      	bhi.n	8007098 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	1ad2      	subs	r2, r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	429a      	cmp	r2, r3
 800707e:	d302      	bcc.n	8007086 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007080:	2301      	movs	r3, #1
 8007082:	617b      	str	r3, [r7, #20]
 8007084:	e01b      	b.n	80070be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007086:	4b10      	ldr	r3, [pc, #64]	; (80070c8 <prvInsertTimerInActiveList+0x7c>)
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3304      	adds	r3, #4
 800708e:	4619      	mov	r1, r3
 8007090:	4610      	mov	r0, r2
 8007092:	f7fd ffde 	bl	8005052 <vListInsert>
 8007096:	e012      	b.n	80070be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d206      	bcs.n	80070ae <prvInsertTimerInActiveList+0x62>
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d302      	bcc.n	80070ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	e007      	b.n	80070be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ae:	4b07      	ldr	r3, [pc, #28]	; (80070cc <prvInsertTimerInActiveList+0x80>)
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3304      	adds	r3, #4
 80070b6:	4619      	mov	r1, r3
 80070b8:	4610      	mov	r0, r2
 80070ba:	f7fd ffca 	bl	8005052 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070be:	697b      	ldr	r3, [r7, #20]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20000ca0 	.word	0x20000ca0
 80070cc:	20000c9c 	.word	0x20000c9c

080070d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08e      	sub	sp, #56	; 0x38
 80070d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070d6:	e0c6      	b.n	8007266 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	da17      	bge.n	800710e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070de:	1d3b      	adds	r3, r7, #4
 80070e0:	3304      	adds	r3, #4
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d109      	bne.n	80070fe <prvProcessReceivedCommands+0x2e>
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	61fb      	str	r3, [r7, #28]
 80070fc:	e7fe      	b.n	80070fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007104:	6850      	ldr	r0, [r2, #4]
 8007106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007108:	6892      	ldr	r2, [r2, #8]
 800710a:	4611      	mov	r1, r2
 800710c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f2c0 80a7 	blt.w	8007264 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007124:	3304      	adds	r3, #4
 8007126:	4618      	mov	r0, r3
 8007128:	f7fd ffcc 	bl	80050c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800712c:	463b      	mov	r3, r7
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff ff6c 	bl	800700c <prvSampleTimeNow>
 8007134:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b09      	cmp	r3, #9
 800713a:	f200 8094 	bhi.w	8007266 <prvProcessReceivedCommands+0x196>
 800713e:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <prvProcessReceivedCommands+0x74>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	0800716d 	.word	0x0800716d
 8007148:	0800716d 	.word	0x0800716d
 800714c:	0800716d 	.word	0x0800716d
 8007150:	080071df 	.word	0x080071df
 8007154:	080071f3 	.word	0x080071f3
 8007158:	0800723b 	.word	0x0800723b
 800715c:	0800716d 	.word	0x0800716d
 8007160:	0800716d 	.word	0x0800716d
 8007164:	080071df 	.word	0x080071df
 8007168:	080071f3 	.word	0x080071f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007172:	f043 0301 	orr.w	r3, r3, #1
 8007176:	b2da      	uxtb	r2, r3
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	18d1      	adds	r1, r2, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718c:	f7ff ff5e 	bl	800704c <prvInsertTimerInActiveList>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d067      	beq.n	8007266 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800719c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d05c      	beq.n	8007266 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	441a      	add	r2, r3
 80071b4:	2300      	movs	r3, #0
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	2300      	movs	r3, #0
 80071ba:	2100      	movs	r1, #0
 80071bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071be:	f7ff fe09 	bl	8006dd4 <xTimerGenericCommand>
 80071c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d14d      	bne.n	8007266 <prvProcessReceivedCommands+0x196>
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	61bb      	str	r3, [r7, #24]
 80071dc:	e7fe      	b.n	80071dc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e4:	f023 0301 	bic.w	r3, r3, #1
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80071f0:	e039      	b.n	8007266 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071f8:	f043 0301 	orr.w	r3, r3, #1
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d109      	bne.n	8007226 <prvProcessReceivedCommands+0x156>
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	e7fe      	b.n	8007224 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	18d1      	adds	r1, r2, r3
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007234:	f7ff ff0a 	bl	800704c <prvInsertTimerInActiveList>
					break;
 8007238:	e015      	b.n	8007266 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800724a:	f000 fbc3 	bl	80079d4 <vPortFree>
 800724e:	e00a      	b.n	8007266 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007262:	e000      	b.n	8007266 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007264:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007266:	4b07      	ldr	r3, [pc, #28]	; (8007284 <prvProcessReceivedCommands+0x1b4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	1d39      	adds	r1, r7, #4
 800726c:	2200      	movs	r2, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fa1e 	bl	80056b0 <xQueueReceive>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	f47f af2e 	bne.w	80070d8 <prvProcessReceivedCommands+0x8>
	}
}
 800727c:	bf00      	nop
 800727e:	3730      	adds	r7, #48	; 0x30
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20000ca4 	.word	0x20000ca4

08007288 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800728e:	e047      	b.n	8007320 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007290:	4b2d      	ldr	r3, [pc, #180]	; (8007348 <prvSwitchTimerLists+0xc0>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800729a:	4b2b      	ldr	r3, [pc, #172]	; (8007348 <prvSwitchTimerLists+0xc0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3304      	adds	r3, #4
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fd ff0b 	bl	80050c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d02d      	beq.n	8007320 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4413      	add	r3, r2
 80072cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d90e      	bls.n	80072f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072e2:	4b19      	ldr	r3, [pc, #100]	; (8007348 <prvSwitchTimerLists+0xc0>)
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3304      	adds	r3, #4
 80072ea:	4619      	mov	r1, r3
 80072ec:	4610      	mov	r0, r2
 80072ee:	f7fd feb0 	bl	8005052 <vListInsert>
 80072f2:	e015      	b.n	8007320 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072f4:	2300      	movs	r3, #0
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	2300      	movs	r3, #0
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	2100      	movs	r1, #0
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7ff fd68 	bl	8006dd4 <xTimerGenericCommand>
 8007304:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d109      	bne.n	8007320 <prvSwitchTimerLists+0x98>
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	603b      	str	r3, [r7, #0]
 800731e:	e7fe      	b.n	800731e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007320:	4b09      	ldr	r3, [pc, #36]	; (8007348 <prvSwitchTimerLists+0xc0>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1b2      	bne.n	8007290 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800732a:	4b07      	ldr	r3, [pc, #28]	; (8007348 <prvSwitchTimerLists+0xc0>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007330:	4b06      	ldr	r3, [pc, #24]	; (800734c <prvSwitchTimerLists+0xc4>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a04      	ldr	r2, [pc, #16]	; (8007348 <prvSwitchTimerLists+0xc0>)
 8007336:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007338:	4a04      	ldr	r2, [pc, #16]	; (800734c <prvSwitchTimerLists+0xc4>)
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	6013      	str	r3, [r2, #0]
}
 800733e:	bf00      	nop
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000c9c 	.word	0x20000c9c
 800734c:	20000ca0 	.word	0x20000ca0

08007350 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007356:	f000 f961 	bl	800761c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800735a:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <prvCheckForValidListAndQueue+0x60>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d120      	bne.n	80073a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007362:	4814      	ldr	r0, [pc, #80]	; (80073b4 <prvCheckForValidListAndQueue+0x64>)
 8007364:	f7fd fe24 	bl	8004fb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007368:	4813      	ldr	r0, [pc, #76]	; (80073b8 <prvCheckForValidListAndQueue+0x68>)
 800736a:	f7fd fe21 	bl	8004fb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800736e:	4b13      	ldr	r3, [pc, #76]	; (80073bc <prvCheckForValidListAndQueue+0x6c>)
 8007370:	4a10      	ldr	r2, [pc, #64]	; (80073b4 <prvCheckForValidListAndQueue+0x64>)
 8007372:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007374:	4b12      	ldr	r3, [pc, #72]	; (80073c0 <prvCheckForValidListAndQueue+0x70>)
 8007376:	4a10      	ldr	r2, [pc, #64]	; (80073b8 <prvCheckForValidListAndQueue+0x68>)
 8007378:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800737a:	2300      	movs	r3, #0
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	4b11      	ldr	r3, [pc, #68]	; (80073c4 <prvCheckForValidListAndQueue+0x74>)
 8007380:	4a11      	ldr	r2, [pc, #68]	; (80073c8 <prvCheckForValidListAndQueue+0x78>)
 8007382:	2110      	movs	r1, #16
 8007384:	200a      	movs	r0, #10
 8007386:	f7fd ff2f 	bl	80051e8 <xQueueGenericCreateStatic>
 800738a:	4602      	mov	r2, r0
 800738c:	4b08      	ldr	r3, [pc, #32]	; (80073b0 <prvCheckForValidListAndQueue+0x60>)
 800738e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007390:	4b07      	ldr	r3, [pc, #28]	; (80073b0 <prvCheckForValidListAndQueue+0x60>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007398:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <prvCheckForValidListAndQueue+0x60>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	490b      	ldr	r1, [pc, #44]	; (80073cc <prvCheckForValidListAndQueue+0x7c>)
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe fc92 	bl	8005cc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073a4:	f000 f968 	bl	8007678 <vPortExitCritical>
}
 80073a8:	bf00      	nop
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000ca4 	.word	0x20000ca4
 80073b4:	20000c74 	.word	0x20000c74
 80073b8:	20000c88 	.word	0x20000c88
 80073bc:	20000c9c 	.word	0x20000c9c
 80073c0:	20000ca0 	.word	0x20000ca0
 80073c4:	20000d50 	.word	0x20000d50
 80073c8:	20000cb0 	.word	0x20000cb0
 80073cc:	0800a048 	.word	0x0800a048

080073d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3b04      	subs	r3, #4
 80073e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3b04      	subs	r3, #4
 80073ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f023 0201 	bic.w	r2, r3, #1
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3b04      	subs	r3, #4
 80073fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007400:	4a0c      	ldr	r2, [pc, #48]	; (8007434 <pxPortInitialiseStack+0x64>)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3b14      	subs	r3, #20
 800740a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3b04      	subs	r3, #4
 8007416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f06f 0202 	mvn.w	r2, #2
 800741e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3b20      	subs	r3, #32
 8007424:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007426:	68fb      	ldr	r3, [r7, #12]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	08007439 	.word	0x08007439

08007438 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800743e:	2300      	movs	r3, #0
 8007440:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007442:	4b11      	ldr	r3, [pc, #68]	; (8007488 <prvTaskExitError+0x50>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800744a:	d009      	beq.n	8007460 <prvTaskExitError+0x28>
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	60fb      	str	r3, [r7, #12]
 800745e:	e7fe      	b.n	800745e <prvTaskExitError+0x26>
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007472:	bf00      	nop
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0fc      	beq.n	8007474 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800747a:	bf00      	nop
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	2000000c 	.word	0x2000000c
 800748c:	00000000 	.word	0x00000000

08007490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007490:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <pxCurrentTCBConst2>)
 8007492:	6819      	ldr	r1, [r3, #0]
 8007494:	6808      	ldr	r0, [r1, #0]
 8007496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749a:	f380 8809 	msr	PSP, r0
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f04f 0000 	mov.w	r0, #0
 80074a6:	f380 8811 	msr	BASEPRI, r0
 80074aa:	4770      	bx	lr
 80074ac:	f3af 8000 	nop.w

080074b0 <pxCurrentTCBConst2>:
 80074b0:	20000774 	.word	0x20000774
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop

080074b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074b8:	4808      	ldr	r0, [pc, #32]	; (80074dc <prvPortStartFirstTask+0x24>)
 80074ba:	6800      	ldr	r0, [r0, #0]
 80074bc:	6800      	ldr	r0, [r0, #0]
 80074be:	f380 8808 	msr	MSP, r0
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f380 8814 	msr	CONTROL, r0
 80074ca:	b662      	cpsie	i
 80074cc:	b661      	cpsie	f
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	df00      	svc	0
 80074d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074da:	bf00      	nop
 80074dc:	e000ed08 	.word	0xe000ed08

080074e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074e6:	4b44      	ldr	r3, [pc, #272]	; (80075f8 <xPortStartScheduler+0x118>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a44      	ldr	r2, [pc, #272]	; (80075fc <xPortStartScheduler+0x11c>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d109      	bne.n	8007504 <xPortStartScheduler+0x24>
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	e7fe      	b.n	8007502 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007504:	4b3c      	ldr	r3, [pc, #240]	; (80075f8 <xPortStartScheduler+0x118>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a3d      	ldr	r2, [pc, #244]	; (8007600 <xPortStartScheduler+0x120>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d109      	bne.n	8007522 <xPortStartScheduler+0x42>
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	e7fe      	b.n	8007520 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007522:	4b38      	ldr	r3, [pc, #224]	; (8007604 <xPortStartScheduler+0x124>)
 8007524:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	22ff      	movs	r2, #255	; 0xff
 8007532:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007544:	b2da      	uxtb	r2, r3
 8007546:	4b30      	ldr	r3, [pc, #192]	; (8007608 <xPortStartScheduler+0x128>)
 8007548:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800754a:	4b30      	ldr	r3, [pc, #192]	; (800760c <xPortStartScheduler+0x12c>)
 800754c:	2207      	movs	r2, #7
 800754e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007550:	e009      	b.n	8007566 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007552:	4b2e      	ldr	r3, [pc, #184]	; (800760c <xPortStartScheduler+0x12c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3b01      	subs	r3, #1
 8007558:	4a2c      	ldr	r2, [pc, #176]	; (800760c <xPortStartScheduler+0x12c>)
 800755a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	b2db      	uxtb	r3, r3
 8007564:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007566:	78fb      	ldrb	r3, [r7, #3]
 8007568:	b2db      	uxtb	r3, r3
 800756a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756e:	2b80      	cmp	r3, #128	; 0x80
 8007570:	d0ef      	beq.n	8007552 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007572:	4b26      	ldr	r3, [pc, #152]	; (800760c <xPortStartScheduler+0x12c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f1c3 0307 	rsb	r3, r3, #7
 800757a:	2b04      	cmp	r3, #4
 800757c:	d009      	beq.n	8007592 <xPortStartScheduler+0xb2>
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	60bb      	str	r3, [r7, #8]
 8007590:	e7fe      	b.n	8007590 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007592:	4b1e      	ldr	r3, [pc, #120]	; (800760c <xPortStartScheduler+0x12c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	021b      	lsls	r3, r3, #8
 8007598:	4a1c      	ldr	r2, [pc, #112]	; (800760c <xPortStartScheduler+0x12c>)
 800759a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800759c:	4b1b      	ldr	r3, [pc, #108]	; (800760c <xPortStartScheduler+0x12c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075a4:	4a19      	ldr	r2, [pc, #100]	; (800760c <xPortStartScheduler+0x12c>)
 80075a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075b0:	4b17      	ldr	r3, [pc, #92]	; (8007610 <xPortStartScheduler+0x130>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a16      	ldr	r2, [pc, #88]	; (8007610 <xPortStartScheduler+0x130>)
 80075b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075bc:	4b14      	ldr	r3, [pc, #80]	; (8007610 <xPortStartScheduler+0x130>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a13      	ldr	r2, [pc, #76]	; (8007610 <xPortStartScheduler+0x130>)
 80075c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075c8:	f000 f8d6 	bl	8007778 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075cc:	4b11      	ldr	r3, [pc, #68]	; (8007614 <xPortStartScheduler+0x134>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075d2:	f000 f8f5 	bl	80077c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075d6:	4b10      	ldr	r3, [pc, #64]	; (8007618 <xPortStartScheduler+0x138>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a0f      	ldr	r2, [pc, #60]	; (8007618 <xPortStartScheduler+0x138>)
 80075dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80075e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075e2:	f7ff ff69 	bl	80074b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075e6:	f7fe ff73 	bl	80064d0 <vTaskSwitchContext>
	prvTaskExitError();
 80075ea:	f7ff ff25 	bl	8007438 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	e000ed00 	.word	0xe000ed00
 80075fc:	410fc271 	.word	0x410fc271
 8007600:	410fc270 	.word	0x410fc270
 8007604:	e000e400 	.word	0xe000e400
 8007608:	20000da0 	.word	0x20000da0
 800760c:	20000da4 	.word	0x20000da4
 8007610:	e000ed20 	.word	0xe000ed20
 8007614:	2000000c 	.word	0x2000000c
 8007618:	e000ef34 	.word	0xe000ef34

0800761c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007634:	4b0e      	ldr	r3, [pc, #56]	; (8007670 <vPortEnterCritical+0x54>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3301      	adds	r3, #1
 800763a:	4a0d      	ldr	r2, [pc, #52]	; (8007670 <vPortEnterCritical+0x54>)
 800763c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800763e:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <vPortEnterCritical+0x54>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d10e      	bne.n	8007664 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007646:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <vPortEnterCritical+0x58>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <vPortEnterCritical+0x48>
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	603b      	str	r3, [r7, #0]
 8007662:	e7fe      	b.n	8007662 <vPortEnterCritical+0x46>
	}
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	2000000c 	.word	0x2000000c
 8007674:	e000ed04 	.word	0xe000ed04

08007678 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800767e:	4b11      	ldr	r3, [pc, #68]	; (80076c4 <vPortExitCritical+0x4c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d109      	bne.n	800769a <vPortExitCritical+0x22>
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	607b      	str	r3, [r7, #4]
 8007698:	e7fe      	b.n	8007698 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800769a:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <vPortExitCritical+0x4c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3b01      	subs	r3, #1
 80076a0:	4a08      	ldr	r2, [pc, #32]	; (80076c4 <vPortExitCritical+0x4c>)
 80076a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076a4:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <vPortExitCritical+0x4c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d104      	bne.n	80076b6 <vPortExitCritical+0x3e>
 80076ac:	2300      	movs	r3, #0
 80076ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	2000000c 	.word	0x2000000c
	...

080076d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076d0:	f3ef 8009 	mrs	r0, PSP
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	4b15      	ldr	r3, [pc, #84]	; (8007730 <pxCurrentTCBConst>)
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	f01e 0f10 	tst.w	lr, #16
 80076e0:	bf08      	it	eq
 80076e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ea:	6010      	str	r0, [r2, #0]
 80076ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076f4:	f380 8811 	msr	BASEPRI, r0
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f7fe fee6 	bl	80064d0 <vTaskSwitchContext>
 8007704:	f04f 0000 	mov.w	r0, #0
 8007708:	f380 8811 	msr	BASEPRI, r0
 800770c:	bc09      	pop	{r0, r3}
 800770e:	6819      	ldr	r1, [r3, #0]
 8007710:	6808      	ldr	r0, [r1, #0]
 8007712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007716:	f01e 0f10 	tst.w	lr, #16
 800771a:	bf08      	it	eq
 800771c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007720:	f380 8809 	msr	PSP, r0
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	f3af 8000 	nop.w

08007730 <pxCurrentTCBConst>:
 8007730:	20000774 	.word	0x20000774
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop

08007738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007750:	f7fe fe06 	bl	8006360 <xTaskIncrementTick>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800775a:	4b06      	ldr	r3, [pc, #24]	; (8007774 <SysTick_Handler+0x3c>)
 800775c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	2300      	movs	r3, #0
 8007764:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	e000ed04 	.word	0xe000ed04

08007778 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800777c:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <vPortSetupTimerInterrupt+0x34>)
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <vPortSetupTimerInterrupt+0x38>)
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007788:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <vPortSetupTimerInterrupt+0x3c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a0a      	ldr	r2, [pc, #40]	; (80077b8 <vPortSetupTimerInterrupt+0x40>)
 800778e:	fba2 2303 	umull	r2, r3, r2, r3
 8007792:	099b      	lsrs	r3, r3, #6
 8007794:	4a09      	ldr	r2, [pc, #36]	; (80077bc <vPortSetupTimerInterrupt+0x44>)
 8007796:	3b01      	subs	r3, #1
 8007798:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800779a:	4b04      	ldr	r3, [pc, #16]	; (80077ac <vPortSetupTimerInterrupt+0x34>)
 800779c:	2207      	movs	r2, #7
 800779e:	601a      	str	r2, [r3, #0]
}
 80077a0:	bf00      	nop
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	e000e010 	.word	0xe000e010
 80077b0:	e000e018 	.word	0xe000e018
 80077b4:	20000000 	.word	0x20000000
 80077b8:	10624dd3 	.word	0x10624dd3
 80077bc:	e000e014 	.word	0xe000e014

080077c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80077d0 <vPortEnableVFP+0x10>
 80077c4:	6801      	ldr	r1, [r0, #0]
 80077c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077ca:	6001      	str	r1, [r0, #0]
 80077cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077ce:	bf00      	nop
 80077d0:	e000ed88 	.word	0xe000ed88

080077d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077da:	f3ef 8305 	mrs	r3, IPSR
 80077de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b0f      	cmp	r3, #15
 80077e4:	d913      	bls.n	800780e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077e6:	4a16      	ldr	r2, [pc, #88]	; (8007840 <vPortValidateInterruptPriority+0x6c>)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4413      	add	r3, r2
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077f0:	4b14      	ldr	r3, [pc, #80]	; (8007844 <vPortValidateInterruptPriority+0x70>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	7afa      	ldrb	r2, [r7, #11]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d209      	bcs.n	800780e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	607b      	str	r3, [r7, #4]
 800780c:	e7fe      	b.n	800780c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800780e:	4b0e      	ldr	r3, [pc, #56]	; (8007848 <vPortValidateInterruptPriority+0x74>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007816:	4b0d      	ldr	r3, [pc, #52]	; (800784c <vPortValidateInterruptPriority+0x78>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d909      	bls.n	8007832 <vPortValidateInterruptPriority+0x5e>
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	603b      	str	r3, [r7, #0]
 8007830:	e7fe      	b.n	8007830 <vPortValidateInterruptPriority+0x5c>
	}
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	e000e3f0 	.word	0xe000e3f0
 8007844:	20000da0 	.word	0x20000da0
 8007848:	e000ed0c 	.word	0xe000ed0c
 800784c:	20000da4 	.word	0x20000da4

08007850 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08a      	sub	sp, #40	; 0x28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007858:	2300      	movs	r3, #0
 800785a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800785c:	f7fe fcc6 	bl	80061ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007860:	4b57      	ldr	r3, [pc, #348]	; (80079c0 <pvPortMalloc+0x170>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007868:	f000 f90c 	bl	8007a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800786c:	4b55      	ldr	r3, [pc, #340]	; (80079c4 <pvPortMalloc+0x174>)
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4013      	ands	r3, r2
 8007874:	2b00      	cmp	r3, #0
 8007876:	f040 808c 	bne.w	8007992 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d01c      	beq.n	80078ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007880:	2208      	movs	r2, #8
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4413      	add	r3, r2
 8007886:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f003 0307 	and.w	r3, r3, #7
 800788e:	2b00      	cmp	r3, #0
 8007890:	d013      	beq.n	80078ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f023 0307 	bic.w	r3, r3, #7
 8007898:	3308      	adds	r3, #8
 800789a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f003 0307 	and.w	r3, r3, #7
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d009      	beq.n	80078ba <pvPortMalloc+0x6a>
 80078a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	e7fe      	b.n	80078b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d068      	beq.n	8007992 <pvPortMalloc+0x142>
 80078c0:	4b41      	ldr	r3, [pc, #260]	; (80079c8 <pvPortMalloc+0x178>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d863      	bhi.n	8007992 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078ca:	4b40      	ldr	r3, [pc, #256]	; (80079cc <pvPortMalloc+0x17c>)
 80078cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078ce:	4b3f      	ldr	r3, [pc, #252]	; (80079cc <pvPortMalloc+0x17c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078d4:	e004      	b.n	80078e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d903      	bls.n	80078f2 <pvPortMalloc+0xa2>
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1f1      	bne.n	80078d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078f2:	4b33      	ldr	r3, [pc, #204]	; (80079c0 <pvPortMalloc+0x170>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d04a      	beq.n	8007992 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2208      	movs	r2, #8
 8007902:	4413      	add	r3, r2
 8007904:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	1ad2      	subs	r2, r2, r3
 8007916:	2308      	movs	r3, #8
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	429a      	cmp	r2, r3
 800791c:	d91e      	bls.n	800795c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800791e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4413      	add	r3, r2
 8007924:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	2b00      	cmp	r3, #0
 800792e:	d009      	beq.n	8007944 <pvPortMalloc+0xf4>
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	613b      	str	r3, [r7, #16]
 8007942:	e7fe      	b.n	8007942 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	1ad2      	subs	r2, r2, r3
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007956:	69b8      	ldr	r0, [r7, #24]
 8007958:	f000 f8f6 	bl	8007b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800795c:	4b1a      	ldr	r3, [pc, #104]	; (80079c8 <pvPortMalloc+0x178>)
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	4a18      	ldr	r2, [pc, #96]	; (80079c8 <pvPortMalloc+0x178>)
 8007968:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800796a:	4b17      	ldr	r3, [pc, #92]	; (80079c8 <pvPortMalloc+0x178>)
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	4b18      	ldr	r3, [pc, #96]	; (80079d0 <pvPortMalloc+0x180>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d203      	bcs.n	800797e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007976:	4b14      	ldr	r3, [pc, #80]	; (80079c8 <pvPortMalloc+0x178>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a15      	ldr	r2, [pc, #84]	; (80079d0 <pvPortMalloc+0x180>)
 800797c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	4b10      	ldr	r3, [pc, #64]	; (80079c4 <pvPortMalloc+0x174>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	431a      	orrs	r2, r3
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007992:	f7fe fc39 	bl	8006208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	2b00      	cmp	r3, #0
 800799e:	d009      	beq.n	80079b4 <pvPortMalloc+0x164>
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	e7fe      	b.n	80079b2 <pvPortMalloc+0x162>
	return pvReturn;
 80079b4:	69fb      	ldr	r3, [r7, #28]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3728      	adds	r7, #40	; 0x28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	200049b0 	.word	0x200049b0
 80079c4:	200049bc 	.word	0x200049bc
 80079c8:	200049b4 	.word	0x200049b4
 80079cc:	200049a8 	.word	0x200049a8
 80079d0:	200049b8 	.word	0x200049b8

080079d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d046      	beq.n	8007a74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079e6:	2308      	movs	r3, #8
 80079e8:	425b      	negs	r3, r3
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	4413      	add	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	4b20      	ldr	r3, [pc, #128]	; (8007a7c <vPortFree+0xa8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4013      	ands	r3, r2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d109      	bne.n	8007a16 <vPortFree+0x42>
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	e7fe      	b.n	8007a14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d009      	beq.n	8007a32 <vPortFree+0x5e>
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	60bb      	str	r3, [r7, #8]
 8007a30:	e7fe      	b.n	8007a30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	4b11      	ldr	r3, [pc, #68]	; (8007a7c <vPortFree+0xa8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d019      	beq.n	8007a74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d115      	bne.n	8007a74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <vPortFree+0xa8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	43db      	mvns	r3, r3
 8007a52:	401a      	ands	r2, r3
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a58:	f7fe fbc8 	bl	80061ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <vPortFree+0xac>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4413      	add	r3, r2
 8007a66:	4a06      	ldr	r2, [pc, #24]	; (8007a80 <vPortFree+0xac>)
 8007a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a6a:	6938      	ldr	r0, [r7, #16]
 8007a6c:	f000 f86c 	bl	8007b48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a70:	f7fe fbca 	bl	8006208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a74:	bf00      	nop
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	200049bc 	.word	0x200049bc
 8007a80:	200049b4 	.word	0x200049b4

08007a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a90:	4b27      	ldr	r3, [pc, #156]	; (8007b30 <prvHeapInit+0xac>)
 8007a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00c      	beq.n	8007ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3307      	adds	r3, #7
 8007aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0307 	bic.w	r3, r3, #7
 8007aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	4a1f      	ldr	r2, [pc, #124]	; (8007b30 <prvHeapInit+0xac>)
 8007ab4:	4413      	add	r3, r2
 8007ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007abc:	4a1d      	ldr	r2, [pc, #116]	; (8007b34 <prvHeapInit+0xb0>)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ac2:	4b1c      	ldr	r3, [pc, #112]	; (8007b34 <prvHeapInit+0xb0>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	4413      	add	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ad0:	2208      	movs	r2, #8
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	1a9b      	subs	r3, r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0307 	bic.w	r3, r3, #7
 8007ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4a15      	ldr	r2, [pc, #84]	; (8007b38 <prvHeapInit+0xb4>)
 8007ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ae6:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <prvHeapInit+0xb4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2200      	movs	r2, #0
 8007aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007aee:	4b12      	ldr	r3, [pc, #72]	; (8007b38 <prvHeapInit+0xb4>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	1ad2      	subs	r2, r2, r3
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b04:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <prvHeapInit+0xb4>)
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	4a0a      	ldr	r2, [pc, #40]	; (8007b3c <prvHeapInit+0xb8>)
 8007b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	4a09      	ldr	r2, [pc, #36]	; (8007b40 <prvHeapInit+0xbc>)
 8007b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b1c:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <prvHeapInit+0xc0>)
 8007b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b22:	601a      	str	r2, [r3, #0]
}
 8007b24:	bf00      	nop
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	20000da8 	.word	0x20000da8
 8007b34:	200049a8 	.word	0x200049a8
 8007b38:	200049b0 	.word	0x200049b0
 8007b3c:	200049b8 	.word	0x200049b8
 8007b40:	200049b4 	.word	0x200049b4
 8007b44:	200049bc 	.word	0x200049bc

08007b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b50:	4b28      	ldr	r3, [pc, #160]	; (8007bf4 <prvInsertBlockIntoFreeList+0xac>)
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	e002      	b.n	8007b5c <prvInsertBlockIntoFreeList+0x14>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d8f7      	bhi.n	8007b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	4413      	add	r3, r2
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d108      	bne.n	8007b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	441a      	add	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	441a      	add	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d118      	bne.n	8007bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	4b15      	ldr	r3, [pc, #84]	; (8007bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d00d      	beq.n	8007bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	441a      	add	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	e008      	b.n	8007bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bc6:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	e003      	b.n	8007bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d002      	beq.n	8007be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007be6:	bf00      	nop
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	200049a8 	.word	0x200049a8
 8007bf8:	200049b0 	.word	0x200049b0

08007bfc <readAnalog2Values>:
}
uint16_t getAnalogValue1(void){return analogValue1;}
#elif ANALOGINPUTVAL==2
uint16_t analogValue1;
uint16_t analogValue2;
void readAnalog2Values(ADC_HandleTypeDef *adc1,ADC_HandleTypeDef *adc2){
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
	static uint32_t filter1=0,filter2=0;
	  HAL_ADC_Start(adc1);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7f9 feea 	bl	80019e0 <HAL_ADC_Start>

	  for(int c=0;c<10;c++){
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	e00f      	b.n	8007c32 <readAnalog2Values+0x36>
		  HAL_ADC_PollForConversion(adc1, ADCTIMEOUT);
 8007c12:	2105      	movs	r1, #5
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7f9 ffdc 	bl	8001bd2 <HAL_ADC_PollForConversion>
		  filter1+=HAL_ADC_GetValue(adc1);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fa f85d 	bl	8001cda <HAL_ADC_GetValue>
 8007c20:	4602      	mov	r2, r0
 8007c22:	4b23      	ldr	r3, [pc, #140]	; (8007cb0 <readAnalog2Values+0xb4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4413      	add	r3, r2
 8007c28:	4a21      	ldr	r2, [pc, #132]	; (8007cb0 <readAnalog2Values+0xb4>)
 8007c2a:	6013      	str	r3, [r2, #0]
	  for(int c=0;c<10;c++){
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b09      	cmp	r3, #9
 8007c36:	ddec      	ble.n	8007c12 <readAnalog2Values+0x16>
	  }
	  analogValue1=(uint16_t)(filter1/10);
 8007c38:	4b1d      	ldr	r3, [pc, #116]	; (8007cb0 <readAnalog2Values+0xb4>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a1d      	ldr	r2, [pc, #116]	; (8007cb4 <readAnalog2Values+0xb8>)
 8007c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c42:	08db      	lsrs	r3, r3, #3
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	4b1c      	ldr	r3, [pc, #112]	; (8007cb8 <readAnalog2Values+0xbc>)
 8007c48:	801a      	strh	r2, [r3, #0]
	  filter1=0;
 8007c4a:	4b19      	ldr	r3, [pc, #100]	; (8007cb0 <readAnalog2Values+0xb4>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop (adc1);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7f9 ff8b 	bl	8001b6c <HAL_ADC_Stop>
	  HAL_ADC_Start(adc2);
 8007c56:	6838      	ldr	r0, [r7, #0]
 8007c58:	f7f9 fec2 	bl	80019e0 <HAL_ADC_Start>
	  for(int c=0;c<10;c++){
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60bb      	str	r3, [r7, #8]
 8007c60:	e00f      	b.n	8007c82 <readAnalog2Values+0x86>
		  HAL_ADC_PollForConversion(adc2, ADCTIMEOUT);
 8007c62:	2105      	movs	r1, #5
 8007c64:	6838      	ldr	r0, [r7, #0]
 8007c66:	f7f9 ffb4 	bl	8001bd2 <HAL_ADC_PollForConversion>
		  filter2+=HAL_ADC_GetValue(adc2);
 8007c6a:	6838      	ldr	r0, [r7, #0]
 8007c6c:	f7fa f835 	bl	8001cda <HAL_ADC_GetValue>
 8007c70:	4602      	mov	r2, r0
 8007c72:	4b12      	ldr	r3, [pc, #72]	; (8007cbc <readAnalog2Values+0xc0>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4413      	add	r3, r2
 8007c78:	4a10      	ldr	r2, [pc, #64]	; (8007cbc <readAnalog2Values+0xc0>)
 8007c7a:	6013      	str	r3, [r2, #0]
	  for(int c=0;c<10;c++){
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	60bb      	str	r3, [r7, #8]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b09      	cmp	r3, #9
 8007c86:	ddec      	ble.n	8007c62 <readAnalog2Values+0x66>
	  }
	  analogValue2=(uint16_t)(filter2/10);
 8007c88:	4b0c      	ldr	r3, [pc, #48]	; (8007cbc <readAnalog2Values+0xc0>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a09      	ldr	r2, [pc, #36]	; (8007cb4 <readAnalog2Values+0xb8>)
 8007c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c92:	08db      	lsrs	r3, r3, #3
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <readAnalog2Values+0xc4>)
 8007c98:	801a      	strh	r2, [r3, #0]
	  filter2=0;
 8007c9a:	4b08      	ldr	r3, [pc, #32]	; (8007cbc <readAnalog2Values+0xc0>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop (adc2);
 8007ca0:	6838      	ldr	r0, [r7, #0]
 8007ca2:	f7f9 ff63 	bl	8001b6c <HAL_ADC_Stop>
}
 8007ca6:	bf00      	nop
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200049c0 	.word	0x200049c0
 8007cb4:	cccccccd 	.word	0xcccccccd
 8007cb8:	20004cf6 	.word	0x20004cf6
 8007cbc:	200049c4 	.word	0x200049c4
 8007cc0:	20004cf4 	.word	0x20004cf4

08007cc4 <getAnalogValue1>:
uint16_t getAnalogValue1(void){return analogValue1;}
 8007cc4:	b480      	push	{r7}
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	4b03      	ldr	r3, [pc, #12]	; (8007cd8 <getAnalogValue1+0x14>)
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	20004cf6 	.word	0x20004cf6

08007cdc <getAnalogValue2>:
uint16_t getAnalogValue2(void){return analogValue2;}
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	4b03      	ldr	r3, [pc, #12]	; (8007cf0 <getAnalogValue2+0x14>)
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	20004cf4 	.word	0x20004cf4

08007cf4 <valuesMap>:
 * @param inMax -> input interval maximum value
 * @param outMin -> output interval minumum value
 * @param outMax -> output interval maximum value
 * @return output value
 */
uint16_t valuesMap(uint16_t inValue, uint16_t inMin, uint16_t inMax, uint16_t outMin, uint16_t outMax) {
 8007cf4:	b490      	push	{r4, r7}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	461a      	mov	r2, r3
 8007d02:	4623      	mov	r3, r4
 8007d04:	80fb      	strh	r3, [r7, #6]
 8007d06:	4603      	mov	r3, r0
 8007d08:	80bb      	strh	r3, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	807b      	strh	r3, [r7, #2]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	803b      	strh	r3, [r7, #0]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 8007d12:	88fa      	ldrh	r2, [r7, #6]
 8007d14:	88bb      	ldrh	r3, [r7, #4]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	8a39      	ldrh	r1, [r7, #16]
 8007d1a:	883a      	ldrh	r2, [r7, #0]
 8007d1c:	1a8a      	subs	r2, r1, r2
 8007d1e:	fb02 f203 	mul.w	r2, r2, r3
 8007d22:	8879      	ldrh	r1, [r7, #2]
 8007d24:	88bb      	ldrh	r3, [r7, #4]
 8007d26:	1acb      	subs	r3, r1, r3
 8007d28:	fb92 f3f3 	sdiv	r3, r2, r3
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	883b      	ldrh	r3, [r7, #0]
 8007d30:	4413      	add	r3, r2
 8007d32:	b29b      	uxth	r3, r3
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc90      	pop	{r4, r7}
 8007d3c:	4770      	bx	lr
	...

08007d40 <selectButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t selectButton_Listenner_For_MenuControl(void) {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
	if(READ_SELECT_BTN){
 8007d44:	2101      	movs	r1, #1
 8007d46:	480f      	ldr	r0, [pc, #60]	; (8007d84 <selectButton_Listenner_For_MenuControl+0x44>)
 8007d48:	f7fa fc90 	bl	800266c <HAL_GPIO_ReadPin>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d015      	beq.n	8007d7e <selectButton_Listenner_For_MenuControl+0x3e>
		if(selectbtncounter>=BTN_LONG_PRESS_TIME){ selectbtncounter=0;return 2;}
 8007d52:	4b0d      	ldr	r3, [pc, #52]	; (8007d88 <selectButton_Listenner_For_MenuControl+0x48>)
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007d5a:	d304      	bcc.n	8007d66 <selectButton_Listenner_For_MenuControl+0x26>
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <selectButton_Listenner_For_MenuControl+0x48>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	801a      	strh	r2, [r3, #0]
 8007d62:	2302      	movs	r3, #2
 8007d64:	e00c      	b.n	8007d80 <selectButton_Listenner_For_MenuControl+0x40>
		if(selectbtncounter>=BTN_SHORT_PRESS_TIME){ selectbtncounter=0;return 1;}
 8007d66:	4b08      	ldr	r3, [pc, #32]	; (8007d88 <selectButton_Listenner_For_MenuControl+0x48>)
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	2b09      	cmp	r3, #9
 8007d6c:	d904      	bls.n	8007d78 <selectButton_Listenner_For_MenuControl+0x38>
 8007d6e:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <selectButton_Listenner_For_MenuControl+0x48>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	801a      	strh	r2, [r3, #0]
 8007d74:	2301      	movs	r3, #1
 8007d76:	e003      	b.n	8007d80 <selectButton_Listenner_For_MenuControl+0x40>
		selectbtncounter=0;
 8007d78:	4b03      	ldr	r3, [pc, #12]	; (8007d88 <selectButton_Listenner_For_MenuControl+0x48>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	40020400 	.word	0x40020400
 8007d88:	200049c8 	.word	0x200049c8

08007d8c <plusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t plusButton_Listenner_For_MenuControl(void) {
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	af00      	add	r7, sp, #0

	if(READ_PLUS_BTN){
 8007d90:	2102      	movs	r1, #2
 8007d92:	480f      	ldr	r0, [pc, #60]	; (8007dd0 <plusButton_Listenner_For_MenuControl+0x44>)
 8007d94:	f7fa fc6a 	bl	800266c <HAL_GPIO_ReadPin>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d015      	beq.n	8007dca <plusButton_Listenner_For_MenuControl+0x3e>
		if(plusbtncounter>=BTN_LONG_PRESS_TIME){ plusbtncounter=0;return 2;}
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	; (8007dd4 <plusButton_Listenner_For_MenuControl+0x48>)
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007da6:	d304      	bcc.n	8007db2 <plusButton_Listenner_For_MenuControl+0x26>
 8007da8:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <plusButton_Listenner_For_MenuControl+0x48>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	801a      	strh	r2, [r3, #0]
 8007dae:	2302      	movs	r3, #2
 8007db0:	e00c      	b.n	8007dcc <plusButton_Listenner_For_MenuControl+0x40>
		if(plusbtncounter>=BTN_SHORT_PRESS_TIME){ plusbtncounter=0;return 1;}
 8007db2:	4b08      	ldr	r3, [pc, #32]	; (8007dd4 <plusButton_Listenner_For_MenuControl+0x48>)
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	2b09      	cmp	r3, #9
 8007db8:	d904      	bls.n	8007dc4 <plusButton_Listenner_For_MenuControl+0x38>
 8007dba:	4b06      	ldr	r3, [pc, #24]	; (8007dd4 <plusButton_Listenner_For_MenuControl+0x48>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	801a      	strh	r2, [r3, #0]
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e003      	b.n	8007dcc <plusButton_Listenner_For_MenuControl+0x40>
		plusbtncounter=0;
 8007dc4:	4b03      	ldr	r3, [pc, #12]	; (8007dd4 <plusButton_Listenner_For_MenuControl+0x48>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	40020400 	.word	0x40020400
 8007dd4:	200049ca 	.word	0x200049ca

08007dd8 <minusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t minusButton_Listenner_For_MenuControl(void) {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
	if(READ_MINUS_BTN){
 8007ddc:	2120      	movs	r1, #32
 8007dde:	480f      	ldr	r0, [pc, #60]	; (8007e1c <minusButton_Listenner_For_MenuControl+0x44>)
 8007de0:	f7fa fc44 	bl	800266c <HAL_GPIO_ReadPin>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d015      	beq.n	8007e16 <minusButton_Listenner_For_MenuControl+0x3e>
		if(minusbtncounter>=BTN_LONG_PRESS_TIME){ minusbtncounter=0;return 2;}
 8007dea:	4b0d      	ldr	r3, [pc, #52]	; (8007e20 <minusButton_Listenner_For_MenuControl+0x48>)
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007df2:	d304      	bcc.n	8007dfe <minusButton_Listenner_For_MenuControl+0x26>
 8007df4:	4b0a      	ldr	r3, [pc, #40]	; (8007e20 <minusButton_Listenner_For_MenuControl+0x48>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	801a      	strh	r2, [r3, #0]
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	e00c      	b.n	8007e18 <minusButton_Listenner_For_MenuControl+0x40>
		if(minusbtncounter>=BTN_SHORT_PRESS_TIME){ minusbtncounter=0;return 1;}
 8007dfe:	4b08      	ldr	r3, [pc, #32]	; (8007e20 <minusButton_Listenner_For_MenuControl+0x48>)
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	2b09      	cmp	r3, #9
 8007e04:	d904      	bls.n	8007e10 <minusButton_Listenner_For_MenuControl+0x38>
 8007e06:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <minusButton_Listenner_For_MenuControl+0x48>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	801a      	strh	r2, [r3, #0]
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e003      	b.n	8007e18 <minusButton_Listenner_For_MenuControl+0x40>
		minusbtncounter=0;
 8007e10:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <minusButton_Listenner_For_MenuControl+0x48>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	40020800 	.word	0x40020800
 8007e20:	200049cc 	.word	0x200049cc

08007e24 <btnParameterInit>:
/* @brief drivers parameter values initalize
 * @param none
 * @return none
 * */
void btnParameterInit(void){
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&BTNCOUNTER);
 8007e28:	4811      	ldr	r0, [pc, #68]	; (8007e70 <btnParameterInit+0x4c>)
 8007e2a:	f7fb fe64 	bl	8003af6 <HAL_TIM_Base_Start_IT>
	drv1.angle=0;
 8007e2e:	4b11      	ldr	r3, [pc, #68]	; (8007e74 <btnParameterInit+0x50>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	809a      	strh	r2, [r3, #4]
	drv1.pid_kd=0;
 8007e34:	4b0f      	ldr	r3, [pc, #60]	; (8007e74 <btnParameterInit+0x50>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	701a      	strb	r2, [r3, #0]
	drv1.pid_ki=0;
 8007e3a:	4b0e      	ldr	r3, [pc, #56]	; (8007e74 <btnParameterInit+0x50>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	705a      	strb	r2, [r3, #1]
	drv1.pid_kp=0;
 8007e40:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <btnParameterInit+0x50>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	709a      	strb	r2, [r3, #2]
	drv1.factor=0;
 8007e46:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <btnParameterInit+0x50>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	70da      	strb	r2, [r3, #3]
	drv2.angle=0;
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <btnParameterInit+0x54>)
 8007e4e:	2200      	movs	r2, #0
 8007e50:	809a      	strh	r2, [r3, #4]
	drv2.pid_kd=1;
 8007e52:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <btnParameterInit+0x54>)
 8007e54:	2201      	movs	r2, #1
 8007e56:	701a      	strb	r2, [r3, #0]
	drv2.pid_ki=1;
 8007e58:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <btnParameterInit+0x54>)
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	705a      	strb	r2, [r3, #1]
	drv2.pid_kp=10;
 8007e5e:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <btnParameterInit+0x54>)
 8007e60:	220a      	movs	r2, #10
 8007e62:	709a      	strb	r2, [r3, #2]
	drv2.factor=5;
 8007e64:	4b04      	ldr	r3, [pc, #16]	; (8007e78 <btnParameterInit+0x54>)
 8007e66:	2205      	movs	r2, #5
 8007e68:	70da      	strb	r2, [r3, #3]
}
 8007e6a:	bf00      	nop
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	20004c30 	.word	0x20004c30
 8007e74:	20004cf8 	.word	0x20004cf8
 8007e78:	20004d00 	.word	0x20004d00

08007e7c <setDriver1AngleValue>:
/* @brief set the angle to motor driver 1 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver1AngleValue(uint16_t angle){
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	80fb      	strh	r3, [r7, #6]
	drv1.angle=angle;
 8007e86:	4a04      	ldr	r2, [pc, #16]	; (8007e98 <setDriver1AngleValue+0x1c>)
 8007e88:	88fb      	ldrh	r3, [r7, #6]
 8007e8a:	8093      	strh	r3, [r2, #4]
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	20004cf8 	.word	0x20004cf8

08007e9c <setDriver2AngleValue>:
/* @brief set the angle to motor driver 2 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver2AngleValue(uint16_t angle){
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	80fb      	strh	r3, [r7, #6]
	drv2.angle=angle;
 8007ea6:	4a04      	ldr	r2, [pc, #16]	; (8007eb8 <setDriver2AngleValue+0x1c>)
 8007ea8:	88fb      	ldrh	r3, [r7, #6]
 8007eaa:	8093      	strh	r3, [r2, #4]
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	20004d00 	.word	0x20004d00

08007ebc <buttonController>:
/* @brief controlling and sending values of drivers
 * @param none
 * @return none
 * */
void buttonController(void){
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
	static bool selectedMDI=true; //selected motor driver interface
	static uint8_t selectBtnListenner=0,plusBtnListenner=0,minusBtnListenner=0;
	static item=0;
	if(selectedMDI){
 8007ec0:	4b98      	ldr	r3, [pc, #608]	; (8008124 <buttonController+0x268>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 80be 	beq.w	8008046 <buttonController+0x18a>
		if(2==selectBtnListenner){ selectedMDI=false; selectedLcd=1; item=0;}
 8007eca:	4b97      	ldr	r3, [pc, #604]	; (8008128 <buttonController+0x26c>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d108      	bne.n	8007ee4 <buttonController+0x28>
 8007ed2:	4b94      	ldr	r3, [pc, #592]	; (8008124 <buttonController+0x268>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	701a      	strb	r2, [r3, #0]
 8007ed8:	4b94      	ldr	r3, [pc, #592]	; (800812c <buttonController+0x270>)
 8007eda:	2201      	movs	r2, #1
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	4b94      	ldr	r3, [pc, #592]	; (8008130 <buttonController+0x274>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 8007ee4:	4b90      	ldr	r3, [pc, #576]	; (8008128 <buttonController+0x26c>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d110      	bne.n	8007f0e <buttonController+0x52>
			if(item<ITEM_MAX)item++;
 8007eec:	4b90      	ldr	r3, [pc, #576]	; (8008130 <buttonController+0x274>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	dc05      	bgt.n	8007f00 <buttonController+0x44>
 8007ef4:	4b8e      	ldr	r3, [pc, #568]	; (8008130 <buttonController+0x274>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	4a8d      	ldr	r2, [pc, #564]	; (8008130 <buttonController+0x274>)
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	e006      	b.n	8007f0e <buttonController+0x52>
			else if(item==ITEM_MAX)item=0;
 8007f00:	4b8b      	ldr	r3, [pc, #556]	; (8008130 <buttonController+0x274>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d102      	bne.n	8007f0e <buttonController+0x52>
 8007f08:	4b89      	ldr	r3, [pc, #548]	; (8008130 <buttonController+0x274>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	601a      	str	r2, [r3, #0]
		}
		if(2==plusBtnListenner)selectedLcdItem=0;
 8007f0e:	4b89      	ldr	r3, [pc, #548]	; (8008134 <buttonController+0x278>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d102      	bne.n	8007f1c <buttonController+0x60>
 8007f16:	4b88      	ldr	r3, [pc, #544]	; (8008138 <buttonController+0x27c>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	701a      	strb	r2, [r3, #0]
		if(1==plusBtnListenner){
 8007f1c:	4b85      	ldr	r3, [pc, #532]	; (8008134 <buttonController+0x278>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d142      	bne.n	8007faa <buttonController+0xee>
			switch(item){
 8007f24:	4b82      	ldr	r3, [pc, #520]	; (8008130 <buttonController+0x274>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d83e      	bhi.n	8007faa <buttonController+0xee>
 8007f2c:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <buttonController+0x78>)
 8007f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f32:	bf00      	nop
 8007f34:	08007f45 	.word	0x08007f45
 8007f38:	08007f5b 	.word	0x08007f5b
 8007f3c:	08007f71 	.word	0x08007f71
 8007f40:	08007f87 	.word	0x08007f87
			case 0: if(drv1.pid_kd<255) drv1.pid_kp++; break;
 8007f44:	4b7d      	ldr	r3, [pc, #500]	; (800813c <buttonController+0x280>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2bff      	cmp	r3, #255	; 0xff
 8007f4a:	d027      	beq.n	8007f9c <buttonController+0xe0>
 8007f4c:	4b7b      	ldr	r3, [pc, #492]	; (800813c <buttonController+0x280>)
 8007f4e:	789b      	ldrb	r3, [r3, #2]
 8007f50:	3301      	adds	r3, #1
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	4b79      	ldr	r3, [pc, #484]	; (800813c <buttonController+0x280>)
 8007f56:	709a      	strb	r2, [r3, #2]
 8007f58:	e020      	b.n	8007f9c <buttonController+0xe0>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 8007f5a:	4b78      	ldr	r3, [pc, #480]	; (800813c <buttonController+0x280>)
 8007f5c:	785b      	ldrb	r3, [r3, #1]
 8007f5e:	2bff      	cmp	r3, #255	; 0xff
 8007f60:	d01e      	beq.n	8007fa0 <buttonController+0xe4>
 8007f62:	4b76      	ldr	r3, [pc, #472]	; (800813c <buttonController+0x280>)
 8007f64:	785b      	ldrb	r3, [r3, #1]
 8007f66:	3301      	adds	r3, #1
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	4b74      	ldr	r3, [pc, #464]	; (800813c <buttonController+0x280>)
 8007f6c:	705a      	strb	r2, [r3, #1]
 8007f6e:	e017      	b.n	8007fa0 <buttonController+0xe4>
			case 2: if(drv1.pid_kp<255) drv1.pid_kd++; break;
 8007f70:	4b72      	ldr	r3, [pc, #456]	; (800813c <buttonController+0x280>)
 8007f72:	789b      	ldrb	r3, [r3, #2]
 8007f74:	2bff      	cmp	r3, #255	; 0xff
 8007f76:	d015      	beq.n	8007fa4 <buttonController+0xe8>
 8007f78:	4b70      	ldr	r3, [pc, #448]	; (800813c <buttonController+0x280>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	4b6e      	ldr	r3, [pc, #440]	; (800813c <buttonController+0x280>)
 8007f82:	701a      	strb	r2, [r3, #0]
 8007f84:	e00e      	b.n	8007fa4 <buttonController+0xe8>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 8007f86:	4b6d      	ldr	r3, [pc, #436]	; (800813c <buttonController+0x280>)
 8007f88:	78db      	ldrb	r3, [r3, #3]
 8007f8a:	2bff      	cmp	r3, #255	; 0xff
 8007f8c:	d00c      	beq.n	8007fa8 <buttonController+0xec>
 8007f8e:	4b6b      	ldr	r3, [pc, #428]	; (800813c <buttonController+0x280>)
 8007f90:	78db      	ldrb	r3, [r3, #3]
 8007f92:	3301      	adds	r3, #1
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	4b69      	ldr	r3, [pc, #420]	; (800813c <buttonController+0x280>)
 8007f98:	70da      	strb	r2, [r3, #3]
 8007f9a:	e005      	b.n	8007fa8 <buttonController+0xec>
			case 0: if(drv1.pid_kd<255) drv1.pid_kp++; break;
 8007f9c:	bf00      	nop
 8007f9e:	e004      	b.n	8007faa <buttonController+0xee>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 8007fa0:	bf00      	nop
 8007fa2:	e002      	b.n	8007faa <buttonController+0xee>
			case 2: if(drv1.pid_kp<255) drv1.pid_kd++; break;
 8007fa4:	bf00      	nop
 8007fa6:	e000      	b.n	8007faa <buttonController+0xee>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 8007fa8:	bf00      	nop
			}
		}
		if(2==minusBtnListenner)selectedLcdItem=1;
 8007faa:	4b65      	ldr	r3, [pc, #404]	; (8008140 <buttonController+0x284>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d102      	bne.n	8007fb8 <buttonController+0xfc>
 8007fb2:	4b61      	ldr	r3, [pc, #388]	; (8008138 <buttonController+0x27c>)
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	701a      	strb	r2, [r3, #0]
		if(1==minusBtnListenner){
 8007fb8:	4b61      	ldr	r3, [pc, #388]	; (8008140 <buttonController+0x284>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	f040 811a 	bne.w	80081f6 <buttonController+0x33a>
			switch(item){
 8007fc2:	4b5b      	ldr	r3, [pc, #364]	; (8008130 <buttonController+0x274>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	f200 8115 	bhi.w	80081f6 <buttonController+0x33a>
 8007fcc:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <buttonController+0x118>)
 8007fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd2:	bf00      	nop
 8007fd4:	08007fe5 	.word	0x08007fe5
 8007fd8:	08007ffd 	.word	0x08007ffd
 8007fdc:	08008015 	.word	0x08008015
 8007fe0:	0800802d 	.word	0x0800802d
			case 0: if(drv1.pid_kd>0) drv1.pid_kp--; break;
 8007fe4:	4b55      	ldr	r3, [pc, #340]	; (800813c <buttonController+0x280>)
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 80f5 	beq.w	80081d8 <buttonController+0x31c>
 8007fee:	4b53      	ldr	r3, [pc, #332]	; (800813c <buttonController+0x280>)
 8007ff0:	789b      	ldrb	r3, [r3, #2]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	4b51      	ldr	r3, [pc, #324]	; (800813c <buttonController+0x280>)
 8007ff8:	709a      	strb	r2, [r3, #2]
 8007ffa:	e0ed      	b.n	80081d8 <buttonController+0x31c>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 8007ffc:	4b4f      	ldr	r3, [pc, #316]	; (800813c <buttonController+0x280>)
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 80eb 	beq.w	80081dc <buttonController+0x320>
 8008006:	4b4d      	ldr	r3, [pc, #308]	; (800813c <buttonController+0x280>)
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	3b01      	subs	r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	4b4b      	ldr	r3, [pc, #300]	; (800813c <buttonController+0x280>)
 8008010:	705a      	strb	r2, [r3, #1]
 8008012:	e0e3      	b.n	80081dc <buttonController+0x320>
			case 2: if(drv1.pid_kp>0) drv1.pid_kd--; break;
 8008014:	4b49      	ldr	r3, [pc, #292]	; (800813c <buttonController+0x280>)
 8008016:	789b      	ldrb	r3, [r3, #2]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 80e1 	beq.w	80081e0 <buttonController+0x324>
 800801e:	4b47      	ldr	r3, [pc, #284]	; (800813c <buttonController+0x280>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	3b01      	subs	r3, #1
 8008024:	b2da      	uxtb	r2, r3
 8008026:	4b45      	ldr	r3, [pc, #276]	; (800813c <buttonController+0x280>)
 8008028:	701a      	strb	r2, [r3, #0]
 800802a:	e0d9      	b.n	80081e0 <buttonController+0x324>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 800802c:	4b43      	ldr	r3, [pc, #268]	; (800813c <buttonController+0x280>)
 800802e:	78db      	ldrb	r3, [r3, #3]
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 80d7 	beq.w	80081e4 <buttonController+0x328>
 8008036:	4b41      	ldr	r3, [pc, #260]	; (800813c <buttonController+0x280>)
 8008038:	78db      	ldrb	r3, [r3, #3]
 800803a:	3b01      	subs	r3, #1
 800803c:	b2da      	uxtb	r2, r3
 800803e:	4b3f      	ldr	r3, [pc, #252]	; (800813c <buttonController+0x280>)
 8008040:	70da      	strb	r2, [r3, #3]
 8008042:	bf00      	nop
 8008044:	e0ce      	b.n	80081e4 <buttonController+0x328>
			}
		}
	}
	else{
		if(2==selectBtnListenner){ selectedMDI=true; selectedLcd=0; item=0;}
 8008046:	4b38      	ldr	r3, [pc, #224]	; (8008128 <buttonController+0x26c>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d108      	bne.n	8008060 <buttonController+0x1a4>
 800804e:	4b35      	ldr	r3, [pc, #212]	; (8008124 <buttonController+0x268>)
 8008050:	2201      	movs	r2, #1
 8008052:	701a      	strb	r2, [r3, #0]
 8008054:	4b35      	ldr	r3, [pc, #212]	; (800812c <buttonController+0x270>)
 8008056:	2200      	movs	r2, #0
 8008058:	701a      	strb	r2, [r3, #0]
 800805a:	4b35      	ldr	r3, [pc, #212]	; (8008130 <buttonController+0x274>)
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 8008060:	4b31      	ldr	r3, [pc, #196]	; (8008128 <buttonController+0x26c>)
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d110      	bne.n	800808a <buttonController+0x1ce>
			if(item<ITEM_MAX)item++;
 8008068:	4b31      	ldr	r3, [pc, #196]	; (8008130 <buttonController+0x274>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b02      	cmp	r3, #2
 800806e:	dc05      	bgt.n	800807c <buttonController+0x1c0>
 8008070:	4b2f      	ldr	r3, [pc, #188]	; (8008130 <buttonController+0x274>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3301      	adds	r3, #1
 8008076:	4a2e      	ldr	r2, [pc, #184]	; (8008130 <buttonController+0x274>)
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	e006      	b.n	800808a <buttonController+0x1ce>
			else if(item==ITEM_MAX)item=0;
 800807c:	4b2c      	ldr	r3, [pc, #176]	; (8008130 <buttonController+0x274>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b03      	cmp	r3, #3
 8008082:	d102      	bne.n	800808a <buttonController+0x1ce>
 8008084:	4b2a      	ldr	r3, [pc, #168]	; (8008130 <buttonController+0x274>)
 8008086:	2200      	movs	r2, #0
 8008088:	601a      	str	r2, [r3, #0]
		}
		if(2==plusBtnListenner)selectedLcdItem=0;
 800808a:	4b2a      	ldr	r3, [pc, #168]	; (8008134 <buttonController+0x278>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d102      	bne.n	8008098 <buttonController+0x1dc>
 8008092:	4b29      	ldr	r3, [pc, #164]	; (8008138 <buttonController+0x27c>)
 8008094:	2200      	movs	r2, #0
 8008096:	701a      	strb	r2, [r3, #0]
		if(1==plusBtnListenner){
 8008098:	4b26      	ldr	r3, [pc, #152]	; (8008134 <buttonController+0x278>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d154      	bne.n	800814a <buttonController+0x28e>
			switch(item){
 80080a0:	4b23      	ldr	r3, [pc, #140]	; (8008130 <buttonController+0x274>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d850      	bhi.n	800814a <buttonController+0x28e>
 80080a8:	a201      	add	r2, pc, #4	; (adr r2, 80080b0 <buttonController+0x1f4>)
 80080aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ae:	bf00      	nop
 80080b0:	080080c1 	.word	0x080080c1
 80080b4:	080080d7 	.word	0x080080d7
 80080b8:	080080ed 	.word	0x080080ed
 80080bc:	08008103 	.word	0x08008103
			case 0: if(drv2.pid_kd<255) drv2.pid_kp++; break;
 80080c0:	4b20      	ldr	r3, [pc, #128]	; (8008144 <buttonController+0x288>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2bff      	cmp	r3, #255	; 0xff
 80080c6:	d027      	beq.n	8008118 <buttonController+0x25c>
 80080c8:	4b1e      	ldr	r3, [pc, #120]	; (8008144 <buttonController+0x288>)
 80080ca:	789b      	ldrb	r3, [r3, #2]
 80080cc:	3301      	adds	r3, #1
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	4b1c      	ldr	r3, [pc, #112]	; (8008144 <buttonController+0x288>)
 80080d2:	709a      	strb	r2, [r3, #2]
 80080d4:	e020      	b.n	8008118 <buttonController+0x25c>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 80080d6:	4b1b      	ldr	r3, [pc, #108]	; (8008144 <buttonController+0x288>)
 80080d8:	785b      	ldrb	r3, [r3, #1]
 80080da:	2bff      	cmp	r3, #255	; 0xff
 80080dc:	d01e      	beq.n	800811c <buttonController+0x260>
 80080de:	4b19      	ldr	r3, [pc, #100]	; (8008144 <buttonController+0x288>)
 80080e0:	785b      	ldrb	r3, [r3, #1]
 80080e2:	3301      	adds	r3, #1
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	4b17      	ldr	r3, [pc, #92]	; (8008144 <buttonController+0x288>)
 80080e8:	705a      	strb	r2, [r3, #1]
 80080ea:	e017      	b.n	800811c <buttonController+0x260>
			case 2: if(drv2.pid_kp<255) drv2.pid_kd++; break;
 80080ec:	4b15      	ldr	r3, [pc, #84]	; (8008144 <buttonController+0x288>)
 80080ee:	789b      	ldrb	r3, [r3, #2]
 80080f0:	2bff      	cmp	r3, #255	; 0xff
 80080f2:	d015      	beq.n	8008120 <buttonController+0x264>
 80080f4:	4b13      	ldr	r3, [pc, #76]	; (8008144 <buttonController+0x288>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	4b11      	ldr	r3, [pc, #68]	; (8008144 <buttonController+0x288>)
 80080fe:	701a      	strb	r2, [r3, #0]
 8008100:	e00e      	b.n	8008120 <buttonController+0x264>
			case 3: if(drv2.factor<255) drv2.factor++; break;
 8008102:	4b10      	ldr	r3, [pc, #64]	; (8008144 <buttonController+0x288>)
 8008104:	78db      	ldrb	r3, [r3, #3]
 8008106:	2bff      	cmp	r3, #255	; 0xff
 8008108:	d01e      	beq.n	8008148 <buttonController+0x28c>
 800810a:	4b0e      	ldr	r3, [pc, #56]	; (8008144 <buttonController+0x288>)
 800810c:	78db      	ldrb	r3, [r3, #3]
 800810e:	3301      	adds	r3, #1
 8008110:	b2da      	uxtb	r2, r3
 8008112:	4b0c      	ldr	r3, [pc, #48]	; (8008144 <buttonController+0x288>)
 8008114:	70da      	strb	r2, [r3, #3]
 8008116:	e017      	b.n	8008148 <buttonController+0x28c>
			case 0: if(drv2.pid_kd<255) drv2.pid_kp++; break;
 8008118:	bf00      	nop
 800811a:	e016      	b.n	800814a <buttonController+0x28e>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 800811c:	bf00      	nop
 800811e:	e014      	b.n	800814a <buttonController+0x28e>
			case 2: if(drv2.pid_kp<255) drv2.pid_kd++; break;
 8008120:	bf00      	nop
 8008122:	e012      	b.n	800814a <buttonController+0x28e>
 8008124:	20000010 	.word	0x20000010
 8008128:	200049d0 	.word	0x200049d0
 800812c:	200049ce 	.word	0x200049ce
 8008130:	200049d4 	.word	0x200049d4
 8008134:	200049d8 	.word	0x200049d8
 8008138:	200049cf 	.word	0x200049cf
 800813c:	20004cf8 	.word	0x20004cf8
 8008140:	200049d9 	.word	0x200049d9
 8008144:	20004d00 	.word	0x20004d00
			case 3: if(drv2.factor<255) drv2.factor++; break;
 8008148:	bf00      	nop
			}
		}
		if(2==minusBtnListenner)selectedLcdItem=1;
 800814a:	4b35      	ldr	r3, [pc, #212]	; (8008220 <buttonController+0x364>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b02      	cmp	r3, #2
 8008150:	d102      	bne.n	8008158 <buttonController+0x29c>
 8008152:	4b34      	ldr	r3, [pc, #208]	; (8008224 <buttonController+0x368>)
 8008154:	2201      	movs	r2, #1
 8008156:	701a      	strb	r2, [r3, #0]
		if(1==minusBtnListenner){
 8008158:	4b31      	ldr	r3, [pc, #196]	; (8008220 <buttonController+0x364>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d14a      	bne.n	80081f6 <buttonController+0x33a>
			switch(item){
 8008160:	4b31      	ldr	r3, [pc, #196]	; (8008228 <buttonController+0x36c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b03      	cmp	r3, #3
 8008166:	d846      	bhi.n	80081f6 <buttonController+0x33a>
 8008168:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <buttonController+0x2b4>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	08008181 	.word	0x08008181
 8008174:	08008197 	.word	0x08008197
 8008178:	080081ad 	.word	0x080081ad
 800817c:	080081c3 	.word	0x080081c3
			case 0: if(drv2.pid_kd>0) drv2.pid_kp--; break;
 8008180:	4b2a      	ldr	r3, [pc, #168]	; (800822c <buttonController+0x370>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d02f      	beq.n	80081e8 <buttonController+0x32c>
 8008188:	4b28      	ldr	r3, [pc, #160]	; (800822c <buttonController+0x370>)
 800818a:	789b      	ldrb	r3, [r3, #2]
 800818c:	3b01      	subs	r3, #1
 800818e:	b2da      	uxtb	r2, r3
 8008190:	4b26      	ldr	r3, [pc, #152]	; (800822c <buttonController+0x370>)
 8008192:	709a      	strb	r2, [r3, #2]
 8008194:	e028      	b.n	80081e8 <buttonController+0x32c>
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 8008196:	4b25      	ldr	r3, [pc, #148]	; (800822c <buttonController+0x370>)
 8008198:	785b      	ldrb	r3, [r3, #1]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d026      	beq.n	80081ec <buttonController+0x330>
 800819e:	4b23      	ldr	r3, [pc, #140]	; (800822c <buttonController+0x370>)
 80081a0:	785b      	ldrb	r3, [r3, #1]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	4b21      	ldr	r3, [pc, #132]	; (800822c <buttonController+0x370>)
 80081a8:	705a      	strb	r2, [r3, #1]
 80081aa:	e01f      	b.n	80081ec <buttonController+0x330>
			case 2: if(drv2.pid_kp>0) drv2.pid_kd--; break;
 80081ac:	4b1f      	ldr	r3, [pc, #124]	; (800822c <buttonController+0x370>)
 80081ae:	789b      	ldrb	r3, [r3, #2]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d01d      	beq.n	80081f0 <buttonController+0x334>
 80081b4:	4b1d      	ldr	r3, [pc, #116]	; (800822c <buttonController+0x370>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	4b1b      	ldr	r3, [pc, #108]	; (800822c <buttonController+0x370>)
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	e016      	b.n	80081f0 <buttonController+0x334>
			case 3: if(drv2.factor>0) drv2.factor--; break;
 80081c2:	4b1a      	ldr	r3, [pc, #104]	; (800822c <buttonController+0x370>)
 80081c4:	78db      	ldrb	r3, [r3, #3]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d014      	beq.n	80081f4 <buttonController+0x338>
 80081ca:	4b18      	ldr	r3, [pc, #96]	; (800822c <buttonController+0x370>)
 80081cc:	78db      	ldrb	r3, [r3, #3]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	4b16      	ldr	r3, [pc, #88]	; (800822c <buttonController+0x370>)
 80081d4:	70da      	strb	r2, [r3, #3]
 80081d6:	e00d      	b.n	80081f4 <buttonController+0x338>
			case 0: if(drv1.pid_kd>0) drv1.pid_kp--; break;
 80081d8:	bf00      	nop
 80081da:	e00c      	b.n	80081f6 <buttonController+0x33a>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 80081dc:	bf00      	nop
 80081de:	e00a      	b.n	80081f6 <buttonController+0x33a>
			case 2: if(drv1.pid_kp>0) drv1.pid_kd--; break;
 80081e0:	bf00      	nop
 80081e2:	e008      	b.n	80081f6 <buttonController+0x33a>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 80081e4:	bf00      	nop
 80081e6:	e006      	b.n	80081f6 <buttonController+0x33a>
			case 0: if(drv2.pid_kd>0) drv2.pid_kp--; break;
 80081e8:	bf00      	nop
 80081ea:	e004      	b.n	80081f6 <buttonController+0x33a>
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 80081ec:	bf00      	nop
 80081ee:	e002      	b.n	80081f6 <buttonController+0x33a>
			case 2: if(drv2.pid_kp>0) drv2.pid_kd--; break;
 80081f0:	bf00      	nop
 80081f2:	e000      	b.n	80081f6 <buttonController+0x33a>
			case 3: if(drv2.factor>0) drv2.factor--; break;
 80081f4:	bf00      	nop
			}
		}
	}

	selectBtnListenner=selectButton_Listenner_For_MenuControl();
 80081f6:	f7ff fda3 	bl	8007d40 <selectButton_Listenner_For_MenuControl>
 80081fa:	4603      	mov	r3, r0
 80081fc:	461a      	mov	r2, r3
 80081fe:	4b0c      	ldr	r3, [pc, #48]	; (8008230 <buttonController+0x374>)
 8008200:	701a      	strb	r2, [r3, #0]
	plusBtnListenner=plusButton_Listenner_For_MenuControl();
 8008202:	f7ff fdc3 	bl	8007d8c <plusButton_Listenner_For_MenuControl>
 8008206:	4603      	mov	r3, r0
 8008208:	461a      	mov	r2, r3
 800820a:	4b0a      	ldr	r3, [pc, #40]	; (8008234 <buttonController+0x378>)
 800820c:	701a      	strb	r2, [r3, #0]
	minusBtnListenner=minusButton_Listenner_For_MenuControl();
 800820e:	f7ff fde3 	bl	8007dd8 <minusButton_Listenner_For_MenuControl>
 8008212:	4603      	mov	r3, r0
 8008214:	461a      	mov	r2, r3
 8008216:	4b02      	ldr	r3, [pc, #8]	; (8008220 <buttonController+0x364>)
 8008218:	701a      	strb	r2, [r3, #0]
	//"drv1= %x - %x - %x - %x\n",drv1.pid_kd,drv1.pid_ki,drv1.pid_kp,drv1.factor
	//"drv2= %x - %x - %x - %x\n",drv2.pid_kd,drv2.pid_ki,drv2.pid_kp,drv2.factor

}
 800821a:	bf00      	nop
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	200049d9 	.word	0x200049d9
 8008224:	200049cf 	.word	0x200049cf
 8008228:	200049d4 	.word	0x200049d4
 800822c:	20004d00 	.word	0x20004d00
 8008230:	200049d0 	.word	0x200049d0
 8008234:	200049d8 	.word	0x200049d8

08008238 <transmissionDriver1>:
void transmissionDriver1(void){
 8008238:	b590      	push	{r4, r7, lr}
 800823a:	b083      	sub	sp, #12
 800823c:	af02      	add	r7, sp, #8
	MDI_sendDataChannel1Ver2(drv1.angle,drv1.pid_kp,drv1.pid_ki,drv1.pid_kd,drv1.factor);
 800823e:	4b09      	ldr	r3, [pc, #36]	; (8008264 <transmissionDriver1+0x2c>)
 8008240:	8898      	ldrh	r0, [r3, #4]
 8008242:	4b08      	ldr	r3, [pc, #32]	; (8008264 <transmissionDriver1+0x2c>)
 8008244:	7899      	ldrb	r1, [r3, #2]
 8008246:	4b07      	ldr	r3, [pc, #28]	; (8008264 <transmissionDriver1+0x2c>)
 8008248:	785a      	ldrb	r2, [r3, #1]
 800824a:	4b06      	ldr	r3, [pc, #24]	; (8008264 <transmissionDriver1+0x2c>)
 800824c:	781c      	ldrb	r4, [r3, #0]
 800824e:	4b05      	ldr	r3, [pc, #20]	; (8008264 <transmissionDriver1+0x2c>)
 8008250:	78db      	ldrb	r3, [r3, #3]
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	4623      	mov	r3, r4
 8008256:	f000 fef1 	bl	800903c <MDI_sendDataChannel1Ver2>
}
 800825a:	bf00      	nop
 800825c:	3704      	adds	r7, #4
 800825e:	46bd      	mov	sp, r7
 8008260:	bd90      	pop	{r4, r7, pc}
 8008262:	bf00      	nop
 8008264:	20004cf8 	.word	0x20004cf8

08008268 <transmissionDriver2>:
void transmissionDriver2(void){
 8008268:	b590      	push	{r4, r7, lr}
 800826a:	b083      	sub	sp, #12
 800826c:	af02      	add	r7, sp, #8
	MDI_sendDataChannel2Ver2(drv2.angle,drv2.pid_kp,drv2.pid_ki,drv2.pid_kd,drv2.factor);
 800826e:	4b09      	ldr	r3, [pc, #36]	; (8008294 <transmissionDriver2+0x2c>)
 8008270:	8898      	ldrh	r0, [r3, #4]
 8008272:	4b08      	ldr	r3, [pc, #32]	; (8008294 <transmissionDriver2+0x2c>)
 8008274:	7899      	ldrb	r1, [r3, #2]
 8008276:	4b07      	ldr	r3, [pc, #28]	; (8008294 <transmissionDriver2+0x2c>)
 8008278:	785a      	ldrb	r2, [r3, #1]
 800827a:	4b06      	ldr	r3, [pc, #24]	; (8008294 <transmissionDriver2+0x2c>)
 800827c:	781c      	ldrb	r4, [r3, #0]
 800827e:	4b05      	ldr	r3, [pc, #20]	; (8008294 <transmissionDriver2+0x2c>)
 8008280:	78db      	ldrb	r3, [r3, #3]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	4623      	mov	r3, r4
 8008286:	f000 ffdd 	bl	8009244 <MDI_sendDataChannel2Ver2>
}
 800828a:	bf00      	nop
 800828c:	3704      	adds	r7, #4
 800828e:	46bd      	mov	sp, r7
 8008290:	bd90      	pop	{r4, r7, pc}
 8008292:	bf00      	nop
 8008294:	20004d00 	.word	0x20004d00

08008298 <getDriver1TransmitVal>:
mD_interface getDriver1TransmitVal(void){
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
	return drv1;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a05      	ldr	r2, [pc, #20]	; (80082b8 <getDriver1TransmitVal+0x20>)
 80082a4:	6811      	ldr	r1, [r2, #0]
 80082a6:	6019      	str	r1, [r3, #0]
 80082a8:	8892      	ldrh	r2, [r2, #4]
 80082aa:	809a      	strh	r2, [r3, #4]
}
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	20004cf8 	.word	0x20004cf8

080082bc <getDriver2TransmitVal>:
mD_interface getDriver2TransmitVal(void){
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
	return drv2;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a05      	ldr	r2, [pc, #20]	; (80082dc <getDriver2TransmitVal+0x20>)
 80082c8:	6811      	ldr	r1, [r2, #0]
 80082ca:	6019      	str	r1, [r3, #0]
 80082cc:	8892      	ldrh	r2, [r2, #4]
 80082ce:	809a      	strh	r2, [r3, #4]
}
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	20004d00 	.word	0x20004d00

080082e0 <getSelectedLcdVal>:
uint8_t getSelectedLcdVal(void){return selectedLcd;}
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	4b03      	ldr	r3, [pc, #12]	; (80082f4 <getSelectedLcdVal+0x14>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	4618      	mov	r0, r3
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	200049ce 	.word	0x200049ce

080082f8 <getSelectedLcdItemVal>:
uint8_t getSelectedLcdItemVal(void){return selectedLcdItem;}
 80082f8:	b480      	push	{r7}
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	4b03      	ldr	r3, [pc, #12]	; (800830c <getSelectedLcdItemVal+0x14>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	4618      	mov	r0, r3
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	200049cf 	.word	0x200049cf

08008310 <lcd_Init>:

/* @brief lcd module initalize
 * @param none
 * @return none
 * */
void lcd_Init(void){
 8008310:	b590      	push	{r4, r7, lr}
 8008312:	b095      	sub	sp, #84	; 0x54
 8008314:	af14      	add	r7, sp, #80	; 0x50
	LCD_i2cDeviceCheck(LCD_I2C_CHANNEL1);
 8008316:	4c48      	ldr	r4, [pc, #288]	; (8008438 <lcd_Init+0x128>)
 8008318:	4668      	mov	r0, sp
 800831a:	f104 0310 	add.w	r3, r4, #16
 800831e:	2244      	movs	r2, #68	; 0x44
 8008320:	4619      	mov	r1, r3
 8008322:	f001 fa6d 	bl	8009800 <memcpy>
 8008326:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800832a:	f000 fb2f 	bl	800898c <LCD_i2cDeviceCheck>
	LCD_Init(LCD_I2C_CHANNEL1);
 800832e:	4c42      	ldr	r4, [pc, #264]	; (8008438 <lcd_Init+0x128>)
 8008330:	4668      	mov	r0, sp
 8008332:	f104 0310 	add.w	r3, r4, #16
 8008336:	2244      	movs	r2, #68	; 0x44
 8008338:	4619      	mov	r1, r3
 800833a:	f001 fa61 	bl	8009800 <memcpy>
 800833e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008342:	f000 fde5 	bl	8008f10 <LCD_Init>
	LCD_BackLight(LCD_I2C_CHANNEL1,LCD_BL_ON);
 8008346:	4c3c      	ldr	r4, [pc, #240]	; (8008438 <lcd_Init+0x128>)
 8008348:	2308      	movs	r3, #8
 800834a:	9311      	str	r3, [sp, #68]	; 0x44
 800834c:	4668      	mov	r0, sp
 800834e:	f104 0310 	add.w	r3, r4, #16
 8008352:	2244      	movs	r2, #68	; 0x44
 8008354:	4619      	mov	r1, r3
 8008356:	f001 fa53 	bl	8009800 <memcpy>
 800835a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800835e:	f000 fd9b 	bl	8008e98 <LCD_BackLight>
	LCD_SetCursor(LCD_I2C_CHANNEL1,0,0);
 8008362:	4c35      	ldr	r4, [pc, #212]	; (8008438 <lcd_Init+0x128>)
 8008364:	2300      	movs	r3, #0
 8008366:	9312      	str	r3, [sp, #72]	; 0x48
 8008368:	2300      	movs	r3, #0
 800836a:	9311      	str	r3, [sp, #68]	; 0x44
 800836c:	4668      	mov	r0, sp
 800836e:	f104 0310 	add.w	r3, r4, #16
 8008372:	2244      	movs	r2, #68	; 0x44
 8008374:	4619      	mov	r1, r3
 8008376:	f001 fa43 	bl	8009800 <memcpy>
 800837a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800837e:	f000 fc15 	bl	8008bac <LCD_SetCursor>

	LCD_Send_String(LCD_I2C_CHANNEL1,"TEST",STR_NOSLIDE);
 8008382:	4c2d      	ldr	r4, [pc, #180]	; (8008438 <lcd_Init+0x128>)
 8008384:	2300      	movs	r3, #0
 8008386:	9312      	str	r3, [sp, #72]	; 0x48
 8008388:	4b2c      	ldr	r3, [pc, #176]	; (800843c <lcd_Init+0x12c>)
 800838a:	9311      	str	r3, [sp, #68]	; 0x44
 800838c:	4668      	mov	r0, sp
 800838e:	f104 0310 	add.w	r3, r4, #16
 8008392:	2244      	movs	r2, #68	; 0x44
 8008394:	4619      	mov	r1, r3
 8008396:	f001 fa33 	bl	8009800 <memcpy>
 800839a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800839e:	f000 fc45 	bl	8008c2c <LCD_Send_String>

	LCD_i2cDeviceCheck(LCD_I2C_CHANNEL2);
 80083a2:	4c27      	ldr	r4, [pc, #156]	; (8008440 <lcd_Init+0x130>)
 80083a4:	4668      	mov	r0, sp
 80083a6:	f104 0310 	add.w	r3, r4, #16
 80083aa:	2244      	movs	r2, #68	; 0x44
 80083ac:	4619      	mov	r1, r3
 80083ae:	f001 fa27 	bl	8009800 <memcpy>
 80083b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80083b6:	f000 fae9 	bl	800898c <LCD_i2cDeviceCheck>
	LCD_Init(LCD_I2C_CHANNEL2);
 80083ba:	4c21      	ldr	r4, [pc, #132]	; (8008440 <lcd_Init+0x130>)
 80083bc:	4668      	mov	r0, sp
 80083be:	f104 0310 	add.w	r3, r4, #16
 80083c2:	2244      	movs	r2, #68	; 0x44
 80083c4:	4619      	mov	r1, r3
 80083c6:	f001 fa1b 	bl	8009800 <memcpy>
 80083ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80083ce:	f000 fd9f 	bl	8008f10 <LCD_Init>
	LCD_BackLight(LCD_I2C_CHANNEL2,LCD_BL_ON);
 80083d2:	4c1b      	ldr	r4, [pc, #108]	; (8008440 <lcd_Init+0x130>)
 80083d4:	2308      	movs	r3, #8
 80083d6:	9311      	str	r3, [sp, #68]	; 0x44
 80083d8:	4668      	mov	r0, sp
 80083da:	f104 0310 	add.w	r3, r4, #16
 80083de:	2244      	movs	r2, #68	; 0x44
 80083e0:	4619      	mov	r1, r3
 80083e2:	f001 fa0d 	bl	8009800 <memcpy>
 80083e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80083ea:	f000 fd55 	bl	8008e98 <LCD_BackLight>
	LCD_SetCursor(LCD_I2C_CHANNEL2,0,0);
 80083ee:	4c14      	ldr	r4, [pc, #80]	; (8008440 <lcd_Init+0x130>)
 80083f0:	2300      	movs	r3, #0
 80083f2:	9312      	str	r3, [sp, #72]	; 0x48
 80083f4:	2300      	movs	r3, #0
 80083f6:	9311      	str	r3, [sp, #68]	; 0x44
 80083f8:	4668      	mov	r0, sp
 80083fa:	f104 0310 	add.w	r3, r4, #16
 80083fe:	2244      	movs	r2, #68	; 0x44
 8008400:	4619      	mov	r1, r3
 8008402:	f001 f9fd 	bl	8009800 <memcpy>
 8008406:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800840a:	f000 fbcf 	bl	8008bac <LCD_SetCursor>

	LCD_Send_String(LCD_I2C_CHANNEL1,"TEST",STR_NOSLIDE);
 800840e:	4c0a      	ldr	r4, [pc, #40]	; (8008438 <lcd_Init+0x128>)
 8008410:	2300      	movs	r3, #0
 8008412:	9312      	str	r3, [sp, #72]	; 0x48
 8008414:	4b09      	ldr	r3, [pc, #36]	; (800843c <lcd_Init+0x12c>)
 8008416:	9311      	str	r3, [sp, #68]	; 0x44
 8008418:	4668      	mov	r0, sp
 800841a:	f104 0310 	add.w	r3, r4, #16
 800841e:	2244      	movs	r2, #68	; 0x44
 8008420:	4619      	mov	r1, r3
 8008422:	f001 f9ed 	bl	8009800 <memcpy>
 8008426:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800842a:	f000 fbff 	bl	8008c2c <LCD_Send_String>

}
 800842e:	bf00      	nop
 8008430:	3704      	adds	r7, #4
 8008432:	46bd      	mov	sp, r7
 8008434:	bd90      	pop	{r4, r7, pc}
 8008436:	bf00      	nop
 8008438:	20004a80 	.word	0x20004a80
 800843c:	0800a050 	.word	0x0800a050
 8008440:	20004ad4 	.word	0x20004ad4

08008444 <printToLcdDrv1Receive>:
void printToLcdDrv1Receive(mD_interface gets,bool isSelected){
 8008444:	b590      	push	{r4, r7, lr}
 8008446:	b099      	sub	sp, #100	; 0x64
 8008448:	af14      	add	r7, sp, #80	; 0x50
 800844a:	f107 0308 	add.w	r3, r7, #8
 800844e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008452:	4613      	mov	r3, r2
 8008454:	71fb      	strb	r3, [r7, #7]
	LCD_SetCursor(LCD_I2C_CHANNEL1,1,1);
 8008456:	4c30      	ldr	r4, [pc, #192]	; (8008518 <printToLcdDrv1Receive+0xd4>)
 8008458:	2301      	movs	r3, #1
 800845a:	9312      	str	r3, [sp, #72]	; 0x48
 800845c:	2301      	movs	r3, #1
 800845e:	9311      	str	r3, [sp, #68]	; 0x44
 8008460:	4668      	mov	r0, sp
 8008462:	f104 0310 	add.w	r3, r4, #16
 8008466:	2244      	movs	r2, #68	; 0x44
 8008468:	4619      	mov	r1, r3
 800846a:	f001 f9c9 	bl	8009800 <memcpy>
 800846e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008472:	f000 fb9b 	bl	8008bac <LCD_SetCursor>
	if(isSelected)	sprintf(lcdBuff,"-Gln1-a:%03d p:%02x",gets.angle,gets.pid_kp);
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d007      	beq.n	800848c <printToLcdDrv1Receive+0x48>
 800847c:	89bb      	ldrh	r3, [r7, #12]
 800847e:	461a      	mov	r2, r3
 8008480:	7abb      	ldrb	r3, [r7, #10]
 8008482:	4926      	ldr	r1, [pc, #152]	; (800851c <printToLcdDrv1Receive+0xd8>)
 8008484:	4826      	ldr	r0, [pc, #152]	; (8008520 <printToLcdDrv1Receive+0xdc>)
 8008486:	f001 f9cf 	bl	8009828 <siprintf>
 800848a:	e006      	b.n	800849a <printToLcdDrv1Receive+0x56>
	else	sprintf(lcdBuff,"Gln1 a:%03d p:%02x",gets.angle,gets.pid_kp);
 800848c:	89bb      	ldrh	r3, [r7, #12]
 800848e:	461a      	mov	r2, r3
 8008490:	7abb      	ldrb	r3, [r7, #10]
 8008492:	4924      	ldr	r1, [pc, #144]	; (8008524 <printToLcdDrv1Receive+0xe0>)
 8008494:	4822      	ldr	r0, [pc, #136]	; (8008520 <printToLcdDrv1Receive+0xdc>)
 8008496:	f001 f9c7 	bl	8009828 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL1,lcdBuff,STR_NOSLIDE);
 800849a:	4c1f      	ldr	r4, [pc, #124]	; (8008518 <printToLcdDrv1Receive+0xd4>)
 800849c:	2300      	movs	r3, #0
 800849e:	9312      	str	r3, [sp, #72]	; 0x48
 80084a0:	4b1f      	ldr	r3, [pc, #124]	; (8008520 <printToLcdDrv1Receive+0xdc>)
 80084a2:	9311      	str	r3, [sp, #68]	; 0x44
 80084a4:	4668      	mov	r0, sp
 80084a6:	f104 0310 	add.w	r3, r4, #16
 80084aa:	2244      	movs	r2, #68	; 0x44
 80084ac:	4619      	mov	r1, r3
 80084ae:	f001 f9a7 	bl	8009800 <memcpy>
 80084b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80084b6:	f000 fbb9 	bl	8008c2c <LCD_Send_String>
	LCD_SetCursor(LCD_I2C_CHANNEL1,2,1);
 80084ba:	4c17      	ldr	r4, [pc, #92]	; (8008518 <printToLcdDrv1Receive+0xd4>)
 80084bc:	2301      	movs	r3, #1
 80084be:	9312      	str	r3, [sp, #72]	; 0x48
 80084c0:	2302      	movs	r3, #2
 80084c2:	9311      	str	r3, [sp, #68]	; 0x44
 80084c4:	4668      	mov	r0, sp
 80084c6:	f104 0310 	add.w	r3, r4, #16
 80084ca:	2244      	movs	r2, #68	; 0x44
 80084cc:	4619      	mov	r1, r3
 80084ce:	f001 f997 	bl	8009800 <memcpy>
 80084d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80084d6:	f000 fb69 	bl	8008bac <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x d:%02x f:%02x",gets.pid_ki,gets.pid_kd,gets.factor);
 80084da:	7a7b      	ldrb	r3, [r7, #9]
 80084dc:	461a      	mov	r2, r3
 80084de:	7a3b      	ldrb	r3, [r7, #8]
 80084e0:	4619      	mov	r1, r3
 80084e2:	7afb      	ldrb	r3, [r7, #11]
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	460b      	mov	r3, r1
 80084e8:	490f      	ldr	r1, [pc, #60]	; (8008528 <printToLcdDrv1Receive+0xe4>)
 80084ea:	480d      	ldr	r0, [pc, #52]	; (8008520 <printToLcdDrv1Receive+0xdc>)
 80084ec:	f001 f99c 	bl	8009828 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL1,lcdBuff,STR_NOSLIDE);
 80084f0:	4c09      	ldr	r4, [pc, #36]	; (8008518 <printToLcdDrv1Receive+0xd4>)
 80084f2:	2300      	movs	r3, #0
 80084f4:	9312      	str	r3, [sp, #72]	; 0x48
 80084f6:	4b0a      	ldr	r3, [pc, #40]	; (8008520 <printToLcdDrv1Receive+0xdc>)
 80084f8:	9311      	str	r3, [sp, #68]	; 0x44
 80084fa:	4668      	mov	r0, sp
 80084fc:	f104 0310 	add.w	r3, r4, #16
 8008500:	2244      	movs	r2, #68	; 0x44
 8008502:	4619      	mov	r1, r3
 8008504:	f001 f97c 	bl	8009800 <memcpy>
 8008508:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800850c:	f000 fb8e 	bl	8008c2c <LCD_Send_String>
}
 8008510:	bf00      	nop
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	bd90      	pop	{r4, r7, pc}
 8008518:	20004a80 	.word	0x20004a80
 800851c:	0800a058 	.word	0x0800a058
 8008520:	20004d08 	.word	0x20004d08
 8008524:	0800a06c 	.word	0x0800a06c
 8008528:	0800a080 	.word	0x0800a080

0800852c <printToLcdDrv1Transmit>:
void printToLcdDrv1Transmit(mD_interface sends,bool isSelected){
 800852c:	b590      	push	{r4, r7, lr}
 800852e:	b099      	sub	sp, #100	; 0x64
 8008530:	af14      	add	r7, sp, #80	; 0x50
 8008532:	f107 0308 	add.w	r3, r7, #8
 8008536:	e883 0003 	stmia.w	r3, {r0, r1}
 800853a:	4613      	mov	r3, r2
 800853c:	71fb      	strb	r3, [r7, #7]
	LCD_SetCursor(LCD_I2C_CHANNEL1,1,1);
 800853e:	4c30      	ldr	r4, [pc, #192]	; (8008600 <printToLcdDrv1Transmit+0xd4>)
 8008540:	2301      	movs	r3, #1
 8008542:	9312      	str	r3, [sp, #72]	; 0x48
 8008544:	2301      	movs	r3, #1
 8008546:	9311      	str	r3, [sp, #68]	; 0x44
 8008548:	4668      	mov	r0, sp
 800854a:	f104 0310 	add.w	r3, r4, #16
 800854e:	2244      	movs	r2, #68	; 0x44
 8008550:	4619      	mov	r1, r3
 8008552:	f001 f955 	bl	8009800 <memcpy>
 8008556:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800855a:	f000 fb27 	bl	8008bac <LCD_SetCursor>
	if(isSelected)	sprintf(lcdBuff,"-Gdn1-a:%03d p:%02x",sends.angle,sends.pid_kp);
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d007      	beq.n	8008574 <printToLcdDrv1Transmit+0x48>
 8008564:	89bb      	ldrh	r3, [r7, #12]
 8008566:	461a      	mov	r2, r3
 8008568:	7abb      	ldrb	r3, [r7, #10]
 800856a:	4926      	ldr	r1, [pc, #152]	; (8008604 <printToLcdDrv1Transmit+0xd8>)
 800856c:	4826      	ldr	r0, [pc, #152]	; (8008608 <printToLcdDrv1Transmit+0xdc>)
 800856e:	f001 f95b 	bl	8009828 <siprintf>
 8008572:	e006      	b.n	8008582 <printToLcdDrv1Transmit+0x56>
	else sprintf(lcdBuff,"Gdn1 a:%03d p:%02x",sends.angle,sends.pid_kp);
 8008574:	89bb      	ldrh	r3, [r7, #12]
 8008576:	461a      	mov	r2, r3
 8008578:	7abb      	ldrb	r3, [r7, #10]
 800857a:	4924      	ldr	r1, [pc, #144]	; (800860c <printToLcdDrv1Transmit+0xe0>)
 800857c:	4822      	ldr	r0, [pc, #136]	; (8008608 <printToLcdDrv1Transmit+0xdc>)
 800857e:	f001 f953 	bl	8009828 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL1,lcdBuff,STR_NOSLIDE);
 8008582:	4c1f      	ldr	r4, [pc, #124]	; (8008600 <printToLcdDrv1Transmit+0xd4>)
 8008584:	2300      	movs	r3, #0
 8008586:	9312      	str	r3, [sp, #72]	; 0x48
 8008588:	4b1f      	ldr	r3, [pc, #124]	; (8008608 <printToLcdDrv1Transmit+0xdc>)
 800858a:	9311      	str	r3, [sp, #68]	; 0x44
 800858c:	4668      	mov	r0, sp
 800858e:	f104 0310 	add.w	r3, r4, #16
 8008592:	2244      	movs	r2, #68	; 0x44
 8008594:	4619      	mov	r1, r3
 8008596:	f001 f933 	bl	8009800 <memcpy>
 800859a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800859e:	f000 fb45 	bl	8008c2c <LCD_Send_String>
	LCD_SetCursor(LCD_I2C_CHANNEL1,2,1);
 80085a2:	4c17      	ldr	r4, [pc, #92]	; (8008600 <printToLcdDrv1Transmit+0xd4>)
 80085a4:	2301      	movs	r3, #1
 80085a6:	9312      	str	r3, [sp, #72]	; 0x48
 80085a8:	2302      	movs	r3, #2
 80085aa:	9311      	str	r3, [sp, #68]	; 0x44
 80085ac:	4668      	mov	r0, sp
 80085ae:	f104 0310 	add.w	r3, r4, #16
 80085b2:	2244      	movs	r2, #68	; 0x44
 80085b4:	4619      	mov	r1, r3
 80085b6:	f001 f923 	bl	8009800 <memcpy>
 80085ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80085be:	f000 faf5 	bl	8008bac <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x d:%02x f:%02x",sends.pid_ki,sends.pid_kd,sends.factor);
 80085c2:	7a7b      	ldrb	r3, [r7, #9]
 80085c4:	461a      	mov	r2, r3
 80085c6:	7a3b      	ldrb	r3, [r7, #8]
 80085c8:	4619      	mov	r1, r3
 80085ca:	7afb      	ldrb	r3, [r7, #11]
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	460b      	mov	r3, r1
 80085d0:	490f      	ldr	r1, [pc, #60]	; (8008610 <printToLcdDrv1Transmit+0xe4>)
 80085d2:	480d      	ldr	r0, [pc, #52]	; (8008608 <printToLcdDrv1Transmit+0xdc>)
 80085d4:	f001 f928 	bl	8009828 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL1,lcdBuff,STR_NOSLIDE);
 80085d8:	4c09      	ldr	r4, [pc, #36]	; (8008600 <printToLcdDrv1Transmit+0xd4>)
 80085da:	2300      	movs	r3, #0
 80085dc:	9312      	str	r3, [sp, #72]	; 0x48
 80085de:	4b0a      	ldr	r3, [pc, #40]	; (8008608 <printToLcdDrv1Transmit+0xdc>)
 80085e0:	9311      	str	r3, [sp, #68]	; 0x44
 80085e2:	4668      	mov	r0, sp
 80085e4:	f104 0310 	add.w	r3, r4, #16
 80085e8:	2244      	movs	r2, #68	; 0x44
 80085ea:	4619      	mov	r1, r3
 80085ec:	f001 f908 	bl	8009800 <memcpy>
 80085f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80085f4:	f000 fb1a 	bl	8008c2c <LCD_Send_String>
}
 80085f8:	bf00      	nop
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd90      	pop	{r4, r7, pc}
 8008600:	20004a80 	.word	0x20004a80
 8008604:	0800a098 	.word	0x0800a098
 8008608:	20004d08 	.word	0x20004d08
 800860c:	0800a0ac 	.word	0x0800a0ac
 8008610:	0800a080 	.word	0x0800a080

08008614 <printToLcdDrv2Receive>:
void printToLcdDrv2Receive(mD_interface gets,bool isSelected){
 8008614:	b590      	push	{r4, r7, lr}
 8008616:	b099      	sub	sp, #100	; 0x64
 8008618:	af14      	add	r7, sp, #80	; 0x50
 800861a:	f107 0308 	add.w	r3, r7, #8
 800861e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008622:	4613      	mov	r3, r2
 8008624:	71fb      	strb	r3, [r7, #7]
	LCD_SetCursor(LCD_I2C_CHANNEL2,1,1);
 8008626:	4c30      	ldr	r4, [pc, #192]	; (80086e8 <printToLcdDrv2Receive+0xd4>)
 8008628:	2301      	movs	r3, #1
 800862a:	9312      	str	r3, [sp, #72]	; 0x48
 800862c:	2301      	movs	r3, #1
 800862e:	9311      	str	r3, [sp, #68]	; 0x44
 8008630:	4668      	mov	r0, sp
 8008632:	f104 0310 	add.w	r3, r4, #16
 8008636:	2244      	movs	r2, #68	; 0x44
 8008638:	4619      	mov	r1, r3
 800863a:	f001 f8e1 	bl	8009800 <memcpy>
 800863e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008642:	f000 fab3 	bl	8008bac <LCD_SetCursor>
	if(isSelected)	sprintf(lcdBuff,"-Gln2-a:%03d p:%02x",gets.angle,gets.pid_kp);
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d007      	beq.n	800865c <printToLcdDrv2Receive+0x48>
 800864c:	89bb      	ldrh	r3, [r7, #12]
 800864e:	461a      	mov	r2, r3
 8008650:	7abb      	ldrb	r3, [r7, #10]
 8008652:	4926      	ldr	r1, [pc, #152]	; (80086ec <printToLcdDrv2Receive+0xd8>)
 8008654:	4826      	ldr	r0, [pc, #152]	; (80086f0 <printToLcdDrv2Receive+0xdc>)
 8008656:	f001 f8e7 	bl	8009828 <siprintf>
 800865a:	e006      	b.n	800866a <printToLcdDrv2Receive+0x56>
	else	sprintf(lcdBuff,"Gln2 a:%03d p:%02x",gets.angle,gets.pid_kp);
 800865c:	89bb      	ldrh	r3, [r7, #12]
 800865e:	461a      	mov	r2, r3
 8008660:	7abb      	ldrb	r3, [r7, #10]
 8008662:	4924      	ldr	r1, [pc, #144]	; (80086f4 <printToLcdDrv2Receive+0xe0>)
 8008664:	4822      	ldr	r0, [pc, #136]	; (80086f0 <printToLcdDrv2Receive+0xdc>)
 8008666:	f001 f8df 	bl	8009828 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL2,lcdBuff,STR_NOSLIDE);
 800866a:	4c1f      	ldr	r4, [pc, #124]	; (80086e8 <printToLcdDrv2Receive+0xd4>)
 800866c:	2300      	movs	r3, #0
 800866e:	9312      	str	r3, [sp, #72]	; 0x48
 8008670:	4b1f      	ldr	r3, [pc, #124]	; (80086f0 <printToLcdDrv2Receive+0xdc>)
 8008672:	9311      	str	r3, [sp, #68]	; 0x44
 8008674:	4668      	mov	r0, sp
 8008676:	f104 0310 	add.w	r3, r4, #16
 800867a:	2244      	movs	r2, #68	; 0x44
 800867c:	4619      	mov	r1, r3
 800867e:	f001 f8bf 	bl	8009800 <memcpy>
 8008682:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008686:	f000 fad1 	bl	8008c2c <LCD_Send_String>
	LCD_SetCursor(LCD_I2C_CHANNEL2,2,1);
 800868a:	4c17      	ldr	r4, [pc, #92]	; (80086e8 <printToLcdDrv2Receive+0xd4>)
 800868c:	2301      	movs	r3, #1
 800868e:	9312      	str	r3, [sp, #72]	; 0x48
 8008690:	2302      	movs	r3, #2
 8008692:	9311      	str	r3, [sp, #68]	; 0x44
 8008694:	4668      	mov	r0, sp
 8008696:	f104 0310 	add.w	r3, r4, #16
 800869a:	2244      	movs	r2, #68	; 0x44
 800869c:	4619      	mov	r1, r3
 800869e:	f001 f8af 	bl	8009800 <memcpy>
 80086a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80086a6:	f000 fa81 	bl	8008bac <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x d:%02x f:%02x",gets.pid_ki,gets.pid_kd,gets.factor);
 80086aa:	7a7b      	ldrb	r3, [r7, #9]
 80086ac:	461a      	mov	r2, r3
 80086ae:	7a3b      	ldrb	r3, [r7, #8]
 80086b0:	4619      	mov	r1, r3
 80086b2:	7afb      	ldrb	r3, [r7, #11]
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	460b      	mov	r3, r1
 80086b8:	490f      	ldr	r1, [pc, #60]	; (80086f8 <printToLcdDrv2Receive+0xe4>)
 80086ba:	480d      	ldr	r0, [pc, #52]	; (80086f0 <printToLcdDrv2Receive+0xdc>)
 80086bc:	f001 f8b4 	bl	8009828 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL2,lcdBuff,STR_NOSLIDE);
 80086c0:	4c09      	ldr	r4, [pc, #36]	; (80086e8 <printToLcdDrv2Receive+0xd4>)
 80086c2:	2300      	movs	r3, #0
 80086c4:	9312      	str	r3, [sp, #72]	; 0x48
 80086c6:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <printToLcdDrv2Receive+0xdc>)
 80086c8:	9311      	str	r3, [sp, #68]	; 0x44
 80086ca:	4668      	mov	r0, sp
 80086cc:	f104 0310 	add.w	r3, r4, #16
 80086d0:	2244      	movs	r2, #68	; 0x44
 80086d2:	4619      	mov	r1, r3
 80086d4:	f001 f894 	bl	8009800 <memcpy>
 80086d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80086dc:	f000 faa6 	bl	8008c2c <LCD_Send_String>
}
 80086e0:	bf00      	nop
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd90      	pop	{r4, r7, pc}
 80086e8:	20004ad4 	.word	0x20004ad4
 80086ec:	0800a0c0 	.word	0x0800a0c0
 80086f0:	20004d08 	.word	0x20004d08
 80086f4:	0800a0d4 	.word	0x0800a0d4
 80086f8:	0800a080 	.word	0x0800a080

080086fc <printToLcdDrv2Transmit>:
void printToLcdDrv2Transmit(mD_interface sends,bool isSelected){
 80086fc:	b590      	push	{r4, r7, lr}
 80086fe:	b099      	sub	sp, #100	; 0x64
 8008700:	af14      	add	r7, sp, #80	; 0x50
 8008702:	f107 0308 	add.w	r3, r7, #8
 8008706:	e883 0003 	stmia.w	r3, {r0, r1}
 800870a:	4613      	mov	r3, r2
 800870c:	71fb      	strb	r3, [r7, #7]
	LCD_SetCursor(LCD_I2C_CHANNEL2,1,1);
 800870e:	4c30      	ldr	r4, [pc, #192]	; (80087d0 <printToLcdDrv2Transmit+0xd4>)
 8008710:	2301      	movs	r3, #1
 8008712:	9312      	str	r3, [sp, #72]	; 0x48
 8008714:	2301      	movs	r3, #1
 8008716:	9311      	str	r3, [sp, #68]	; 0x44
 8008718:	4668      	mov	r0, sp
 800871a:	f104 0310 	add.w	r3, r4, #16
 800871e:	2244      	movs	r2, #68	; 0x44
 8008720:	4619      	mov	r1, r3
 8008722:	f001 f86d 	bl	8009800 <memcpy>
 8008726:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800872a:	f000 fa3f 	bl	8008bac <LCD_SetCursor>
	if(isSelected)	sprintf(lcdBuff,"-Gdn2-a:%03d p:%02x",sends.angle,sends.pid_kp);
 800872e:	79fb      	ldrb	r3, [r7, #7]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d007      	beq.n	8008744 <printToLcdDrv2Transmit+0x48>
 8008734:	89bb      	ldrh	r3, [r7, #12]
 8008736:	461a      	mov	r2, r3
 8008738:	7abb      	ldrb	r3, [r7, #10]
 800873a:	4926      	ldr	r1, [pc, #152]	; (80087d4 <printToLcdDrv2Transmit+0xd8>)
 800873c:	4826      	ldr	r0, [pc, #152]	; (80087d8 <printToLcdDrv2Transmit+0xdc>)
 800873e:	f001 f873 	bl	8009828 <siprintf>
 8008742:	e006      	b.n	8008752 <printToLcdDrv2Transmit+0x56>
	else	sprintf(lcdBuff,"Gdn2 a:%03d p:%02x",sends.angle,sends.pid_kp);
 8008744:	89bb      	ldrh	r3, [r7, #12]
 8008746:	461a      	mov	r2, r3
 8008748:	7abb      	ldrb	r3, [r7, #10]
 800874a:	4924      	ldr	r1, [pc, #144]	; (80087dc <printToLcdDrv2Transmit+0xe0>)
 800874c:	4822      	ldr	r0, [pc, #136]	; (80087d8 <printToLcdDrv2Transmit+0xdc>)
 800874e:	f001 f86b 	bl	8009828 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL2,lcdBuff,STR_NOSLIDE);
 8008752:	4c1f      	ldr	r4, [pc, #124]	; (80087d0 <printToLcdDrv2Transmit+0xd4>)
 8008754:	2300      	movs	r3, #0
 8008756:	9312      	str	r3, [sp, #72]	; 0x48
 8008758:	4b1f      	ldr	r3, [pc, #124]	; (80087d8 <printToLcdDrv2Transmit+0xdc>)
 800875a:	9311      	str	r3, [sp, #68]	; 0x44
 800875c:	4668      	mov	r0, sp
 800875e:	f104 0310 	add.w	r3, r4, #16
 8008762:	2244      	movs	r2, #68	; 0x44
 8008764:	4619      	mov	r1, r3
 8008766:	f001 f84b 	bl	8009800 <memcpy>
 800876a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800876e:	f000 fa5d 	bl	8008c2c <LCD_Send_String>
	LCD_SetCursor(LCD_I2C_CHANNEL2,2,1);
 8008772:	4c17      	ldr	r4, [pc, #92]	; (80087d0 <printToLcdDrv2Transmit+0xd4>)
 8008774:	2301      	movs	r3, #1
 8008776:	9312      	str	r3, [sp, #72]	; 0x48
 8008778:	2302      	movs	r3, #2
 800877a:	9311      	str	r3, [sp, #68]	; 0x44
 800877c:	4668      	mov	r0, sp
 800877e:	f104 0310 	add.w	r3, r4, #16
 8008782:	2244      	movs	r2, #68	; 0x44
 8008784:	4619      	mov	r1, r3
 8008786:	f001 f83b 	bl	8009800 <memcpy>
 800878a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800878e:	f000 fa0d 	bl	8008bac <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x d:%02x f:%02x",sends.pid_ki,sends.pid_kd,sends.factor);
 8008792:	7a7b      	ldrb	r3, [r7, #9]
 8008794:	461a      	mov	r2, r3
 8008796:	7a3b      	ldrb	r3, [r7, #8]
 8008798:	4619      	mov	r1, r3
 800879a:	7afb      	ldrb	r3, [r7, #11]
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	460b      	mov	r3, r1
 80087a0:	490f      	ldr	r1, [pc, #60]	; (80087e0 <printToLcdDrv2Transmit+0xe4>)
 80087a2:	480d      	ldr	r0, [pc, #52]	; (80087d8 <printToLcdDrv2Transmit+0xdc>)
 80087a4:	f001 f840 	bl	8009828 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL2,lcdBuff,STR_NOSLIDE);
 80087a8:	4c09      	ldr	r4, [pc, #36]	; (80087d0 <printToLcdDrv2Transmit+0xd4>)
 80087aa:	2300      	movs	r3, #0
 80087ac:	9312      	str	r3, [sp, #72]	; 0x48
 80087ae:	4b0a      	ldr	r3, [pc, #40]	; (80087d8 <printToLcdDrv2Transmit+0xdc>)
 80087b0:	9311      	str	r3, [sp, #68]	; 0x44
 80087b2:	4668      	mov	r0, sp
 80087b4:	f104 0310 	add.w	r3, r4, #16
 80087b8:	2244      	movs	r2, #68	; 0x44
 80087ba:	4619      	mov	r1, r3
 80087bc:	f001 f820 	bl	8009800 <memcpy>
 80087c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80087c4:	f000 fa32 	bl	8008c2c <LCD_Send_String>
}
 80087c8:	bf00      	nop
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd90      	pop	{r4, r7, pc}
 80087d0:	20004ad4 	.word	0x20004ad4
 80087d4:	0800a0e8 	.word	0x0800a0e8
 80087d8:	20004d08 	.word	0x20004d08
 80087dc:	0800a0fc 	.word	0x0800a0fc
 80087e0:	0800a080 	.word	0x0800a080

080087e4 <cleanTheLcd>:
void cleanTheLcd(void){
 80087e4:	b590      	push	{r4, r7, lr}
 80087e6:	b093      	sub	sp, #76	; 0x4c
 80087e8:	af12      	add	r7, sp, #72	; 0x48
	LCD_Clear(LCD_I2C_CHANNEL1);
 80087ea:	4c0e      	ldr	r4, [pc, #56]	; (8008824 <cleanTheLcd+0x40>)
 80087ec:	4668      	mov	r0, sp
 80087ee:	f104 0310 	add.w	r3, r4, #16
 80087f2:	2244      	movs	r2, #68	; 0x44
 80087f4:	4619      	mov	r1, r3
 80087f6:	f001 f803 	bl	8009800 <memcpy>
 80087fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80087fe:	f000 f9ab 	bl	8008b58 <LCD_Clear>
	LCD_Clear(LCD_I2C_CHANNEL2);
 8008802:	4c09      	ldr	r4, [pc, #36]	; (8008828 <cleanTheLcd+0x44>)
 8008804:	4668      	mov	r0, sp
 8008806:	f104 0310 	add.w	r3, r4, #16
 800880a:	2244      	movs	r2, #68	; 0x44
 800880c:	4619      	mov	r1, r3
 800880e:	f000 fff7 	bl	8009800 <memcpy>
 8008812:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008816:	f000 f99f 	bl	8008b58 <LCD_Clear>
}
 800881a:	bf00      	nop
 800881c:	3704      	adds	r7, #4
 800881e:	46bd      	mov	sp, r7
 8008820:	bd90      	pop	{r4, r7, pc}
 8008822:	bf00      	nop
 8008824:	20004a80 	.word	0x20004a80
 8008828:	20004ad4 	.word	0x20004ad4

0800882c <lcdController>:
void lcdController(void){
 800882c:	b590      	push	{r4, r7, lr}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
	static mD_interface temp;
	static uint8_t itemVal=0,statuVal=0;
	if(0==statuVal){
 8008832:	4b53      	ldr	r3, [pc, #332]	; (8008980 <lcdController+0x154>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d149      	bne.n	80088ce <lcdController+0xa2>
		if(0==itemVal){
 800883a:	4b52      	ldr	r3, [pc, #328]	; (8008984 <lcdController+0x158>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d122      	bne.n	8008888 <lcdController+0x5c>
			temp=getDriver1TransmitVal();
 8008842:	4c51      	ldr	r4, [pc, #324]	; (8008988 <lcdController+0x15c>)
 8008844:	463b      	mov	r3, r7
 8008846:	4618      	mov	r0, r3
 8008848:	f7ff fd26 	bl	8008298 <getDriver1TransmitVal>
 800884c:	4622      	mov	r2, r4
 800884e:	463b      	mov	r3, r7
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	6010      	str	r0, [r2, #0]
 8008854:	889b      	ldrh	r3, [r3, #4]
 8008856:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Transmit(temp,true);
 8008858:	4b4b      	ldr	r3, [pc, #300]	; (8008988 <lcdController+0x15c>)
 800885a:	2201      	movs	r2, #1
 800885c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008860:	f7ff fe64 	bl	800852c <printToLcdDrv1Transmit>
			temp=getDriver2TransmitVal();
 8008864:	4c48      	ldr	r4, [pc, #288]	; (8008988 <lcdController+0x15c>)
 8008866:	463b      	mov	r3, r7
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff fd27 	bl	80082bc <getDriver2TransmitVal>
 800886e:	4622      	mov	r2, r4
 8008870:	463b      	mov	r3, r7
 8008872:	6818      	ldr	r0, [r3, #0]
 8008874:	6010      	str	r0, [r2, #0]
 8008876:	889b      	ldrh	r3, [r3, #4]
 8008878:	8093      	strh	r3, [r2, #4]
			printToLcdDrv2Transmit(temp,false);
 800887a:	4b43      	ldr	r3, [pc, #268]	; (8008988 <lcdController+0x15c>)
 800887c:	2200      	movs	r2, #0
 800887e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008882:	f7ff ff3b 	bl	80086fc <printToLcdDrv2Transmit>
 8008886:	e06b      	b.n	8008960 <lcdController+0x134>

		}else{
			temp=getDriver1ReceiveVal();
 8008888:	4c3f      	ldr	r4, [pc, #252]	; (8008988 <lcdController+0x15c>)
 800888a:	463b      	mov	r3, r7
 800888c:	4618      	mov	r0, r3
 800888e:	f000 fddd 	bl	800944c <getDriver1ReceiveVal>
 8008892:	4622      	mov	r2, r4
 8008894:	463b      	mov	r3, r7
 8008896:	6818      	ldr	r0, [r3, #0]
 8008898:	6010      	str	r0, [r2, #0]
 800889a:	889b      	ldrh	r3, [r3, #4]
 800889c:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Receive(temp,true);
 800889e:	4b3a      	ldr	r3, [pc, #232]	; (8008988 <lcdController+0x15c>)
 80088a0:	2201      	movs	r2, #1
 80088a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80088a6:	f7ff fdcd 	bl	8008444 <printToLcdDrv1Receive>
			temp=getDriver2ReceiveVal();
 80088aa:	4c37      	ldr	r4, [pc, #220]	; (8008988 <lcdController+0x15c>)
 80088ac:	463b      	mov	r3, r7
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 fdde 	bl	8009470 <getDriver2ReceiveVal>
 80088b4:	4622      	mov	r2, r4
 80088b6:	463b      	mov	r3, r7
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	6010      	str	r0, [r2, #0]
 80088bc:	889b      	ldrh	r3, [r3, #4]
 80088be:	8093      	strh	r3, [r2, #4]
			printToLcdDrv2Receive(temp,false);
 80088c0:	4b31      	ldr	r3, [pc, #196]	; (8008988 <lcdController+0x15c>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80088c8:	f7ff fea4 	bl	8008614 <printToLcdDrv2Receive>
 80088cc:	e048      	b.n	8008960 <lcdController+0x134>
		}
	}
	else{
		if(0==itemVal){
 80088ce:	4b2d      	ldr	r3, [pc, #180]	; (8008984 <lcdController+0x158>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d122      	bne.n	800891c <lcdController+0xf0>
			temp=getDriver2TransmitVal();
 80088d6:	4c2c      	ldr	r4, [pc, #176]	; (8008988 <lcdController+0x15c>)
 80088d8:	463b      	mov	r3, r7
 80088da:	4618      	mov	r0, r3
 80088dc:	f7ff fcee 	bl	80082bc <getDriver2TransmitVal>
 80088e0:	4622      	mov	r2, r4
 80088e2:	463b      	mov	r3, r7
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	6010      	str	r0, [r2, #0]
 80088e8:	889b      	ldrh	r3, [r3, #4]
 80088ea:	8093      	strh	r3, [r2, #4]
			printToLcdDrv2Transmit(temp,true);
 80088ec:	4b26      	ldr	r3, [pc, #152]	; (8008988 <lcdController+0x15c>)
 80088ee:	2201      	movs	r2, #1
 80088f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80088f4:	f7ff ff02 	bl	80086fc <printToLcdDrv2Transmit>
			temp=getDriver1TransmitVal();
 80088f8:	4c23      	ldr	r4, [pc, #140]	; (8008988 <lcdController+0x15c>)
 80088fa:	463b      	mov	r3, r7
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff fccb 	bl	8008298 <getDriver1TransmitVal>
 8008902:	4622      	mov	r2, r4
 8008904:	463b      	mov	r3, r7
 8008906:	6818      	ldr	r0, [r3, #0]
 8008908:	6010      	str	r0, [r2, #0]
 800890a:	889b      	ldrh	r3, [r3, #4]
 800890c:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Transmit(temp,false);
 800890e:	4b1e      	ldr	r3, [pc, #120]	; (8008988 <lcdController+0x15c>)
 8008910:	2200      	movs	r2, #0
 8008912:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008916:	f7ff fe09 	bl	800852c <printToLcdDrv1Transmit>
 800891a:	e021      	b.n	8008960 <lcdController+0x134>

		}else{
			temp=getDriver2ReceiveVal();
 800891c:	4c1a      	ldr	r4, [pc, #104]	; (8008988 <lcdController+0x15c>)
 800891e:	463b      	mov	r3, r7
 8008920:	4618      	mov	r0, r3
 8008922:	f000 fda5 	bl	8009470 <getDriver2ReceiveVal>
 8008926:	4622      	mov	r2, r4
 8008928:	463b      	mov	r3, r7
 800892a:	6818      	ldr	r0, [r3, #0]
 800892c:	6010      	str	r0, [r2, #0]
 800892e:	889b      	ldrh	r3, [r3, #4]
 8008930:	8093      	strh	r3, [r2, #4]
			printToLcdDrv2Receive(temp,true);
 8008932:	4b15      	ldr	r3, [pc, #84]	; (8008988 <lcdController+0x15c>)
 8008934:	2201      	movs	r2, #1
 8008936:	e893 0003 	ldmia.w	r3, {r0, r1}
 800893a:	f7ff fe6b 	bl	8008614 <printToLcdDrv2Receive>
			temp=getDriver1ReceiveVal();
 800893e:	4c12      	ldr	r4, [pc, #72]	; (8008988 <lcdController+0x15c>)
 8008940:	463b      	mov	r3, r7
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fd82 	bl	800944c <getDriver1ReceiveVal>
 8008948:	4622      	mov	r2, r4
 800894a:	463b      	mov	r3, r7
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	6010      	str	r0, [r2, #0]
 8008950:	889b      	ldrh	r3, [r3, #4]
 8008952:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Receive(temp,false);
 8008954:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <lcdController+0x15c>)
 8008956:	2200      	movs	r2, #0
 8008958:	e893 0003 	ldmia.w	r3, {r0, r1}
 800895c:	f7ff fd72 	bl	8008444 <printToLcdDrv1Receive>
		}
	}
	statuVal=getSelectedLcdVal();
 8008960:	f7ff fcbe 	bl	80082e0 <getSelectedLcdVal>
 8008964:	4603      	mov	r3, r0
 8008966:	461a      	mov	r2, r3
 8008968:	4b05      	ldr	r3, [pc, #20]	; (8008980 <lcdController+0x154>)
 800896a:	701a      	strb	r2, [r3, #0]
	itemVal=getSelectedLcdItemVal();
 800896c:	f7ff fcc4 	bl	80082f8 <getSelectedLcdItemVal>
 8008970:	4603      	mov	r3, r0
 8008972:	461a      	mov	r2, r3
 8008974:	4b03      	ldr	r3, [pc, #12]	; (8008984 <lcdController+0x158>)
 8008976:	701a      	strb	r2, [r3, #0]
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	bd90      	pop	{r4, r7, pc}
 8008980:	200049da 	.word	0x200049da
 8008984:	200049db 	.word	0x200049db
 8008988:	200049dc 	.word	0x200049dc

0800898c <LCD_i2cDeviceCheck>:
/**
*@brief: Lcd i2c device check.
*@retval: none
*/
void LCD_i2cDeviceCheck(I2C_HandleTypeDef hi2cx)
{
 800898c:	b084      	sub	sp, #16
 800898e:	b580      	push	{r7, lr}
 8008990:	af00      	add	r7, sp, #0
 8008992:	f107 0c08 	add.w	ip, r7, #8
 8008996:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* Checks if target device is ready for communication. */
	/* 3 is number of trials, 1000ms is timeout */
	HAL_Delay(50);
 800899a:	2032      	movs	r0, #50	; 0x32
 800899c:	f7f8 ffba 	bl	8001914 <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2cx, i2cDeviceAddr, 3, 1000) != HAL_OK) 
 80089a0:	bf00      	nop
 80089a2:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <LCD_i2cDeviceCheck+0x3c>)
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b299      	uxth	r1, r3
 80089a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089ac:	2203      	movs	r2, #3
 80089ae:	f107 0008 	add.w	r0, r7, #8
 80089b2:	f7fa f8a9 	bl	8002b08 <HAL_I2C_IsDeviceReady>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f2      	bne.n	80089a2 <LCD_i2cDeviceCheck+0x16>
	{	
		
	}
}
 80089bc:	bf00      	nop
 80089be:	46bd      	mov	sp, r7
 80089c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089c4:	b004      	add	sp, #16
 80089c6:	4770      	bx	lr
 80089c8:	20000011 	.word	0x20000011

080089cc <LCD_Set_Command>:
/**
*@brief: Send commands to lcd.
*@retval: none
*/
void LCD_Set_Command(I2C_HandleTypeDef hi2cx,uint8_t cmd)
{
 80089cc:	b084      	sub	sp, #16
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af02      	add	r7, sp, #8
 80089d4:	f107 0c08 	add.w	ip, r7, #8
 80089d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	data_M = cmd & Mask_Data;        //Most significant bit
 80089dc:	4b25      	ldr	r3, [pc, #148]	; (8008a74 <LCD_Set_Command+0xa8>)
 80089de:	781a      	ldrb	r2, [r3, #0]
 80089e0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80089e4:	4013      	ands	r3, r2
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	4b23      	ldr	r3, [pc, #140]	; (8008a78 <LCD_Set_Command+0xac>)
 80089ea:	701a      	strb	r2, [r3, #0]
	data_L = (cmd << 4) & Mask_Data; //Least significant bit
 80089ec:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	b25a      	sxtb	r2, r3
 80089f4:	4b1f      	ldr	r3, [pc, #124]	; (8008a74 <LCD_Set_Command+0xa8>)
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	b25b      	sxtb	r3, r3
 80089fa:	4013      	ands	r3, r2
 80089fc:	b25b      	sxtb	r3, r3
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	4b1e      	ldr	r3, [pc, #120]	; (8008a7c <LCD_Set_Command+0xb0>)
 8008a02:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 8008a04:	4b1c      	ldr	r3, [pc, #112]	; (8008a78 <LCD_Set_Command+0xac>)
 8008a06:	781a      	ldrb	r2, [r3, #0]
 8008a08:	4b1d      	ldr	r3, [pc, #116]	; (8008a80 <LCD_Set_Command+0xb4>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	4b19      	ldr	r3, [pc, #100]	; (8008a78 <LCD_Set_Command+0xac>)
 8008a12:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 8008a14:	4b19      	ldr	r3, [pc, #100]	; (8008a7c <LCD_Set_Command+0xb0>)
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	4b19      	ldr	r3, [pc, #100]	; (8008a80 <LCD_Set_Command+0xb4>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	4b16      	ldr	r3, [pc, #88]	; (8008a7c <LCD_Set_Command+0xb0>)
 8008a22:	701a      	strb	r2, [r3, #0]
	
	data[0] = data_M | LCD_E;  //Enable E pin, RS=0
 8008a24:	4b14      	ldr	r3, [pc, #80]	; (8008a78 <LCD_Set_Command+0xac>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	f043 0304 	orr.w	r3, r3, #4
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	4b15      	ldr	r3, [pc, #84]	; (8008a84 <LCD_Set_Command+0xb8>)
 8008a30:	701a      	strb	r2, [r3, #0]
	data[1] = data_M;          //Disable E pin, RS=0
 8008a32:	4b11      	ldr	r3, [pc, #68]	; (8008a78 <LCD_Set_Command+0xac>)
 8008a34:	781a      	ldrb	r2, [r3, #0]
 8008a36:	4b13      	ldr	r3, [pc, #76]	; (8008a84 <LCD_Set_Command+0xb8>)
 8008a38:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E;
 8008a3a:	4b10      	ldr	r3, [pc, #64]	; (8008a7c <LCD_Set_Command+0xb0>)
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	f043 0304 	orr.w	r3, r3, #4
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	4b0f      	ldr	r3, [pc, #60]	; (8008a84 <LCD_Set_Command+0xb8>)
 8008a46:	709a      	strb	r2, [r3, #2]
  data[3] = data_L;
 8008a48:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <LCD_Set_Command+0xb0>)
 8008a4a:	781a      	ldrb	r2, [r3, #0]
 8008a4c:	4b0d      	ldr	r3, [pc, #52]	; (8008a84 <LCD_Set_Command+0xb8>)
 8008a4e:	70da      	strb	r2, [r3, #3]
	
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8008a50:	4b0d      	ldr	r3, [pc, #52]	; (8008a88 <LCD_Set_Command+0xbc>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	b299      	uxth	r1, r3
 8008a56:	23c8      	movs	r3, #200	; 0xc8
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	2304      	movs	r3, #4
 8008a5c:	4a09      	ldr	r2, [pc, #36]	; (8008a84 <LCD_Set_Command+0xb8>)
 8008a5e:	f107 0008 	add.w	r0, r7, #8
 8008a62:	f7f9 ff53 	bl	800290c <HAL_I2C_Master_Transmit>
}
 8008a66:	bf00      	nop
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a6e:	b004      	add	sp, #16
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20000012 	.word	0x20000012
 8008a78:	200049e8 	.word	0x200049e8
 8008a7c:	200049e9 	.word	0x200049e9
 8008a80:	200049ea 	.word	0x200049ea
 8008a84:	200049e4 	.word	0x200049e4
 8008a88:	20000011 	.word	0x20000011

08008a8c <LCD_Write_Data>:
/**
*@brief: Write data to lcd.
*@retval: none
*/
void LCD_Write_Data(I2C_HandleTypeDef hi2cx,uint8_t datax)
{
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af02      	add	r7, sp, #8
 8008a94:	f107 0c08 	add.w	ip, r7, #8
 8008a98:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	data_M = datax & Mask_Data;        //Most significant bit
 8008a9c:	4b28      	ldr	r3, [pc, #160]	; (8008b40 <LCD_Write_Data+0xb4>)
 8008a9e:	781a      	ldrb	r2, [r3, #0]
 8008aa0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	4b26      	ldr	r3, [pc, #152]	; (8008b44 <LCD_Write_Data+0xb8>)
 8008aaa:	701a      	strb	r2, [r3, #0]
	data_L = (datax << 4) & Mask_Data; //Least significant bit
 8008aac:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ab0:	011b      	lsls	r3, r3, #4
 8008ab2:	b25a      	sxtb	r2, r3
 8008ab4:	4b22      	ldr	r3, [pc, #136]	; (8008b40 <LCD_Write_Data+0xb4>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	b25b      	sxtb	r3, r3
 8008aba:	4013      	ands	r3, r2
 8008abc:	b25b      	sxtb	r3, r3
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	4b21      	ldr	r3, [pc, #132]	; (8008b48 <LCD_Write_Data+0xbc>)
 8008ac2:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 8008ac4:	4b1f      	ldr	r3, [pc, #124]	; (8008b44 <LCD_Write_Data+0xb8>)
 8008ac6:	781a      	ldrb	r2, [r3, #0]
 8008ac8:	4b20      	ldr	r3, [pc, #128]	; (8008b4c <LCD_Write_Data+0xc0>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	4b1c      	ldr	r3, [pc, #112]	; (8008b44 <LCD_Write_Data+0xb8>)
 8008ad2:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 8008ad4:	4b1c      	ldr	r3, [pc, #112]	; (8008b48 <LCD_Write_Data+0xbc>)
 8008ad6:	781a      	ldrb	r2, [r3, #0]
 8008ad8:	4b1c      	ldr	r3, [pc, #112]	; (8008b4c <LCD_Write_Data+0xc0>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	4b19      	ldr	r3, [pc, #100]	; (8008b48 <LCD_Write_Data+0xbc>)
 8008ae2:	701a      	strb	r2, [r3, #0]
	 	
	data[0] = data_M | LCD_E|LCD_RS;  //Enable E pin, RS=1
 8008ae4:	4b17      	ldr	r3, [pc, #92]	; (8008b44 <LCD_Write_Data+0xb8>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	f043 0305 	orr.w	r3, r3, #5
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	4b18      	ldr	r3, [pc, #96]	; (8008b50 <LCD_Write_Data+0xc4>)
 8008af0:	701a      	strb	r2, [r3, #0]
	data[1] = data_M | LCD_RS;        //Disable E pin, RS=1
 8008af2:	4b14      	ldr	r3, [pc, #80]	; (8008b44 <LCD_Write_Data+0xb8>)
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	f043 0301 	orr.w	r3, r3, #1
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	4b14      	ldr	r3, [pc, #80]	; (8008b50 <LCD_Write_Data+0xc4>)
 8008afe:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E|LCD_RS;
 8008b00:	4b11      	ldr	r3, [pc, #68]	; (8008b48 <LCD_Write_Data+0xbc>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	f043 0305 	orr.w	r3, r3, #5
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	4b11      	ldr	r3, [pc, #68]	; (8008b50 <LCD_Write_Data+0xc4>)
 8008b0c:	709a      	strb	r2, [r3, #2]
  data[3] = data_L | LCD_RS;  
 8008b0e:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <LCD_Write_Data+0xbc>)
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	f043 0301 	orr.w	r3, r3, #1
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	4b0d      	ldr	r3, [pc, #52]	; (8008b50 <LCD_Write_Data+0xc4>)
 8008b1a:	70da      	strb	r2, [r3, #3]
	
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8008b1c:	4b0d      	ldr	r3, [pc, #52]	; (8008b54 <LCD_Write_Data+0xc8>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	b299      	uxth	r1, r3
 8008b22:	23c8      	movs	r3, #200	; 0xc8
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	2304      	movs	r3, #4
 8008b28:	4a09      	ldr	r2, [pc, #36]	; (8008b50 <LCD_Write_Data+0xc4>)
 8008b2a:	f107 0008 	add.w	r0, r7, #8
 8008b2e:	f7f9 feed 	bl	800290c <HAL_I2C_Master_Transmit>
}
 8008b32:	bf00      	nop
 8008b34:	46bd      	mov	sp, r7
 8008b36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b3a:	b004      	add	sp, #16
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	20000012 	.word	0x20000012
 8008b44:	200049e8 	.word	0x200049e8
 8008b48:	200049e9 	.word	0x200049e9
 8008b4c:	200049ea 	.word	0x200049ea
 8008b50:	200049e4 	.word	0x200049e4
 8008b54:	20000011 	.word	0x20000011

08008b58 <LCD_Clear>:
/**
*@brief: Clear lcd display.
*@retval: none
*/
void LCD_Clear(I2C_HandleTypeDef hi2cx)
{
 8008b58:	b084      	sub	sp, #16
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b092      	sub	sp, #72	; 0x48
 8008b5e:	af12      	add	r7, sp, #72	; 0x48
 8008b60:	f107 0c08 	add.w	ip, r7, #8
 8008b64:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_Set_Command(hi2cx,LCD_CLEAR_DISPLAY);
 8008b68:	2301      	movs	r3, #1
 8008b6a:	9311      	str	r3, [sp, #68]	; 0x44
 8008b6c:	4668      	mov	r0, sp
 8008b6e:	f107 0318 	add.w	r3, r7, #24
 8008b72:	2244      	movs	r2, #68	; 0x44
 8008b74:	4619      	mov	r1, r3
 8008b76:	f000 fe43 	bl	8009800 <memcpy>
 8008b7a:	f107 0308 	add.w	r3, r7, #8
 8008b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b80:	f7ff ff24 	bl	80089cc <LCD_Set_Command>
	HAL_Delay(10);
 8008b84:	200a      	movs	r0, #10
 8008b86:	f7f8 fec5 	bl	8001914 <HAL_Delay>
	str_len = 0;
 8008b8a:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <LCD_Clear+0x4c>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	701a      	strb	r2, [r3, #0]
	line_pos = 1;
 8008b90:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <LCD_Clear+0x50>)
 8008b92:	2201      	movs	r2, #1
 8008b94:	701a      	strb	r2, [r3, #0]
}
 8008b96:	bf00      	nop
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b9e:	b004      	add	sp, #16
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	200049eb 	.word	0x200049eb
 8008ba8:	20000013 	.word	0x20000013

08008bac <LCD_SetCursor>:
*@brief: Set lcd cursor position.
*@param: line_x: line no, chr_x: character no.
*@retval: none
*/
void LCD_SetCursor(I2C_HandleTypeDef hi2cx,int line_x, int chr_x)
{
 8008bac:	b084      	sub	sp, #16
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b092      	sub	sp, #72	; 0x48
 8008bb2:	af12      	add	r7, sp, #72	; 0x48
 8008bb4:	f107 0c08 	add.w	ip, r7, #8
 8008bb8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  line_pos = line_x; //hold line position.	
 8008bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	4b18      	ldr	r3, [pc, #96]	; (8008c24 <LCD_SetCursor+0x78>)
 8008bc2:	701a      	strb	r2, [r3, #0]
	
	if(((line_x >=1 && line_x <= line_MAX) && (chr_x >=1 && chr_x <= chr_MAX)))
 8008bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	dd25      	ble.n	8008c16 <LCD_SetCursor+0x6a>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	dc20      	bgt.n	8008c16 <LCD_SetCursor+0x6a>
 8008bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dd1d      	ble.n	8008c16 <LCD_SetCursor+0x6a>
 8008bda:	2310      	movs	r3, #16
 8008bdc:	461a      	mov	r2, r3
 8008bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008be0:	4293      	cmp	r3, r2
 8008be2:	dc18      	bgt.n	8008c16 <LCD_SetCursor+0x6a>
	{		
		LCD_Set_Command(hi2cx,LCD_SET_DDRAMADDR | Cursor_Data[line_x - 1][chr_x - 1]);
 8008be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008be6:	1e5a      	subs	r2, r3, #1
 8008be8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bea:	3b01      	subs	r3, #1
 8008bec:	490e      	ldr	r1, [pc, #56]	; (8008c28 <LCD_SetCursor+0x7c>)
 8008bee:	0112      	lsls	r2, r2, #4
 8008bf0:	440a      	add	r2, r1
 8008bf2:	4413      	add	r3, r2
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	9311      	str	r3, [sp, #68]	; 0x44
 8008bfe:	4668      	mov	r0, sp
 8008c00:	f107 0318 	add.w	r3, r7, #24
 8008c04:	2244      	movs	r2, #68	; 0x44
 8008c06:	4619      	mov	r1, r3
 8008c08:	f000 fdfa 	bl	8009800 <memcpy>
 8008c0c:	f107 0308 	add.w	r3, r7, #8
 8008c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c12:	f7ff fedb 	bl	80089cc <LCD_Set_Command>
	}
}
 8008c16:	bf00      	nop
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c1e:	b004      	add	sp, #16
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	20000013 	.word	0x20000013
 8008c28:	0800a1a0 	.word	0x0800a1a0

08008c2c <LCD_Send_String>:
*@brief: Send string data to lcd.
*@param: str[]: string array, mode: str slide/noslide.
*@retval: none
*/
void LCD_Send_String(I2C_HandleTypeDef hi2cx,char str[], uint8_t mode)
{	 
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	b5b0      	push	{r4, r5, r7, lr}
 8008c30:	b09c      	sub	sp, #112	; 0x70
 8008c32:	af14      	add	r7, sp, #80	; 0x50
 8008c34:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8008c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008c3c:	466b      	mov	r3, sp
 8008c3e:	461d      	mov	r5, r3
	char *buffer[BFR_MAX];
 8008c40:	2364      	movs	r3, #100	; 0x64
 8008c42:	3b01      	subs	r3, #1
 8008c44:	617b      	str	r3, [r7, #20]
 8008c46:	2364      	movs	r3, #100	; 0x64
 8008c48:	b2d9      	uxtb	r1, r3
 8008c4a:	f04f 0200 	mov.w	r2, #0
 8008c4e:	f04f 0300 	mov.w	r3, #0
 8008c52:	f04f 0400 	mov.w	r4, #0
 8008c56:	0154      	lsls	r4, r2, #5
 8008c58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008c5c:	014b      	lsls	r3, r1, #5
 8008c5e:	2364      	movs	r3, #100	; 0x64
 8008c60:	b2d9      	uxtb	r1, r3
 8008c62:	f04f 0200 	mov.w	r2, #0
 8008c66:	f04f 0300 	mov.w	r3, #0
 8008c6a:	f04f 0400 	mov.w	r4, #0
 8008c6e:	0154      	lsls	r4, r2, #5
 8008c70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008c74:	014b      	lsls	r3, r1, #5
 8008c76:	2364      	movs	r3, #100	; 0x64
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	3303      	adds	r3, #3
 8008c7c:	3307      	adds	r3, #7
 8008c7e:	08db      	lsrs	r3, r3, #3
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	ebad 0d03 	sub.w	sp, sp, r3
 8008c86:	ab14      	add	r3, sp, #80	; 0x50
 8008c88:	3303      	adds	r3, #3
 8008c8a:	089b      	lsrs	r3, r3, #2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	613b      	str	r3, [r7, #16]
	uint8_t i[4] = {chr_MAX,chr_MAX,chr_MAX,chr_MAX}; //i follows the ch position while sliding.
 8008c90:	2310      	movs	r3, #16
 8008c92:	723b      	strb	r3, [r7, #8]
 8008c94:	2310      	movs	r3, #16
 8008c96:	727b      	strb	r3, [r7, #9]
 8008c98:	2310      	movs	r3, #16
 8008c9a:	72bb      	strb	r3, [r7, #10]
 8008c9c:	2310      	movs	r3, #16
 8008c9e:	72fb      	strb	r3, [r7, #11]
   uint8_t c[4] = {0, 0, 0, 0}; //c follows the each ch of the str buffer while sliding.
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	607b      	str	r3, [r7, #4]
   uint8_t ch_len = 0; //follow the string lenght.
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
  str_len = 0;
 8008ca8:	4b79      	ldr	r3, [pc, #484]	; (8008e90 <LCD_Send_String+0x264>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	701a      	strb	r2, [r3, #0]
	

	switch(mode)
 8008cae:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d035      	beq.n	8008d22 <LCD_Send_String+0xf6>
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d039      	beq.n	8008d2e <LCD_Send_String+0x102>
 8008cba:	e0e0      	b.n	8008e7e <LCD_Send_String+0x252>
	{			
		case STR_NOSLIDE:
			
			while (*str) 
			{
				LCD_Write_Data (hi2cx,*str++);
 8008cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	9311      	str	r3, [sp, #68]	; 0x44
 8008cca:	4668      	mov	r0, sp
 8008ccc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008cd0:	2244      	movs	r2, #68	; 0x44
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	f000 fd94 	bl	8009800 <memcpy>
 8008cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008cdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008cde:	f7ff fed5 	bl	8008a8c <LCD_Write_Data>
				str_len++;
 8008ce2:	4b6b      	ldr	r3, [pc, #428]	; (8008e90 <LCD_Send_String+0x264>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	4b69      	ldr	r3, [pc, #420]	; (8008e90 <LCD_Send_String+0x264>)
 8008cec:	701a      	strb	r2, [r3, #0]
				if(str_len == chr_MAX)
 8008cee:	4b68      	ldr	r3, [pc, #416]	; (8008e90 <LCD_Send_String+0x264>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2210      	movs	r2, #16
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d114      	bne.n	8008d22 <LCD_Send_String+0xf6>
				{
					LCD_SetCursor(hi2cx,line_pos + 1, 1);
 8008cf8:	4b66      	ldr	r3, [pc, #408]	; (8008e94 <LCD_Send_String+0x268>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	2201      	movs	r2, #1
 8008d00:	9212      	str	r2, [sp, #72]	; 0x48
 8008d02:	9311      	str	r3, [sp, #68]	; 0x44
 8008d04:	4668      	mov	r0, sp
 8008d06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008d0a:	2244      	movs	r2, #68	; 0x44
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	f000 fd77 	bl	8009800 <memcpy>
 8008d12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d18:	f7ff ff48 	bl	8008bac <LCD_SetCursor>
					str_len = 0;
 8008d1c:	4b5c      	ldr	r3, [pc, #368]	; (8008e90 <LCD_Send_String+0x264>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	701a      	strb	r2, [r3, #0]
			while (*str) 
 8008d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1c7      	bne.n	8008cbc <LCD_Send_String+0x90>
				}			
			}	
			
			break;
 8008d2c:	e0a7      	b.n	8008e7e <LCD_Send_String+0x252>
		
		case STR_SLIDE:
		
		  for(int a = 0; a < BFR_MAX; a++)
 8008d2e:	2300      	movs	r3, #0
 8008d30:	61bb      	str	r3, [r7, #24]
 8008d32:	e00b      	b.n	8008d4c <LCD_Send_String+0x120>
		  buffer[a]=str++;
 8008d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	69b9      	ldr	r1, [r7, #24]
 8008d42:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		  for(int a = 0; a < BFR_MAX; a++)
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	61bb      	str	r3, [r7, #24]
 8008d4c:	2364      	movs	r3, #100	; 0x64
 8008d4e:	461a      	mov	r2, r3
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	4293      	cmp	r3, r2
 8008d54:	dbee      	blt.n	8008d34 <LCD_Send_String+0x108>
						
			ch_len = strlen(*buffer);
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7f7 fa38 	bl	80001d0 <strlen>
 8008d60:	4603      	mov	r3, r0
 8008d62:	73fb      	strb	r3, [r7, #15]
				 		
			LCD_SetCursor(hi2cx,line_pos, i[line_pos - 1]);
 8008d64:	4b4b      	ldr	r3, [pc, #300]	; (8008e94 <LCD_Send_String+0x268>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	4b4a      	ldr	r3, [pc, #296]	; (8008e94 <LCD_Send_String+0x268>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	f107 0120 	add.w	r1, r7, #32
 8008d74:	440b      	add	r3, r1
 8008d76:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008d7a:	9312      	str	r3, [sp, #72]	; 0x48
 8008d7c:	9211      	str	r2, [sp, #68]	; 0x44
 8008d7e:	4668      	mov	r0, sp
 8008d80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008d84:	2244      	movs	r2, #68	; 0x44
 8008d86:	4619      	mov	r1, r3
 8008d88:	f000 fd3a 	bl	8009800 <memcpy>
 8008d8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d92:	f7ff ff0b 	bl	8008bac <LCD_SetCursor>
				  			
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 8008d96:	4b3f      	ldr	r3, [pc, #252]	; (8008e94 <LCD_Send_String+0x268>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	f107 0220 	add.w	r2, r7, #32
 8008da0:	4413      	add	r3, r2
 8008da2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8008da6:	61fb      	str	r3, [r7, #28]
 8008da8:	e014      	b.n	8008dd4 <LCD_Send_String+0x1a8>
			LCD_Write_Data (hi2cx,*buffer[k]);
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	69fa      	ldr	r2, [r7, #28]
 8008dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	9311      	str	r3, [sp, #68]	; 0x44
 8008db6:	4668      	mov	r0, sp
 8008db8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008dbc:	2244      	movs	r2, #68	; 0x44
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	f000 fd1e 	bl	8009800 <memcpy>
 8008dc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008dca:	f7ff fe5f 	bl	8008a8c <LCD_Write_Data>
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	61fb      	str	r3, [r7, #28]
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	69fa      	ldr	r2, [r7, #28]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	dbe6      	blt.n	8008daa <LCD_Send_String+0x17e>
								
			i[line_pos - 1]--;
 8008ddc:	4b2d      	ldr	r3, [pc, #180]	; (8008e94 <LCD_Send_String+0x268>)
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	f107 0220 	add.w	r2, r7, #32
 8008de6:	441a      	add	r2, r3
 8008de8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8008dec:	3a01      	subs	r2, #1
 8008dee:	b2d2      	uxtb	r2, r2
 8008df0:	f107 0120 	add.w	r1, r7, #32
 8008df4:	440b      	add	r3, r1
 8008df6:	f803 2c18 	strb.w	r2, [r3, #-24]
      
			if(i[line_pos -1] == 0)
 8008dfa:	4b26      	ldr	r3, [pc, #152]	; (8008e94 <LCD_Send_String+0x268>)
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	f107 0220 	add.w	r2, r7, #32
 8008e04:	4413      	add	r3, r2
 8008e06:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d136      	bne.n	8008e7c <LCD_Send_String+0x250>
			{
				i[line_pos - 1] = 1;
 8008e0e:	4b21      	ldr	r3, [pc, #132]	; (8008e94 <LCD_Send_String+0x268>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	3b01      	subs	r3, #1
 8008e14:	f107 0220 	add.w	r2, r7, #32
 8008e18:	4413      	add	r3, r2
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f803 2c18 	strb.w	r2, [r3, #-24]
				c[line_pos - 1]++;
 8008e20:	4b1c      	ldr	r3, [pc, #112]	; (8008e94 <LCD_Send_String+0x268>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	f107 0220 	add.w	r2, r7, #32
 8008e2a:	441a      	add	r2, r3
 8008e2c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8008e30:	3201      	adds	r2, #1
 8008e32:	b2d2      	uxtb	r2, r2
 8008e34:	f107 0120 	add.w	r1, r7, #32
 8008e38:	440b      	add	r3, r1
 8008e3a:	f803 2c1c 	strb.w	r2, [r3, #-28]
        if(c[line_pos - 1] == ch_len)
 8008e3e:	4b15      	ldr	r3, [pc, #84]	; (8008e94 <LCD_Send_String+0x268>)
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	f107 0220 	add.w	r2, r7, #32
 8008e48:	4413      	add	r3, r2
 8008e4a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8008e4e:	7bfa      	ldrb	r2, [r7, #15]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d113      	bne.n	8008e7c <LCD_Send_String+0x250>
					{					
						i[line_pos - 1] = chr_MAX;
 8008e54:	4b0f      	ldr	r3, [pc, #60]	; (8008e94 <LCD_Send_String+0x268>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	2210      	movs	r2, #16
 8008e5c:	f107 0120 	add.w	r1, r7, #32
 8008e60:	440b      	add	r3, r1
 8008e62:	f803 2c18 	strb.w	r2, [r3, #-24]
						c[line_pos - 1] = 0;
 8008e66:	4b0b      	ldr	r3, [pc, #44]	; (8008e94 <LCD_Send_String+0x268>)
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	f107 0220 	add.w	r2, r7, #32
 8008e70:	4413      	add	r3, r2
 8008e72:	2200      	movs	r2, #0
 8008e74:	f803 2c1c 	strb.w	r2, [r3, #-28]
						ch_len = 0;						
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73fb      	strb	r3, [r7, #15]
					}												
			}
		 			
			break;	 
 8008e7c:	bf00      	nop
 8008e7e:	46ad      	mov	sp, r5
	}	
}
 8008e80:	bf00      	nop
 8008e82:	3720      	adds	r7, #32
 8008e84:	46bd      	mov	sp, r7
 8008e86:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8008e8a:	b004      	add	sp, #16
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	200049eb 	.word	0x200049eb
 8008e94:	20000013 	.word	0x20000013

08008e98 <LCD_BackLight>:
*@brief: Backlight control
*@param: light_state: BL on/off
*@retval: none
*/
void LCD_BackLight(I2C_HandleTypeDef hi2cx,uint8_t light_state)
{
 8008e98:	b084      	sub	sp, #16
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b092      	sub	sp, #72	; 0x48
 8008e9e:	af12      	add	r7, sp, #72	; 0x48
 8008ea0:	f107 0c08 	add.w	ip, r7, #8
 8008ea4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(light_state == LCD_BL_ON)
 8008ea8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008eac:	2b08      	cmp	r3, #8
 8008eae:	d111      	bne.n	8008ed4 <LCD_BackLight+0x3c>
	{
    data_BL = LCD_BL_ON;		
 8008eb0:	4b16      	ldr	r3, [pc, #88]	; (8008f0c <LCD_BackLight+0x74>)
 8008eb2:	2208      	movs	r2, #8
 8008eb4:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(hi2cx,0x20); //Empty character
 8008eb6:	2320      	movs	r3, #32
 8008eb8:	9311      	str	r3, [sp, #68]	; 0x44
 8008eba:	4668      	mov	r0, sp
 8008ebc:	f107 0318 	add.w	r3, r7, #24
 8008ec0:	2244      	movs	r2, #68	; 0x44
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	f000 fc9c 	bl	8009800 <memcpy>
 8008ec8:	f107 0308 	add.w	r3, r7, #8
 8008ecc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ece:	f7ff fddd 	bl	8008a8c <LCD_Write_Data>
	else if (light_state == LCD_BL_OFF)
	{
		data_BL = LCD_BL_OFF;
		LCD_Write_Data(hi2cx,0x20);
	}
}
 8008ed2:	e014      	b.n	8008efe <LCD_BackLight+0x66>
	else if (light_state == LCD_BL_OFF)
 8008ed4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d110      	bne.n	8008efe <LCD_BackLight+0x66>
		data_BL = LCD_BL_OFF;
 8008edc:	4b0b      	ldr	r3, [pc, #44]	; (8008f0c <LCD_BackLight+0x74>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(hi2cx,0x20);
 8008ee2:	2320      	movs	r3, #32
 8008ee4:	9311      	str	r3, [sp, #68]	; 0x44
 8008ee6:	4668      	mov	r0, sp
 8008ee8:	f107 0318 	add.w	r3, r7, #24
 8008eec:	2244      	movs	r2, #68	; 0x44
 8008eee:	4619      	mov	r1, r3
 8008ef0:	f000 fc86 	bl	8009800 <memcpy>
 8008ef4:	f107 0308 	add.w	r3, r7, #8
 8008ef8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008efa:	f7ff fdc7 	bl	8008a8c <LCD_Write_Data>
}
 8008efe:	bf00      	nop
 8008f00:	46bd      	mov	sp, r7
 8008f02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f06:	b004      	add	sp, #16
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	200049ea 	.word	0x200049ea

08008f10 <LCD_Init>:
/**
*@brief: Lcd initiliazing settings.
*@retval: none
*/
void LCD_Init(I2C_HandleTypeDef hi2cx)
{
 8008f10:	b084      	sub	sp, #16
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b092      	sub	sp, #72	; 0x48
 8008f16:	af12      	add	r7, sp, #72	; 0x48
 8008f18:	f107 0c08 	add.w	ip, r7, #8
 8008f1c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_Set_Command(hi2cx,LCD_CLEAR_DISPLAY);
 8008f20:	2301      	movs	r3, #1
 8008f22:	9311      	str	r3, [sp, #68]	; 0x44
 8008f24:	4668      	mov	r0, sp
 8008f26:	f107 0318 	add.w	r3, r7, #24
 8008f2a:	2244      	movs	r2, #68	; 0x44
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	f000 fc67 	bl	8009800 <memcpy>
 8008f32:	f107 0308 	add.w	r3, r7, #8
 8008f36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f38:	f7ff fd48 	bl	80089cc <LCD_Set_Command>
	HAL_Delay(1000);
 8008f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008f40:	f7f8 fce8 	bl	8001914 <HAL_Delay>
	LCD_Set_Command(hi2cx,LCD_RETURN_HOME);
 8008f44:	2302      	movs	r3, #2
 8008f46:	9311      	str	r3, [sp, #68]	; 0x44
 8008f48:	4668      	mov	r0, sp
 8008f4a:	f107 0318 	add.w	r3, r7, #24
 8008f4e:	2244      	movs	r2, #68	; 0x44
 8008f50:	4619      	mov	r1, r3
 8008f52:	f000 fc55 	bl	8009800 <memcpy>
 8008f56:	f107 0308 	add.w	r3, r7, #8
 8008f5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f5c:	f7ff fd36 	bl	80089cc <LCD_Set_Command>
	HAL_Delay(5);
 8008f60:	2005      	movs	r0, #5
 8008f62:	f7f8 fcd7 	bl	8001914 <HAL_Delay>
	LCD_Set_Command(hi2cx,LCD_FUNCTION_SET|MODE_4B|MODE_2L|MODE_5X8_DOTS);
 8008f66:	2328      	movs	r3, #40	; 0x28
 8008f68:	9311      	str	r3, [sp, #68]	; 0x44
 8008f6a:	4668      	mov	r0, sp
 8008f6c:	f107 0318 	add.w	r3, r7, #24
 8008f70:	2244      	movs	r2, #68	; 0x44
 8008f72:	4619      	mov	r1, r3
 8008f74:	f000 fc44 	bl	8009800 <memcpy>
 8008f78:	f107 0308 	add.w	r3, r7, #8
 8008f7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f7e:	f7ff fd25 	bl	80089cc <LCD_Set_Command>
	HAL_Delay(5);
 8008f82:	2005      	movs	r0, #5
 8008f84:	f7f8 fcc6 	bl	8001914 <HAL_Delay>
	LCD_Set_Command(hi2cx,LCD_DISPLAY_CONTROL|DISPLAY_ON|CURSOR_OFF|BLINK_OFF);
 8008f88:	230c      	movs	r3, #12
 8008f8a:	9311      	str	r3, [sp, #68]	; 0x44
 8008f8c:	4668      	mov	r0, sp
 8008f8e:	f107 0318 	add.w	r3, r7, #24
 8008f92:	2244      	movs	r2, #68	; 0x44
 8008f94:	4619      	mov	r1, r3
 8008f96:	f000 fc33 	bl	8009800 <memcpy>
 8008f9a:	f107 0308 	add.w	r3, r7, #8
 8008f9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008fa0:	f7ff fd14 	bl	80089cc <LCD_Set_Command>
	HAL_Delay(5);
 8008fa4:	2005      	movs	r0, #5
 8008fa6:	f7f8 fcb5 	bl	8001914 <HAL_Delay>
	LCD_Set_Command(hi2cx,LCD_SET_DDRAMADDR);
 8008faa:	2380      	movs	r3, #128	; 0x80
 8008fac:	9311      	str	r3, [sp, #68]	; 0x44
 8008fae:	4668      	mov	r0, sp
 8008fb0:	f107 0318 	add.w	r3, r7, #24
 8008fb4:	2244      	movs	r2, #68	; 0x44
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	f000 fc22 	bl	8009800 <memcpy>
 8008fbc:	f107 0308 	add.w	r3, r7, #8
 8008fc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008fc2:	f7ff fd03 	bl	80089cc <LCD_Set_Command>
	HAL_Delay(500);
 8008fc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008fca:	f7f8 fca3 	bl	8001914 <HAL_Delay>
}
 8008fce:	bf00      	nop
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fd6:	b004      	add	sp, #16
 8008fd8:	4770      	bx	lr

08008fda <HAL_UART_RxCpltCallback>:

uint8_t rec1Buff[20];
uint8_t rec2Buff[20];
#endif

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
	MDI_getDataChannel1_IT(huart);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f8a6 	bl	8009134 <MDI_getDataChannel1_IT>
	MDI_getDataChannel2_IT(huart);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f9a7 	bl	800933c <MDI_getDataChannel2_IT>
	CI_getDataChannel_IT(huart);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7f7 fd9e 	bl	8000b30 <CI_getDataChannel_IT>
}
 8008ff4:	bf00      	nop
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <MDI_writeSmallDataWithRegister>:
 * @brief Write small data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
void MDI_writeSmallDataWithRegister(UART_HandleTypeDef *uartChannel, uint8_t data){
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	70fb      	strb	r3, [r7, #3]
	while((uartChannel->Instance->SR & USART_SR_TXE)!=USART_SR_TXE);
 8009008:	bf00      	nop
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009014:	2b80      	cmp	r3, #128	; 0x80
 8009016:	d1f8      	bne.n	800900a <MDI_writeSmallDataWithRegister+0xe>
	uartChannel->Instance->DR=data;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	78fa      	ldrb	r2, [r7, #3]
 800901e:	605a      	str	r2, [r3, #4]
	while((uartChannel->Instance->SR & USART_SR_TC)!=USART_SR_TC);
 8009020:	bf00      	nop
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902c:	2b40      	cmp	r3, #64	; 0x40
 800902e:	d1f8      	bne.n	8009022 <MDI_writeSmallDataWithRegister+0x26>
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <MDI_sendDataChannel1Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel1Ver2(uint16_t angleVal, uint8_t kp, uint8_t ki,
		uint8_t kd, uint8_t factor) {
 800903c:	b590      	push	{r4, r7, lr}
 800903e:	b089      	sub	sp, #36	; 0x24
 8009040:	af00      	add	r7, sp, #0
 8009042:	4604      	mov	r4, r0
 8009044:	4608      	mov	r0, r1
 8009046:	4611      	mov	r1, r2
 8009048:	461a      	mov	r2, r3
 800904a:	4623      	mov	r3, r4
 800904c:	80fb      	strh	r3, [r7, #6]
 800904e:	4603      	mov	r3, r0
 8009050:	717b      	strb	r3, [r7, #5]
 8009052:	460b      	mov	r3, r1
 8009054:	713b      	strb	r3, [r7, #4]
 8009056:	4613      	mov	r3, r2
 8009058:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { angleVal >> 8, angleVal & 0xFF };
 800905e:	88fb      	ldrh	r3, [r7, #6]
 8009060:	0a1b      	lsrs	r3, r3, #8
 8009062:	b29b      	uxth	r3, r3
 8009064:	b2db      	uxtb	r3, r3
 8009066:	763b      	strb	r3, [r7, #24]
 8009068:	88fb      	ldrh	r3, [r7, #6]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 800906e:	7e3b      	ldrb	r3, [r7, #24]
 8009070:	b29a      	uxth	r2, r3
 8009072:	8bbb      	ldrh	r3, [r7, #28]
 8009074:	4413      	add	r3, r2
 8009076:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 8009078:	7e7b      	ldrb	r3, [r7, #25]
 800907a:	b29a      	uxth	r2, r3
 800907c:	8bbb      	ldrh	r3, [r7, #28]
 800907e:	4413      	add	r3, r2
 8009080:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 8009082:	797b      	ldrb	r3, [r7, #5]
 8009084:	b29a      	uxth	r2, r3
 8009086:	8bbb      	ldrh	r3, [r7, #28]
 8009088:	4413      	add	r3, r2
 800908a:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 800908c:	793b      	ldrb	r3, [r7, #4]
 800908e:	b29a      	uxth	r2, r3
 8009090:	8bbb      	ldrh	r3, [r7, #28]
 8009092:	4413      	add	r3, r2
 8009094:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 8009096:	78fb      	ldrb	r3, [r7, #3]
 8009098:	b29a      	uxth	r2, r3
 800909a:	8bbb      	ldrh	r3, [r7, #28]
 800909c:	4413      	add	r3, r2
 800909e:	83bb      	strh	r3, [r7, #28]
	checksumTmp += factor;
 80090a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	8bbb      	ldrh	r3, [r7, #28]
 80090a8:	4413      	add	r3, r2
 80090aa:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 80090ac:	8bbb      	ldrh	r3, [r7, #28]
 80090ae:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 80090b0:	7efb      	ldrb	r3, [r7, #27]
 80090b2:	43db      	mvns	r3, r3
 80090b4:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[10] = { 0XFF, 0XFF, tmpArr[0], tmpArr[1], kp, ki, kd,
 80090b6:	23ff      	movs	r3, #255	; 0xff
 80090b8:	733b      	strb	r3, [r7, #12]
 80090ba:	23ff      	movs	r3, #255	; 0xff
 80090bc:	737b      	strb	r3, [r7, #13]
 80090be:	7e3b      	ldrb	r3, [r7, #24]
 80090c0:	73bb      	strb	r3, [r7, #14]
 80090c2:	7e7b      	ldrb	r3, [r7, #25]
 80090c4:	73fb      	strb	r3, [r7, #15]
 80090c6:	797b      	ldrb	r3, [r7, #5]
 80090c8:	743b      	strb	r3, [r7, #16]
 80090ca:	793b      	ldrb	r3, [r7, #4]
 80090cc:	747b      	strb	r3, [r7, #17]
 80090ce:	78fb      	ldrb	r3, [r7, #3]
 80090d0:	74bb      	strb	r3, [r7, #18]
 80090d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80090d6:	74fb      	strb	r3, [r7, #19]
 80090d8:	7efb      	ldrb	r3, [r7, #27]
 80090da:	753b      	strb	r3, [r7, #20]
 80090dc:	7ebb      	ldrb	r3, [r7, #26]
 80090de:	757b      	strb	r3, [r7, #21]
			factor, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 10; counter++) {
 80090e0:	2300      	movs	r3, #0
 80090e2:	77fb      	strb	r3, [r7, #31]
 80090e4:	e00f      	b.n	8009106 <MDI_sendDataChannel1Ver2+0xca>
		MDI_writeSmallDataWithRegister(&MDI_channel1TX, sendBuff[counter]);
 80090e6:	7ffb      	ldrb	r3, [r7, #31]
 80090e8:	f107 0220 	add.w	r2, r7, #32
 80090ec:	4413      	add	r3, r2
 80090ee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80090f2:	4619      	mov	r1, r3
 80090f4:	4807      	ldr	r0, [pc, #28]	; (8009114 <MDI_sendDataChannel1Ver2+0xd8>)
 80090f6:	f7ff ff81 	bl	8008ffc <MDI_writeSmallDataWithRegister>
		vTaskDelay(50);
 80090fa:	2032      	movs	r0, #50	; 0x32
 80090fc:	f7fc ffde 	bl	80060bc <vTaskDelay>
	for (uint8_t counter = 0; counter < 10; counter++) {
 8009100:	7ffb      	ldrb	r3, [r7, #31]
 8009102:	3301      	adds	r3, #1
 8009104:	77fb      	strb	r3, [r7, #31]
 8009106:	7ffb      	ldrb	r3, [r7, #31]
 8009108:	2b09      	cmp	r3, #9
 800910a:	d9ec      	bls.n	80090e6 <MDI_sendDataChannel1Ver2+0xaa>
	}
}
 800910c:	bf00      	nop
 800910e:	3724      	adds	r7, #36	; 0x24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd90      	pop	{r4, r7, pc}
 8009114:	20004bb0 	.word	0x20004bb0

08009118 <MDI_enableGetDataChannel1>:
uint8_t  getTmpCH1 = 0;
/**
 * @brief set enable for MDI channel 1 receive
 * @return none
 */
void MDI_enableGetDataChannel1(void){
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&MDI_channel1RX,&getTmpCH1,1);
 800911c:	2201      	movs	r2, #1
 800911e:	4903      	ldr	r1, [pc, #12]	; (800912c <MDI_enableGetDataChannel1+0x14>)
 8009120:	4803      	ldr	r0, [pc, #12]	; (8009130 <MDI_enableGetDataChannel1+0x18>)
 8009122:	f7fb f90a 	bl	800433a <HAL_UART_Receive_IT>
}
 8009126:	bf00      	nop
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	200049ec 	.word	0x200049ec
 8009130:	20004bb0 	.word	0x20004bb0

08009134 <MDI_getDataChannel1_IT>:
static uint8_t tmpArr1[10];
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void MDI_getDataChannel1_IT(UART_HandleTypeDef *callBackHandle) {
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &MDI_channel1RX;
 800913c:	4b3b      	ldr	r3, [pc, #236]	; (800922c <MDI_getDataChannel1_IT+0xf8>)
 800913e:	613b      	str	r3, [r7, #16]
	if(callBackHandle->Instance == tmpHandle->Instance){
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	429a      	cmp	r2, r3
 800914a:	d16a      	bne.n	8009222 <MDI_getDataChannel1_IT+0xee>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0xFF == getTmpCH1 && 0xFF == getTmpBeff) {
 800914c:	4b38      	ldr	r3, [pc, #224]	; (8009230 <MDI_getDataChannel1_IT+0xfc>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2bff      	cmp	r3, #255	; 0xff
 8009152:	d10c      	bne.n	800916e <MDI_getDataChannel1_IT+0x3a>
 8009154:	4b37      	ldr	r3, [pc, #220]	; (8009234 <MDI_getDataChannel1_IT+0x100>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2bff      	cmp	r3, #255	; 0xff
 800915a:	d108      	bne.n	800916e <MDI_getDataChannel1_IT+0x3a>
					tmpArr1[0] = 0xFF;
 800915c:	4b36      	ldr	r3, [pc, #216]	; (8009238 <MDI_getDataChannel1_IT+0x104>)
 800915e:	22ff      	movs	r2, #255	; 0xff
 8009160:	701a      	strb	r2, [r3, #0]
					tmpArr1[1] = 0xFF;
 8009162:	4b35      	ldr	r3, [pc, #212]	; (8009238 <MDI_getDataChannel1_IT+0x104>)
 8009164:	22ff      	movs	r2, #255	; 0xff
 8009166:	705a      	strb	r2, [r3, #1]
					counter = 1;
 8009168:	4b34      	ldr	r3, [pc, #208]	; (800923c <MDI_getDataChannel1_IT+0x108>)
 800916a:	2201      	movs	r2, #1
 800916c:	701a      	strb	r2, [r3, #0]
				}
				tmpArr1[counter] = getTmpCH1;
 800916e:	4b33      	ldr	r3, [pc, #204]	; (800923c <MDI_getDataChannel1_IT+0x108>)
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	4b2e      	ldr	r3, [pc, #184]	; (8009230 <MDI_getDataChannel1_IT+0xfc>)
 8009176:	7819      	ldrb	r1, [r3, #0]
 8009178:	4b2f      	ldr	r3, [pc, #188]	; (8009238 <MDI_getDataChannel1_IT+0x104>)
 800917a:	5499      	strb	r1, [r3, r2]
				getTmpBeff = getTmpCH1;
 800917c:	4b2c      	ldr	r3, [pc, #176]	; (8009230 <MDI_getDataChannel1_IT+0xfc>)
 800917e:	781a      	ldrb	r2, [r3, #0]
 8009180:	4b2c      	ldr	r3, [pc, #176]	; (8009234 <MDI_getDataChannel1_IT+0x100>)
 8009182:	701a      	strb	r2, [r3, #0]
				counter++;
 8009184:	4b2d      	ldr	r3, [pc, #180]	; (800923c <MDI_getDataChannel1_IT+0x108>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	3301      	adds	r3, #1
 800918a:	b2da      	uxtb	r2, r3
 800918c:	4b2b      	ldr	r3, [pc, #172]	; (800923c <MDI_getDataChannel1_IT+0x108>)
 800918e:	701a      	strb	r2, [r3, #0]
				if (counter > 9) {
 8009190:	4b2a      	ldr	r3, [pc, #168]	; (800923c <MDI_getDataChannel1_IT+0x108>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2b09      	cmp	r3, #9
 8009196:	d93f      	bls.n	8009218 <MDI_getDataChannel1_IT+0xe4>
					counter = 0;
 8009198:	4b28      	ldr	r3, [pc, #160]	; (800923c <MDI_getDataChannel1_IT+0x108>)
 800919a:	2200      	movs	r2, #0
 800919c:	701a      	strb	r2, [r3, #0]
					uint16_t checksumTmp = 0;
 800919e:	2300      	movs	r3, #0
 80091a0:	82fb      	strh	r3, [r7, #22]
					for (uint8_t c = 2; c < 8; c++)
 80091a2:	2302      	movs	r3, #2
 80091a4:	757b      	strb	r3, [r7, #21]
 80091a6:	e009      	b.n	80091bc <MDI_getDataChannel1_IT+0x88>
						checksumTmp += tmpArr1[c];
 80091a8:	7d7b      	ldrb	r3, [r7, #21]
 80091aa:	4a23      	ldr	r2, [pc, #140]	; (8009238 <MDI_getDataChannel1_IT+0x104>)
 80091ac:	5cd3      	ldrb	r3, [r2, r3]
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	8afb      	ldrh	r3, [r7, #22]
 80091b2:	4413      	add	r3, r2
 80091b4:	82fb      	strh	r3, [r7, #22]
					for (uint8_t c = 2; c < 8; c++)
 80091b6:	7d7b      	ldrb	r3, [r7, #21]
 80091b8:	3301      	adds	r3, #1
 80091ba:	757b      	strb	r3, [r7, #21]
 80091bc:	7d7b      	ldrb	r3, [r7, #21]
 80091be:	2b07      	cmp	r3, #7
 80091c0:	d9f2      	bls.n	80091a8 <MDI_getDataChannel1_IT+0x74>
					uint8_t tmp = checksumTmp % 256;
 80091c2:	8afb      	ldrh	r3, [r7, #22]
 80091c4:	73fb      	strb	r3, [r7, #15]
					uint8_t tmpComp = ~tmp;
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	43db      	mvns	r3, r3
 80091ca:	73bb      	strb	r3, [r7, #14]
					if (tmp == tmpArr1[8] && tmpComp == tmpArr1[9]) {
 80091cc:	4b1a      	ldr	r3, [pc, #104]	; (8009238 <MDI_getDataChannel1_IT+0x104>)
 80091ce:	7a1b      	ldrb	r3, [r3, #8]
 80091d0:	7bfa      	ldrb	r2, [r7, #15]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d120      	bne.n	8009218 <MDI_getDataChannel1_IT+0xe4>
 80091d6:	4b18      	ldr	r3, [pc, #96]	; (8009238 <MDI_getDataChannel1_IT+0x104>)
 80091d8:	7a5b      	ldrb	r3, [r3, #9]
 80091da:	7bba      	ldrb	r2, [r7, #14]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d11b      	bne.n	8009218 <MDI_getDataChannel1_IT+0xe4>
						driver1.angle = ((uint16_t) tmpArr1[2] << 8) | tmpArr1[3];
 80091e0:	4b15      	ldr	r3, [pc, #84]	; (8009238 <MDI_getDataChannel1_IT+0x104>)
 80091e2:	789b      	ldrb	r3, [r3, #2]
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	b21a      	sxth	r2, r3
 80091e8:	4b13      	ldr	r3, [pc, #76]	; (8009238 <MDI_getDataChannel1_IT+0x104>)
 80091ea:	78db      	ldrb	r3, [r3, #3]
 80091ec:	b21b      	sxth	r3, r3
 80091ee:	4313      	orrs	r3, r2
 80091f0:	b21b      	sxth	r3, r3
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	4b12      	ldr	r3, [pc, #72]	; (8009240 <MDI_getDataChannel1_IT+0x10c>)
 80091f6:	809a      	strh	r2, [r3, #4]
						driver1.pid_kp = tmpArr1[4];
 80091f8:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <MDI_getDataChannel1_IT+0x104>)
 80091fa:	791a      	ldrb	r2, [r3, #4]
 80091fc:	4b10      	ldr	r3, [pc, #64]	; (8009240 <MDI_getDataChannel1_IT+0x10c>)
 80091fe:	709a      	strb	r2, [r3, #2]
						driver1.pid_ki = tmpArr1[5];
 8009200:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <MDI_getDataChannel1_IT+0x104>)
 8009202:	795a      	ldrb	r2, [r3, #5]
 8009204:	4b0e      	ldr	r3, [pc, #56]	; (8009240 <MDI_getDataChannel1_IT+0x10c>)
 8009206:	705a      	strb	r2, [r3, #1]
						driver1.pid_kd = tmpArr1[6];
 8009208:	4b0b      	ldr	r3, [pc, #44]	; (8009238 <MDI_getDataChannel1_IT+0x104>)
 800920a:	799a      	ldrb	r2, [r3, #6]
 800920c:	4b0c      	ldr	r3, [pc, #48]	; (8009240 <MDI_getDataChannel1_IT+0x10c>)
 800920e:	701a      	strb	r2, [r3, #0]
						driver1.factor = tmpArr1[7];
 8009210:	4b09      	ldr	r3, [pc, #36]	; (8009238 <MDI_getDataChannel1_IT+0x104>)
 8009212:	79da      	ldrb	r2, [r3, #7]
 8009214:	4b0a      	ldr	r3, [pc, #40]	; (8009240 <MDI_getDataChannel1_IT+0x10c>)
 8009216:	70da      	strb	r2, [r3, #3]
					}
				}
				HAL_UART_Receive_IT(callBackHandle, &getTmpCH1, 1);
 8009218:	2201      	movs	r2, #1
 800921a:	4905      	ldr	r1, [pc, #20]	; (8009230 <MDI_getDataChannel1_IT+0xfc>)
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7fb f88c 	bl	800433a <HAL_UART_Receive_IT>
	}
}
 8009222:	bf00      	nop
 8009224:	3718      	adds	r7, #24
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20004bb0 	.word	0x20004bb0
 8009230:	200049ec 	.word	0x200049ec
 8009234:	20004a06 	.word	0x20004a06
 8009238:	200049f0 	.word	0x200049f0
 800923c:	20004a07 	.word	0x20004a07
 8009240:	20004d24 	.word	0x20004d24

08009244 <MDI_sendDataChannel2Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel2Ver2(uint16_t angleVal, uint8_t kp, uint8_t ki,
		uint8_t kd, uint8_t factor) {
 8009244:	b590      	push	{r4, r7, lr}
 8009246:	b089      	sub	sp, #36	; 0x24
 8009248:	af00      	add	r7, sp, #0
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	4611      	mov	r1, r2
 8009250:	461a      	mov	r2, r3
 8009252:	4623      	mov	r3, r4
 8009254:	80fb      	strh	r3, [r7, #6]
 8009256:	4603      	mov	r3, r0
 8009258:	717b      	strb	r3, [r7, #5]
 800925a:	460b      	mov	r3, r1
 800925c:	713b      	strb	r3, [r7, #4]
 800925e:	4613      	mov	r3, r2
 8009260:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { angleVal >> 8, angleVal & 0xFF };
 8009266:	88fb      	ldrh	r3, [r7, #6]
 8009268:	0a1b      	lsrs	r3, r3, #8
 800926a:	b29b      	uxth	r3, r3
 800926c:	b2db      	uxtb	r3, r3
 800926e:	763b      	strb	r3, [r7, #24]
 8009270:	88fb      	ldrh	r3, [r7, #6]
 8009272:	b2db      	uxtb	r3, r3
 8009274:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 8009276:	7e3b      	ldrb	r3, [r7, #24]
 8009278:	b29a      	uxth	r2, r3
 800927a:	8bbb      	ldrh	r3, [r7, #28]
 800927c:	4413      	add	r3, r2
 800927e:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 8009280:	7e7b      	ldrb	r3, [r7, #25]
 8009282:	b29a      	uxth	r2, r3
 8009284:	8bbb      	ldrh	r3, [r7, #28]
 8009286:	4413      	add	r3, r2
 8009288:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 800928a:	797b      	ldrb	r3, [r7, #5]
 800928c:	b29a      	uxth	r2, r3
 800928e:	8bbb      	ldrh	r3, [r7, #28]
 8009290:	4413      	add	r3, r2
 8009292:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 8009294:	793b      	ldrb	r3, [r7, #4]
 8009296:	b29a      	uxth	r2, r3
 8009298:	8bbb      	ldrh	r3, [r7, #28]
 800929a:	4413      	add	r3, r2
 800929c:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	8bbb      	ldrh	r3, [r7, #28]
 80092a4:	4413      	add	r3, r2
 80092a6:	83bb      	strh	r3, [r7, #28]
	checksumTmp += factor;
 80092a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	8bbb      	ldrh	r3, [r7, #28]
 80092b0:	4413      	add	r3, r2
 80092b2:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 80092b4:	8bbb      	ldrh	r3, [r7, #28]
 80092b6:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 80092b8:	7efb      	ldrb	r3, [r7, #27]
 80092ba:	43db      	mvns	r3, r3
 80092bc:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[10] = { 0XFF, 0XFF, tmpArr[0], tmpArr[1], kp, ki, kd,
 80092be:	23ff      	movs	r3, #255	; 0xff
 80092c0:	733b      	strb	r3, [r7, #12]
 80092c2:	23ff      	movs	r3, #255	; 0xff
 80092c4:	737b      	strb	r3, [r7, #13]
 80092c6:	7e3b      	ldrb	r3, [r7, #24]
 80092c8:	73bb      	strb	r3, [r7, #14]
 80092ca:	7e7b      	ldrb	r3, [r7, #25]
 80092cc:	73fb      	strb	r3, [r7, #15]
 80092ce:	797b      	ldrb	r3, [r7, #5]
 80092d0:	743b      	strb	r3, [r7, #16]
 80092d2:	793b      	ldrb	r3, [r7, #4]
 80092d4:	747b      	strb	r3, [r7, #17]
 80092d6:	78fb      	ldrb	r3, [r7, #3]
 80092d8:	74bb      	strb	r3, [r7, #18]
 80092da:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80092de:	74fb      	strb	r3, [r7, #19]
 80092e0:	7efb      	ldrb	r3, [r7, #27]
 80092e2:	753b      	strb	r3, [r7, #20]
 80092e4:	7ebb      	ldrb	r3, [r7, #26]
 80092e6:	757b      	strb	r3, [r7, #21]
			factor, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 10; counter++) {
 80092e8:	2300      	movs	r3, #0
 80092ea:	77fb      	strb	r3, [r7, #31]
 80092ec:	e00f      	b.n	800930e <MDI_sendDataChannel2Ver2+0xca>
		MDI_writeSmallDataWithRegister(&MDI_channel2TX, sendBuff[counter]);
 80092ee:	7ffb      	ldrb	r3, [r7, #31]
 80092f0:	f107 0220 	add.w	r2, r7, #32
 80092f4:	4413      	add	r3, r2
 80092f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80092fa:	4619      	mov	r1, r3
 80092fc:	4807      	ldr	r0, [pc, #28]	; (800931c <MDI_sendDataChannel2Ver2+0xd8>)
 80092fe:	f7ff fe7d 	bl	8008ffc <MDI_writeSmallDataWithRegister>
		vTaskDelay(50);
 8009302:	2032      	movs	r0, #50	; 0x32
 8009304:	f7fc feda 	bl	80060bc <vTaskDelay>
	for (uint8_t counter = 0; counter < 10; counter++) {
 8009308:	7ffb      	ldrb	r3, [r7, #31]
 800930a:	3301      	adds	r3, #1
 800930c:	77fb      	strb	r3, [r7, #31]
 800930e:	7ffb      	ldrb	r3, [r7, #31]
 8009310:	2b09      	cmp	r3, #9
 8009312:	d9ec      	bls.n	80092ee <MDI_sendDataChannel2Ver2+0xaa>
	}
}
 8009314:	bf00      	nop
 8009316:	3724      	adds	r7, #36	; 0x24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd90      	pop	{r4, r7, pc}
 800931c:	20004b28 	.word	0x20004b28

08009320 <MDI_enableGetDataChannel2>:
/**
 * @brief set enable for MDI channel 2 receive
 * @return none
 */
uint8_t  getTmpCH2 = 0;
void MDI_enableGetDataChannel2(void){
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&MDI_channel2RX,&getTmpCH2,1);
 8009324:	2201      	movs	r2, #1
 8009326:	4903      	ldr	r1, [pc, #12]	; (8009334 <MDI_enableGetDataChannel2+0x14>)
 8009328:	4803      	ldr	r0, [pc, #12]	; (8009338 <MDI_enableGetDataChannel2+0x18>)
 800932a:	f7fb f806 	bl	800433a <HAL_UART_Receive_IT>
}
 800932e:	bf00      	nop
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	200049fa 	.word	0x200049fa
 8009338:	20004b28 	.word	0x20004b28

0800933c <MDI_getDataChannel2_IT>:
/**
 * @brief get to Motor Driver 2 values
 * @return callBackHandle-> get u(s)art handle
 */
static uint8_t tmpArr2[10];
void MDI_getDataChannel2_IT(UART_HandleTypeDef *callBackHandle) {
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &MDI_channel2RX;
 8009344:	4b3b      	ldr	r3, [pc, #236]	; (8009434 <MDI_getDataChannel2_IT+0xf8>)
 8009346:	613b      	str	r3, [r7, #16]
	if(callBackHandle->Instance == tmpHandle->Instance){
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	d16a      	bne.n	800942a <MDI_getDataChannel2_IT+0xee>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0xFF == getTmpCH2 && 0xFF == getTmpBeff) {
 8009354:	4b38      	ldr	r3, [pc, #224]	; (8009438 <MDI_getDataChannel2_IT+0xfc>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2bff      	cmp	r3, #255	; 0xff
 800935a:	d10c      	bne.n	8009376 <MDI_getDataChannel2_IT+0x3a>
 800935c:	4b37      	ldr	r3, [pc, #220]	; (800943c <MDI_getDataChannel2_IT+0x100>)
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2bff      	cmp	r3, #255	; 0xff
 8009362:	d108      	bne.n	8009376 <MDI_getDataChannel2_IT+0x3a>
				tmpArr2[0] = 0xFF;
 8009364:	4b36      	ldr	r3, [pc, #216]	; (8009440 <MDI_getDataChannel2_IT+0x104>)
 8009366:	22ff      	movs	r2, #255	; 0xff
 8009368:	701a      	strb	r2, [r3, #0]
				tmpArr2[1] = 0xFF;
 800936a:	4b35      	ldr	r3, [pc, #212]	; (8009440 <MDI_getDataChannel2_IT+0x104>)
 800936c:	22ff      	movs	r2, #255	; 0xff
 800936e:	705a      	strb	r2, [r3, #1]
				counter = 1;
 8009370:	4b34      	ldr	r3, [pc, #208]	; (8009444 <MDI_getDataChannel2_IT+0x108>)
 8009372:	2201      	movs	r2, #1
 8009374:	701a      	strb	r2, [r3, #0]
			}
			tmpArr2[counter] = getTmpCH2;
 8009376:	4b33      	ldr	r3, [pc, #204]	; (8009444 <MDI_getDataChannel2_IT+0x108>)
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	461a      	mov	r2, r3
 800937c:	4b2e      	ldr	r3, [pc, #184]	; (8009438 <MDI_getDataChannel2_IT+0xfc>)
 800937e:	7819      	ldrb	r1, [r3, #0]
 8009380:	4b2f      	ldr	r3, [pc, #188]	; (8009440 <MDI_getDataChannel2_IT+0x104>)
 8009382:	5499      	strb	r1, [r3, r2]
			getTmpBeff = getTmpCH2;
 8009384:	4b2c      	ldr	r3, [pc, #176]	; (8009438 <MDI_getDataChannel2_IT+0xfc>)
 8009386:	781a      	ldrb	r2, [r3, #0]
 8009388:	4b2c      	ldr	r3, [pc, #176]	; (800943c <MDI_getDataChannel2_IT+0x100>)
 800938a:	701a      	strb	r2, [r3, #0]
			counter++;
 800938c:	4b2d      	ldr	r3, [pc, #180]	; (8009444 <MDI_getDataChannel2_IT+0x108>)
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	3301      	adds	r3, #1
 8009392:	b2da      	uxtb	r2, r3
 8009394:	4b2b      	ldr	r3, [pc, #172]	; (8009444 <MDI_getDataChannel2_IT+0x108>)
 8009396:	701a      	strb	r2, [r3, #0]
			if (counter > 9) {
 8009398:	4b2a      	ldr	r3, [pc, #168]	; (8009444 <MDI_getDataChannel2_IT+0x108>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	2b09      	cmp	r3, #9
 800939e:	d93f      	bls.n	8009420 <MDI_getDataChannel2_IT+0xe4>
				counter = 0;
 80093a0:	4b28      	ldr	r3, [pc, #160]	; (8009444 <MDI_getDataChannel2_IT+0x108>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	701a      	strb	r2, [r3, #0]
				uint16_t checksumTmp = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	82fb      	strh	r3, [r7, #22]
				for (uint8_t c = 2; c < 8; c++)
 80093aa:	2302      	movs	r3, #2
 80093ac:	757b      	strb	r3, [r7, #21]
 80093ae:	e009      	b.n	80093c4 <MDI_getDataChannel2_IT+0x88>
					checksumTmp += tmpArr2[c];
 80093b0:	7d7b      	ldrb	r3, [r7, #21]
 80093b2:	4a23      	ldr	r2, [pc, #140]	; (8009440 <MDI_getDataChannel2_IT+0x104>)
 80093b4:	5cd3      	ldrb	r3, [r2, r3]
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	8afb      	ldrh	r3, [r7, #22]
 80093ba:	4413      	add	r3, r2
 80093bc:	82fb      	strh	r3, [r7, #22]
				for (uint8_t c = 2; c < 8; c++)
 80093be:	7d7b      	ldrb	r3, [r7, #21]
 80093c0:	3301      	adds	r3, #1
 80093c2:	757b      	strb	r3, [r7, #21]
 80093c4:	7d7b      	ldrb	r3, [r7, #21]
 80093c6:	2b07      	cmp	r3, #7
 80093c8:	d9f2      	bls.n	80093b0 <MDI_getDataChannel2_IT+0x74>
				uint8_t tmp = checksumTmp % 256;
 80093ca:	8afb      	ldrh	r3, [r7, #22]
 80093cc:	73fb      	strb	r3, [r7, #15]
				uint8_t tmpComp = ~tmp;
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
 80093d0:	43db      	mvns	r3, r3
 80093d2:	73bb      	strb	r3, [r7, #14]
				if (tmp == tmpArr2[8] && tmpComp == tmpArr2[9]) {
 80093d4:	4b1a      	ldr	r3, [pc, #104]	; (8009440 <MDI_getDataChannel2_IT+0x104>)
 80093d6:	7a1b      	ldrb	r3, [r3, #8]
 80093d8:	7bfa      	ldrb	r2, [r7, #15]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d120      	bne.n	8009420 <MDI_getDataChannel2_IT+0xe4>
 80093de:	4b18      	ldr	r3, [pc, #96]	; (8009440 <MDI_getDataChannel2_IT+0x104>)
 80093e0:	7a5b      	ldrb	r3, [r3, #9]
 80093e2:	7bba      	ldrb	r2, [r7, #14]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d11b      	bne.n	8009420 <MDI_getDataChannel2_IT+0xe4>
					driver2.angle = ((uint16_t) tmpArr2[2] << 8) | tmpArr2[3];
 80093e8:	4b15      	ldr	r3, [pc, #84]	; (8009440 <MDI_getDataChannel2_IT+0x104>)
 80093ea:	789b      	ldrb	r3, [r3, #2]
 80093ec:	021b      	lsls	r3, r3, #8
 80093ee:	b21a      	sxth	r2, r3
 80093f0:	4b13      	ldr	r3, [pc, #76]	; (8009440 <MDI_getDataChannel2_IT+0x104>)
 80093f2:	78db      	ldrb	r3, [r3, #3]
 80093f4:	b21b      	sxth	r3, r3
 80093f6:	4313      	orrs	r3, r2
 80093f8:	b21b      	sxth	r3, r3
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	4b12      	ldr	r3, [pc, #72]	; (8009448 <MDI_getDataChannel2_IT+0x10c>)
 80093fe:	809a      	strh	r2, [r3, #4]
					driver2.pid_kp = tmpArr2[4];
 8009400:	4b0f      	ldr	r3, [pc, #60]	; (8009440 <MDI_getDataChannel2_IT+0x104>)
 8009402:	791a      	ldrb	r2, [r3, #4]
 8009404:	4b10      	ldr	r3, [pc, #64]	; (8009448 <MDI_getDataChannel2_IT+0x10c>)
 8009406:	709a      	strb	r2, [r3, #2]
					driver2.pid_ki = tmpArr2[5];
 8009408:	4b0d      	ldr	r3, [pc, #52]	; (8009440 <MDI_getDataChannel2_IT+0x104>)
 800940a:	795a      	ldrb	r2, [r3, #5]
 800940c:	4b0e      	ldr	r3, [pc, #56]	; (8009448 <MDI_getDataChannel2_IT+0x10c>)
 800940e:	705a      	strb	r2, [r3, #1]
					driver2.pid_kd = tmpArr2[6];
 8009410:	4b0b      	ldr	r3, [pc, #44]	; (8009440 <MDI_getDataChannel2_IT+0x104>)
 8009412:	799a      	ldrb	r2, [r3, #6]
 8009414:	4b0c      	ldr	r3, [pc, #48]	; (8009448 <MDI_getDataChannel2_IT+0x10c>)
 8009416:	701a      	strb	r2, [r3, #0]
					driver2.factor = tmpArr2[7];
 8009418:	4b09      	ldr	r3, [pc, #36]	; (8009440 <MDI_getDataChannel2_IT+0x104>)
 800941a:	79da      	ldrb	r2, [r3, #7]
 800941c:	4b0a      	ldr	r3, [pc, #40]	; (8009448 <MDI_getDataChannel2_IT+0x10c>)
 800941e:	70da      	strb	r2, [r3, #3]
				}
			}
			HAL_UART_Receive_IT(callBackHandle, &getTmpCH2, 1);
 8009420:	2201      	movs	r2, #1
 8009422:	4905      	ldr	r1, [pc, #20]	; (8009438 <MDI_getDataChannel2_IT+0xfc>)
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7fa ff88 	bl	800433a <HAL_UART_Receive_IT>
	}
}
 800942a:	bf00      	nop
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20004b28 	.word	0x20004b28
 8009438:	200049fa 	.word	0x200049fa
 800943c:	20004a08 	.word	0x20004a08
 8009440:	200049fc 	.word	0x200049fc
 8009444:	20004a09 	.word	0x20004a09
 8009448:	20004d1c 	.word	0x20004d1c

0800944c <getDriver1ReceiveVal>:
}
uint16_t getDriver2angle(void) {
	return driver2.factor;
}

mD_interface getDriver1ReceiveVal(void) {
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
	return driver1;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a05      	ldr	r2, [pc, #20]	; (800946c <getDriver1ReceiveVal+0x20>)
 8009458:	6811      	ldr	r1, [r2, #0]
 800945a:	6019      	str	r1, [r3, #0]
 800945c:	8892      	ldrh	r2, [r2, #4]
 800945e:	809a      	strh	r2, [r3, #4]
}
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	20004d24 	.word	0x20004d24

08009470 <getDriver2ReceiveVal>:
mD_interface getDriver2ReceiveVal(void) {
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	return driver2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a05      	ldr	r2, [pc, #20]	; (8009490 <getDriver2ReceiveVal+0x20>)
 800947c:	6811      	ldr	r1, [r2, #0]
 800947e:	6019      	str	r1, [r3, #0]
 8009480:	8892      	ldrh	r2, [r2, #4]
 8009482:	809a      	strh	r2, [r3, #4]
}
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr
 8009490:	20004d1c 	.word	0x20004d1c

08009494 <tasks_init>:
void getDataUartComputerTask(void *params);

xSemaphoreHandle uart1SemphrHandle=NULL;
xSemaphoreHandle uart2SemphrHandle=NULL;
xSemaphoreHandle uart3SemphrHandle=NULL;
void tasks_init(void){
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af02      	add	r7, sp, #8
	 * @param usStackDepth-> stack size
	 * @param pvParameters-> function parameters
	 * @param uxPriority -> Priority
	 * @param pxCreatedTask -> handle so id
	 * */
	vSemaphoreCreateBinary(uart1SemphrHandle);
 800949a:	2203      	movs	r2, #3
 800949c:	2100      	movs	r1, #0
 800949e:	2001      	movs	r0, #1
 80094a0:	f7fb ff15 	bl	80052ce <xQueueGenericCreate>
 80094a4:	4602      	mov	r2, r0
 80094a6:	4b51      	ldr	r3, [pc, #324]	; (80095ec <tasks_init+0x158>)
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	4b50      	ldr	r3, [pc, #320]	; (80095ec <tasks_init+0x158>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d006      	beq.n	80094c0 <tasks_init+0x2c>
 80094b2:	4b4e      	ldr	r3, [pc, #312]	; (80095ec <tasks_init+0x158>)
 80094b4:	6818      	ldr	r0, [r3, #0]
 80094b6:	2300      	movs	r3, #0
 80094b8:	2200      	movs	r2, #0
 80094ba:	2100      	movs	r1, #0
 80094bc:	f7fb ff6a 	bl	8005394 <xQueueGenericSend>
	vSemaphoreCreateBinary(uart2SemphrHandle);
 80094c0:	2203      	movs	r2, #3
 80094c2:	2100      	movs	r1, #0
 80094c4:	2001      	movs	r0, #1
 80094c6:	f7fb ff02 	bl	80052ce <xQueueGenericCreate>
 80094ca:	4602      	mov	r2, r0
 80094cc:	4b48      	ldr	r3, [pc, #288]	; (80095f0 <tasks_init+0x15c>)
 80094ce:	601a      	str	r2, [r3, #0]
 80094d0:	4b47      	ldr	r3, [pc, #284]	; (80095f0 <tasks_init+0x15c>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d006      	beq.n	80094e6 <tasks_init+0x52>
 80094d8:	4b45      	ldr	r3, [pc, #276]	; (80095f0 <tasks_init+0x15c>)
 80094da:	6818      	ldr	r0, [r3, #0]
 80094dc:	2300      	movs	r3, #0
 80094de:	2200      	movs	r2, #0
 80094e0:	2100      	movs	r1, #0
 80094e2:	f7fb ff57 	bl	8005394 <xQueueGenericSend>
	vSemaphoreCreateBinary(uart3SemphrHandle);
 80094e6:	2203      	movs	r2, #3
 80094e8:	2100      	movs	r1, #0
 80094ea:	2001      	movs	r0, #1
 80094ec:	f7fb feef 	bl	80052ce <xQueueGenericCreate>
 80094f0:	4602      	mov	r2, r0
 80094f2:	4b40      	ldr	r3, [pc, #256]	; (80095f4 <tasks_init+0x160>)
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	4b3f      	ldr	r3, [pc, #252]	; (80095f4 <tasks_init+0x160>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d006      	beq.n	800950c <tasks_init+0x78>
 80094fe:	4b3d      	ldr	r3, [pc, #244]	; (80095f4 <tasks_init+0x160>)
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	2300      	movs	r3, #0
 8009504:	2200      	movs	r2, #0
 8009506:	2100      	movs	r1, #0
 8009508:	f7fb ff44 	bl	8005394 <xQueueGenericSend>


	if(uart1SemphrHandle!=NULL && uart2SemphrHandle!=NULL && uart3SemphrHandle!=NULL){
 800950c:	4b37      	ldr	r3, [pc, #220]	; (80095ec <tasks_init+0x158>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d067      	beq.n	80095e4 <tasks_init+0x150>
 8009514:	4b36      	ldr	r3, [pc, #216]	; (80095f0 <tasks_init+0x15c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d063      	beq.n	80095e4 <tasks_init+0x150>
 800951c:	4b35      	ldr	r3, [pc, #212]	; (80095f4 <tasks_init+0x160>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d05f      	beq.n	80095e4 <tasks_init+0x150>

		xTaskCreate(sendDataUartComputerTask, "send Uart C", configMINIMAL_STACK_SIZE*2, NULL,  55 , NULL);
 8009524:	2300      	movs	r3, #0
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	2337      	movs	r3, #55	; 0x37
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	2300      	movs	r3, #0
 800952e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009532:	4931      	ldr	r1, [pc, #196]	; (80095f8 <tasks_init+0x164>)
 8009534:	4831      	ldr	r0, [pc, #196]	; (80095fc <tasks_init+0x168>)
 8009536:	f7fc fc7d 	bl	8005e34 <xTaskCreate>
		xTaskCreate(getDataUartComputerTask, "get Uart C", configMINIMAL_STACK_SIZE*2, NULL,  55 , NULL);
 800953a:	2300      	movs	r3, #0
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	2337      	movs	r3, #55	; 0x37
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	2300      	movs	r3, #0
 8009544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009548:	492d      	ldr	r1, [pc, #180]	; (8009600 <tasks_init+0x16c>)
 800954a:	482e      	ldr	r0, [pc, #184]	; (8009604 <tasks_init+0x170>)
 800954c:	f7fc fc72 	bl	8005e34 <xTaskCreate>
		xTaskCreate(sendDataUart1Task, "send Uart 1", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 8009550:	2300      	movs	r3, #0
 8009552:	9301      	str	r3, [sp, #4]
 8009554:	2337      	movs	r3, #55	; 0x37
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	2300      	movs	r3, #0
 800955a:	2280      	movs	r2, #128	; 0x80
 800955c:	492a      	ldr	r1, [pc, #168]	; (8009608 <tasks_init+0x174>)
 800955e:	482b      	ldr	r0, [pc, #172]	; (800960c <tasks_init+0x178>)
 8009560:	f7fc fc68 	bl	8005e34 <xTaskCreate>
		xTaskCreate(sendDataUart2Task, "send Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 8009564:	2300      	movs	r3, #0
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	2337      	movs	r3, #55	; 0x37
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	2300      	movs	r3, #0
 800956e:	2280      	movs	r2, #128	; 0x80
 8009570:	4927      	ldr	r1, [pc, #156]	; (8009610 <tasks_init+0x17c>)
 8009572:	4828      	ldr	r0, [pc, #160]	; (8009614 <tasks_init+0x180>)
 8009574:	f7fc fc5e 	bl	8005e34 <xTaskCreate>
		xTaskCreate(getDataUart1Task, "get Uart 1", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 8009578:	2300      	movs	r3, #0
 800957a:	9301      	str	r3, [sp, #4]
 800957c:	2337      	movs	r3, #55	; 0x37
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	2300      	movs	r3, #0
 8009582:	2280      	movs	r2, #128	; 0x80
 8009584:	4924      	ldr	r1, [pc, #144]	; (8009618 <tasks_init+0x184>)
 8009586:	4825      	ldr	r0, [pc, #148]	; (800961c <tasks_init+0x188>)
 8009588:	f7fc fc54 	bl	8005e34 <xTaskCreate>
		xTaskCreate(getDataUart2Task, "get Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 800958c:	2300      	movs	r3, #0
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	2337      	movs	r3, #55	; 0x37
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	2300      	movs	r3, #0
 8009596:	2280      	movs	r2, #128	; 0x80
 8009598:	4921      	ldr	r1, [pc, #132]	; (8009620 <tasks_init+0x18c>)
 800959a:	4822      	ldr	r0, [pc, #136]	; (8009624 <tasks_init+0x190>)
 800959c:	f7fc fc4a 	bl	8005e34 <xTaskCreate>
		xTaskCreate(adcReadTask, "adc read", configMINIMAL_STACK_SIZE, NULL,   55, NULL);
 80095a0:	2300      	movs	r3, #0
 80095a2:	9301      	str	r3, [sp, #4]
 80095a4:	2337      	movs	r3, #55	; 0x37
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	2300      	movs	r3, #0
 80095aa:	2280      	movs	r2, #128	; 0x80
 80095ac:	491e      	ldr	r1, [pc, #120]	; (8009628 <tasks_init+0x194>)
 80095ae:	481f      	ldr	r0, [pc, #124]	; (800962c <tasks_init+0x198>)
 80095b0:	f7fc fc40 	bl	8005e34 <xTaskCreate>
		xTaskCreate(lcdTask, "lcd controller", configMINIMAL_STACK_SIZE*2, NULL,  55 , NULL);
 80095b4:	2300      	movs	r3, #0
 80095b6:	9301      	str	r3, [sp, #4]
 80095b8:	2337      	movs	r3, #55	; 0x37
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	2300      	movs	r3, #0
 80095be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095c2:	491b      	ldr	r1, [pc, #108]	; (8009630 <tasks_init+0x19c>)
 80095c4:	481b      	ldr	r0, [pc, #108]	; (8009634 <tasks_init+0x1a0>)
 80095c6:	f7fc fc35 	bl	8005e34 <xTaskCreate>
		xTaskCreate(buttonControlTask, "button controller", configMINIMAL_STACK_SIZE*2, NULL,  55 , NULL);
 80095ca:	2300      	movs	r3, #0
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	2337      	movs	r3, #55	; 0x37
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	2300      	movs	r3, #0
 80095d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095d8:	4917      	ldr	r1, [pc, #92]	; (8009638 <tasks_init+0x1a4>)
 80095da:	4818      	ldr	r0, [pc, #96]	; (800963c <tasks_init+0x1a8>)
 80095dc:	f7fc fc2a 	bl	8005e34 <xTaskCreate>



		vTaskStartScheduler();
 80095e0:	f7fc fda0 	bl	8006124 <vTaskStartScheduler>
	}
}
 80095e4:	bf00      	nop
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20004a0c 	.word	0x20004a0c
 80095f0:	20004a10 	.word	0x20004a10
 80095f4:	20004a14 	.word	0x20004a14
 80095f8:	0800a110 	.word	0x0800a110
 80095fc:	08009641 	.word	0x08009641
 8009600:	0800a11c 	.word	0x0800a11c
 8009604:	08009651 	.word	0x08009651
 8009608:	0800a128 	.word	0x0800a128
 800960c:	08009681 	.word	0x08009681
 8009610:	0800a134 	.word	0x0800a134
 8009614:	0800968f 	.word	0x0800968f
 8009618:	0800a140 	.word	0x0800a140
 800961c:	0800969d 	.word	0x0800969d
 8009620:	0800a14c 	.word	0x0800a14c
 8009624:	080096cd 	.word	0x080096cd
 8009628:	0800a158 	.word	0x0800a158
 800962c:	080096fd 	.word	0x080096fd
 8009630:	0800a164 	.word	0x0800a164
 8009634:	08009771 	.word	0x08009771
 8009638:	0800a174 	.word	0x0800a174
 800963c:	08009793 	.word	0x08009793

08009640 <sendDataUartComputerTask>:


void sendDataUartComputerTask(void *params){
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
	//uint8_t batt;
	while(1){
		testCIsend();
 8009648:	f7f7 fa2a 	bl	8000aa0 <testCIsend>
 800964c:	e7fc      	b.n	8009648 <sendDataUartComputerTask+0x8>
	...

08009650 <getDataUartComputerTask>:
		//batt=rand()%1;
		//CI_sendDataChannel(0x11,1,1,1,90);

		}
}
void getDataUartComputerTask(void *params){
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart3SemphrHandle, portMAX_DELAY);
 8009658:	4b08      	ldr	r3, [pc, #32]	; (800967c <getDataUartComputerTask+0x2c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009660:	4618      	mov	r0, r3
 8009662:	f7fc f901 	bl	8005868 <xQueueSemaphoreTake>
		CI_enableGetDataChannel();
 8009666:	f7f7 fa55 	bl	8000b14 <CI_enableGetDataChannel>
		xSemaphoreGive(uart3SemphrHandle);
 800966a:	4b04      	ldr	r3, [pc, #16]	; (800967c <getDataUartComputerTask+0x2c>)
 800966c:	6818      	ldr	r0, [r3, #0]
 800966e:	2300      	movs	r3, #0
 8009670:	2200      	movs	r2, #0
 8009672:	2100      	movs	r1, #0
 8009674:	f7fb fe8e 	bl	8005394 <xQueueGenericSend>
		xSemaphoreTake(uart3SemphrHandle, portMAX_DELAY);
 8009678:	e7ee      	b.n	8009658 <getDataUartComputerTask+0x8>
 800967a:	bf00      	nop
 800967c:	20004a14 	.word	0x20004a14

08009680 <sendDataUart1Task>:

	}
}
void sendDataUart1Task(void *params){
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]

	while(1){
			transmissionDriver1();
 8009688:	f7fe fdd6 	bl	8008238 <transmissionDriver1>
 800968c:	e7fc      	b.n	8009688 <sendDataUart1Task+0x8>

0800968e <sendDataUart2Task>:

	}
}
void sendDataUart2Task(void *params){
 800968e:	b580      	push	{r7, lr}
 8009690:	b082      	sub	sp, #8
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
	while(1){
			transmissionDriver2();
 8009696:	f7fe fde7 	bl	8008268 <transmissionDriver2>
 800969a:	e7fc      	b.n	8009696 <sendDataUart2Task+0x8>

0800969c <getDataUart1Task>:
	}
}
void getDataUart1Task(void *params){
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart1SemphrHandle, portMAX_DELAY);
 80096a4:	4b08      	ldr	r3, [pc, #32]	; (80096c8 <getDataUart1Task+0x2c>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fc f8db 	bl	8005868 <xQueueSemaphoreTake>
		MDI_enableGetDataChannel1();
 80096b2:	f7ff fd31 	bl	8009118 <MDI_enableGetDataChannel1>
		xSemaphoreGive(uart1SemphrHandle);
 80096b6:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <getDataUart1Task+0x2c>)
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	2300      	movs	r3, #0
 80096bc:	2200      	movs	r2, #0
 80096be:	2100      	movs	r1, #0
 80096c0:	f7fb fe68 	bl	8005394 <xQueueGenericSend>
		xSemaphoreTake(uart1SemphrHandle, portMAX_DELAY);
 80096c4:	e7ee      	b.n	80096a4 <getDataUart1Task+0x8>
 80096c6:	bf00      	nop
 80096c8:	20004a0c 	.word	0x20004a0c

080096cc <getDataUart2Task>:

	}
}
void getDataUart2Task(void *params){
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart2SemphrHandle, portMAX_DELAY);
 80096d4:	4b08      	ldr	r3, [pc, #32]	; (80096f8 <getDataUart2Task+0x2c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fc f8c3 	bl	8005868 <xQueueSemaphoreTake>
		MDI_enableGetDataChannel2();
 80096e2:	f7ff fe1d 	bl	8009320 <MDI_enableGetDataChannel2>
		xSemaphoreGive(uart2SemphrHandle);
 80096e6:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <getDataUart2Task+0x2c>)
 80096e8:	6818      	ldr	r0, [r3, #0]
 80096ea:	2300      	movs	r3, #0
 80096ec:	2200      	movs	r2, #0
 80096ee:	2100      	movs	r1, #0
 80096f0:	f7fb fe50 	bl	8005394 <xQueueGenericSend>
		xSemaphoreTake(uart2SemphrHandle, portMAX_DELAY);
 80096f4:	e7ee      	b.n	80096d4 <getDataUart2Task+0x8>
 80096f6:	bf00      	nop
 80096f8:	20004a10 	.word	0x20004a10

080096fc <adcReadTask>:
	}
}
void adcReadTask(void *params){
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af02      	add	r7, sp, #8
 8009702:	6078      	str	r0, [r7, #4]
	uint16_t val1,val2;
	while(1){
		readAnalog2Values(&ADCREADCH1,&ADCREADCH2);
 8009704:	4918      	ldr	r1, [pc, #96]	; (8009768 <adcReadTask+0x6c>)
 8009706:	4819      	ldr	r0, [pc, #100]	; (800976c <adcReadTask+0x70>)
 8009708:	f7fe fa78 	bl	8007bfc <readAnalog2Values>
			val1=valuesMap(getAnalogValue1(),0,4095,140,860);
 800970c:	f7fe fada 	bl	8007cc4 <getAnalogValue1>
 8009710:	4603      	mov	r3, r0
 8009712:	4618      	mov	r0, r3
 8009714:	f44f 7357 	mov.w	r3, #860	; 0x35c
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	238c      	movs	r3, #140	; 0x8c
 800971c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8009720:	2100      	movs	r1, #0
 8009722:	f7fe fae7 	bl	8007cf4 <valuesMap>
 8009726:	4603      	mov	r3, r0
 8009728:	81fb      	strh	r3, [r7, #14]
			setDriver1AngleValue(val1);
 800972a:	89fb      	ldrh	r3, [r7, #14]
 800972c:	4618      	mov	r0, r3
 800972e:	f7fe fba5 	bl	8007e7c <setDriver1AngleValue>
			vTaskDelay(10);
 8009732:	200a      	movs	r0, #10
 8009734:	f7fc fcc2 	bl	80060bc <vTaskDelay>
			val2=valuesMap(getAnalogValue2(),0,4095,140,860);
 8009738:	f7fe fad0 	bl	8007cdc <getAnalogValue2>
 800973c:	4603      	mov	r3, r0
 800973e:	4618      	mov	r0, r3
 8009740:	f44f 7357 	mov.w	r3, #860	; 0x35c
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	238c      	movs	r3, #140	; 0x8c
 8009748:	f640 72ff 	movw	r2, #4095	; 0xfff
 800974c:	2100      	movs	r1, #0
 800974e:	f7fe fad1 	bl	8007cf4 <valuesMap>
 8009752:	4603      	mov	r3, r0
 8009754:	81bb      	strh	r3, [r7, #12]
			setDriver2AngleValue(val2);
 8009756:	89bb      	ldrh	r3, [r7, #12]
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe fb9f 	bl	8007e9c <setDriver2AngleValue>
			vTaskDelay(10);
 800975e:	200a      	movs	r0, #10
 8009760:	f7fc fcac 	bl	80060bc <vTaskDelay>
		readAnalog2Values(&ADCREADCH1,&ADCREADCH2);
 8009764:	e7ce      	b.n	8009704 <adcReadTask+0x8>
 8009766:	bf00      	nop
 8009768:	20004a38 	.word	0x20004a38
 800976c:	20004b68 	.word	0x20004b68

08009770 <lcdTask>:
	}
}
void lcdTask(void *params){
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
	lcd_Init();
 8009778:	f7fe fdca 	bl	8008310 <lcd_Init>
	while(1){
	  	lcdController();
 800977c:	f7ff f856 	bl	800882c <lcdController>
	  	vTaskDelay(200);
 8009780:	20c8      	movs	r0, #200	; 0xc8
 8009782:	f7fc fc9b 	bl	80060bc <vTaskDelay>
	  	cleanTheLcd();
 8009786:	f7ff f82d 	bl	80087e4 <cleanTheLcd>
	  	vTaskDelay(5);
 800978a:	2005      	movs	r0, #5
 800978c:	f7fc fc96 	bl	80060bc <vTaskDelay>
	  	lcdController();
 8009790:	e7f4      	b.n	800977c <lcdTask+0xc>

08009792 <buttonControlTask>:
	}

}
void buttonControlTask(void *params){
 8009792:	b580      	push	{r7, lr}
 8009794:	b082      	sub	sp, #8
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
	btnParameterInit();
 800979a:	f7fe fb43 	bl	8007e24 <btnParameterInit>
	while(1){
		buttonController();
 800979e:	f7fe fb8d 	bl	8007ebc <buttonController>
		vTaskDelay(50);
 80097a2:	2032      	movs	r0, #50	; 0x32
 80097a4:	f7fc fc8a 	bl	80060bc <vTaskDelay>
		buttonController();
 80097a8:	e7f9      	b.n	800979e <buttonControlTask+0xc>
	...

080097ac <__errno>:
 80097ac:	4b01      	ldr	r3, [pc, #4]	; (80097b4 <__errno+0x8>)
 80097ae:	6818      	ldr	r0, [r3, #0]
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	20000014 	.word	0x20000014

080097b8 <__libc_init_array>:
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	4e0d      	ldr	r6, [pc, #52]	; (80097f0 <__libc_init_array+0x38>)
 80097bc:	4c0d      	ldr	r4, [pc, #52]	; (80097f4 <__libc_init_array+0x3c>)
 80097be:	1ba4      	subs	r4, r4, r6
 80097c0:	10a4      	asrs	r4, r4, #2
 80097c2:	2500      	movs	r5, #0
 80097c4:	42a5      	cmp	r5, r4
 80097c6:	d109      	bne.n	80097dc <__libc_init_array+0x24>
 80097c8:	4e0b      	ldr	r6, [pc, #44]	; (80097f8 <__libc_init_array+0x40>)
 80097ca:	4c0c      	ldr	r4, [pc, #48]	; (80097fc <__libc_init_array+0x44>)
 80097cc:	f000 fc28 	bl	800a020 <_init>
 80097d0:	1ba4      	subs	r4, r4, r6
 80097d2:	10a4      	asrs	r4, r4, #2
 80097d4:	2500      	movs	r5, #0
 80097d6:	42a5      	cmp	r5, r4
 80097d8:	d105      	bne.n	80097e6 <__libc_init_array+0x2e>
 80097da:	bd70      	pop	{r4, r5, r6, pc}
 80097dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097e0:	4798      	blx	r3
 80097e2:	3501      	adds	r5, #1
 80097e4:	e7ee      	b.n	80097c4 <__libc_init_array+0xc>
 80097e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097ea:	4798      	blx	r3
 80097ec:	3501      	adds	r5, #1
 80097ee:	e7f2      	b.n	80097d6 <__libc_init_array+0x1e>
 80097f0:	0800a1fc 	.word	0x0800a1fc
 80097f4:	0800a1fc 	.word	0x0800a1fc
 80097f8:	0800a1fc 	.word	0x0800a1fc
 80097fc:	0800a200 	.word	0x0800a200

08009800 <memcpy>:
 8009800:	b510      	push	{r4, lr}
 8009802:	1e43      	subs	r3, r0, #1
 8009804:	440a      	add	r2, r1
 8009806:	4291      	cmp	r1, r2
 8009808:	d100      	bne.n	800980c <memcpy+0xc>
 800980a:	bd10      	pop	{r4, pc}
 800980c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009814:	e7f7      	b.n	8009806 <memcpy+0x6>

08009816 <memset>:
 8009816:	4402      	add	r2, r0
 8009818:	4603      	mov	r3, r0
 800981a:	4293      	cmp	r3, r2
 800981c:	d100      	bne.n	8009820 <memset+0xa>
 800981e:	4770      	bx	lr
 8009820:	f803 1b01 	strb.w	r1, [r3], #1
 8009824:	e7f9      	b.n	800981a <memset+0x4>
	...

08009828 <siprintf>:
 8009828:	b40e      	push	{r1, r2, r3}
 800982a:	b500      	push	{lr}
 800982c:	b09c      	sub	sp, #112	; 0x70
 800982e:	ab1d      	add	r3, sp, #116	; 0x74
 8009830:	9002      	str	r0, [sp, #8]
 8009832:	9006      	str	r0, [sp, #24]
 8009834:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009838:	4809      	ldr	r0, [pc, #36]	; (8009860 <siprintf+0x38>)
 800983a:	9107      	str	r1, [sp, #28]
 800983c:	9104      	str	r1, [sp, #16]
 800983e:	4909      	ldr	r1, [pc, #36]	; (8009864 <siprintf+0x3c>)
 8009840:	f853 2b04 	ldr.w	r2, [r3], #4
 8009844:	9105      	str	r1, [sp, #20]
 8009846:	6800      	ldr	r0, [r0, #0]
 8009848:	9301      	str	r3, [sp, #4]
 800984a:	a902      	add	r1, sp, #8
 800984c:	f000 f866 	bl	800991c <_svfiprintf_r>
 8009850:	9b02      	ldr	r3, [sp, #8]
 8009852:	2200      	movs	r2, #0
 8009854:	701a      	strb	r2, [r3, #0]
 8009856:	b01c      	add	sp, #112	; 0x70
 8009858:	f85d eb04 	ldr.w	lr, [sp], #4
 800985c:	b003      	add	sp, #12
 800985e:	4770      	bx	lr
 8009860:	20000014 	.word	0x20000014
 8009864:	ffff0208 	.word	0xffff0208

08009868 <__ssputs_r>:
 8009868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800986c:	688e      	ldr	r6, [r1, #8]
 800986e:	429e      	cmp	r6, r3
 8009870:	4682      	mov	sl, r0
 8009872:	460c      	mov	r4, r1
 8009874:	4690      	mov	r8, r2
 8009876:	4699      	mov	r9, r3
 8009878:	d837      	bhi.n	80098ea <__ssputs_r+0x82>
 800987a:	898a      	ldrh	r2, [r1, #12]
 800987c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009880:	d031      	beq.n	80098e6 <__ssputs_r+0x7e>
 8009882:	6825      	ldr	r5, [r4, #0]
 8009884:	6909      	ldr	r1, [r1, #16]
 8009886:	1a6f      	subs	r7, r5, r1
 8009888:	6965      	ldr	r5, [r4, #20]
 800988a:	2302      	movs	r3, #2
 800988c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009890:	fb95 f5f3 	sdiv	r5, r5, r3
 8009894:	f109 0301 	add.w	r3, r9, #1
 8009898:	443b      	add	r3, r7
 800989a:	429d      	cmp	r5, r3
 800989c:	bf38      	it	cc
 800989e:	461d      	movcc	r5, r3
 80098a0:	0553      	lsls	r3, r2, #21
 80098a2:	d530      	bpl.n	8009906 <__ssputs_r+0x9e>
 80098a4:	4629      	mov	r1, r5
 80098a6:	f000 fb21 	bl	8009eec <_malloc_r>
 80098aa:	4606      	mov	r6, r0
 80098ac:	b950      	cbnz	r0, 80098c4 <__ssputs_r+0x5c>
 80098ae:	230c      	movs	r3, #12
 80098b0:	f8ca 3000 	str.w	r3, [sl]
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ba:	81a3      	strh	r3, [r4, #12]
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c4:	463a      	mov	r2, r7
 80098c6:	6921      	ldr	r1, [r4, #16]
 80098c8:	f7ff ff9a 	bl	8009800 <memcpy>
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d6:	81a3      	strh	r3, [r4, #12]
 80098d8:	6126      	str	r6, [r4, #16]
 80098da:	6165      	str	r5, [r4, #20]
 80098dc:	443e      	add	r6, r7
 80098de:	1bed      	subs	r5, r5, r7
 80098e0:	6026      	str	r6, [r4, #0]
 80098e2:	60a5      	str	r5, [r4, #8]
 80098e4:	464e      	mov	r6, r9
 80098e6:	454e      	cmp	r6, r9
 80098e8:	d900      	bls.n	80098ec <__ssputs_r+0x84>
 80098ea:	464e      	mov	r6, r9
 80098ec:	4632      	mov	r2, r6
 80098ee:	4641      	mov	r1, r8
 80098f0:	6820      	ldr	r0, [r4, #0]
 80098f2:	f000 fa93 	bl	8009e1c <memmove>
 80098f6:	68a3      	ldr	r3, [r4, #8]
 80098f8:	1b9b      	subs	r3, r3, r6
 80098fa:	60a3      	str	r3, [r4, #8]
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	441e      	add	r6, r3
 8009900:	6026      	str	r6, [r4, #0]
 8009902:	2000      	movs	r0, #0
 8009904:	e7dc      	b.n	80098c0 <__ssputs_r+0x58>
 8009906:	462a      	mov	r2, r5
 8009908:	f000 fb4a 	bl	8009fa0 <_realloc_r>
 800990c:	4606      	mov	r6, r0
 800990e:	2800      	cmp	r0, #0
 8009910:	d1e2      	bne.n	80098d8 <__ssputs_r+0x70>
 8009912:	6921      	ldr	r1, [r4, #16]
 8009914:	4650      	mov	r0, sl
 8009916:	f000 fa9b 	bl	8009e50 <_free_r>
 800991a:	e7c8      	b.n	80098ae <__ssputs_r+0x46>

0800991c <_svfiprintf_r>:
 800991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	461d      	mov	r5, r3
 8009922:	898b      	ldrh	r3, [r1, #12]
 8009924:	061f      	lsls	r7, r3, #24
 8009926:	b09d      	sub	sp, #116	; 0x74
 8009928:	4680      	mov	r8, r0
 800992a:	460c      	mov	r4, r1
 800992c:	4616      	mov	r6, r2
 800992e:	d50f      	bpl.n	8009950 <_svfiprintf_r+0x34>
 8009930:	690b      	ldr	r3, [r1, #16]
 8009932:	b96b      	cbnz	r3, 8009950 <_svfiprintf_r+0x34>
 8009934:	2140      	movs	r1, #64	; 0x40
 8009936:	f000 fad9 	bl	8009eec <_malloc_r>
 800993a:	6020      	str	r0, [r4, #0]
 800993c:	6120      	str	r0, [r4, #16]
 800993e:	b928      	cbnz	r0, 800994c <_svfiprintf_r+0x30>
 8009940:	230c      	movs	r3, #12
 8009942:	f8c8 3000 	str.w	r3, [r8]
 8009946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800994a:	e0c8      	b.n	8009ade <_svfiprintf_r+0x1c2>
 800994c:	2340      	movs	r3, #64	; 0x40
 800994e:	6163      	str	r3, [r4, #20]
 8009950:	2300      	movs	r3, #0
 8009952:	9309      	str	r3, [sp, #36]	; 0x24
 8009954:	2320      	movs	r3, #32
 8009956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800995a:	2330      	movs	r3, #48	; 0x30
 800995c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009960:	9503      	str	r5, [sp, #12]
 8009962:	f04f 0b01 	mov.w	fp, #1
 8009966:	4637      	mov	r7, r6
 8009968:	463d      	mov	r5, r7
 800996a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800996e:	b10b      	cbz	r3, 8009974 <_svfiprintf_r+0x58>
 8009970:	2b25      	cmp	r3, #37	; 0x25
 8009972:	d13e      	bne.n	80099f2 <_svfiprintf_r+0xd6>
 8009974:	ebb7 0a06 	subs.w	sl, r7, r6
 8009978:	d00b      	beq.n	8009992 <_svfiprintf_r+0x76>
 800997a:	4653      	mov	r3, sl
 800997c:	4632      	mov	r2, r6
 800997e:	4621      	mov	r1, r4
 8009980:	4640      	mov	r0, r8
 8009982:	f7ff ff71 	bl	8009868 <__ssputs_r>
 8009986:	3001      	adds	r0, #1
 8009988:	f000 80a4 	beq.w	8009ad4 <_svfiprintf_r+0x1b8>
 800998c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800998e:	4453      	add	r3, sl
 8009990:	9309      	str	r3, [sp, #36]	; 0x24
 8009992:	783b      	ldrb	r3, [r7, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 809d 	beq.w	8009ad4 <_svfiprintf_r+0x1b8>
 800999a:	2300      	movs	r3, #0
 800999c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099a4:	9304      	str	r3, [sp, #16]
 80099a6:	9307      	str	r3, [sp, #28]
 80099a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099ac:	931a      	str	r3, [sp, #104]	; 0x68
 80099ae:	462f      	mov	r7, r5
 80099b0:	2205      	movs	r2, #5
 80099b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80099b6:	4850      	ldr	r0, [pc, #320]	; (8009af8 <_svfiprintf_r+0x1dc>)
 80099b8:	f7f6 fc12 	bl	80001e0 <memchr>
 80099bc:	9b04      	ldr	r3, [sp, #16]
 80099be:	b9d0      	cbnz	r0, 80099f6 <_svfiprintf_r+0xda>
 80099c0:	06d9      	lsls	r1, r3, #27
 80099c2:	bf44      	itt	mi
 80099c4:	2220      	movmi	r2, #32
 80099c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099ca:	071a      	lsls	r2, r3, #28
 80099cc:	bf44      	itt	mi
 80099ce:	222b      	movmi	r2, #43	; 0x2b
 80099d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099d4:	782a      	ldrb	r2, [r5, #0]
 80099d6:	2a2a      	cmp	r2, #42	; 0x2a
 80099d8:	d015      	beq.n	8009a06 <_svfiprintf_r+0xea>
 80099da:	9a07      	ldr	r2, [sp, #28]
 80099dc:	462f      	mov	r7, r5
 80099de:	2000      	movs	r0, #0
 80099e0:	250a      	movs	r5, #10
 80099e2:	4639      	mov	r1, r7
 80099e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099e8:	3b30      	subs	r3, #48	; 0x30
 80099ea:	2b09      	cmp	r3, #9
 80099ec:	d94d      	bls.n	8009a8a <_svfiprintf_r+0x16e>
 80099ee:	b1b8      	cbz	r0, 8009a20 <_svfiprintf_r+0x104>
 80099f0:	e00f      	b.n	8009a12 <_svfiprintf_r+0xf6>
 80099f2:	462f      	mov	r7, r5
 80099f4:	e7b8      	b.n	8009968 <_svfiprintf_r+0x4c>
 80099f6:	4a40      	ldr	r2, [pc, #256]	; (8009af8 <_svfiprintf_r+0x1dc>)
 80099f8:	1a80      	subs	r0, r0, r2
 80099fa:	fa0b f000 	lsl.w	r0, fp, r0
 80099fe:	4318      	orrs	r0, r3
 8009a00:	9004      	str	r0, [sp, #16]
 8009a02:	463d      	mov	r5, r7
 8009a04:	e7d3      	b.n	80099ae <_svfiprintf_r+0x92>
 8009a06:	9a03      	ldr	r2, [sp, #12]
 8009a08:	1d11      	adds	r1, r2, #4
 8009a0a:	6812      	ldr	r2, [r2, #0]
 8009a0c:	9103      	str	r1, [sp, #12]
 8009a0e:	2a00      	cmp	r2, #0
 8009a10:	db01      	blt.n	8009a16 <_svfiprintf_r+0xfa>
 8009a12:	9207      	str	r2, [sp, #28]
 8009a14:	e004      	b.n	8009a20 <_svfiprintf_r+0x104>
 8009a16:	4252      	negs	r2, r2
 8009a18:	f043 0302 	orr.w	r3, r3, #2
 8009a1c:	9207      	str	r2, [sp, #28]
 8009a1e:	9304      	str	r3, [sp, #16]
 8009a20:	783b      	ldrb	r3, [r7, #0]
 8009a22:	2b2e      	cmp	r3, #46	; 0x2e
 8009a24:	d10c      	bne.n	8009a40 <_svfiprintf_r+0x124>
 8009a26:	787b      	ldrb	r3, [r7, #1]
 8009a28:	2b2a      	cmp	r3, #42	; 0x2a
 8009a2a:	d133      	bne.n	8009a94 <_svfiprintf_r+0x178>
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	1d1a      	adds	r2, r3, #4
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	9203      	str	r2, [sp, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	bfb8      	it	lt
 8009a38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a3c:	3702      	adds	r7, #2
 8009a3e:	9305      	str	r3, [sp, #20]
 8009a40:	4d2e      	ldr	r5, [pc, #184]	; (8009afc <_svfiprintf_r+0x1e0>)
 8009a42:	7839      	ldrb	r1, [r7, #0]
 8009a44:	2203      	movs	r2, #3
 8009a46:	4628      	mov	r0, r5
 8009a48:	f7f6 fbca 	bl	80001e0 <memchr>
 8009a4c:	b138      	cbz	r0, 8009a5e <_svfiprintf_r+0x142>
 8009a4e:	2340      	movs	r3, #64	; 0x40
 8009a50:	1b40      	subs	r0, r0, r5
 8009a52:	fa03 f000 	lsl.w	r0, r3, r0
 8009a56:	9b04      	ldr	r3, [sp, #16]
 8009a58:	4303      	orrs	r3, r0
 8009a5a:	3701      	adds	r7, #1
 8009a5c:	9304      	str	r3, [sp, #16]
 8009a5e:	7839      	ldrb	r1, [r7, #0]
 8009a60:	4827      	ldr	r0, [pc, #156]	; (8009b00 <_svfiprintf_r+0x1e4>)
 8009a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a66:	2206      	movs	r2, #6
 8009a68:	1c7e      	adds	r6, r7, #1
 8009a6a:	f7f6 fbb9 	bl	80001e0 <memchr>
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d038      	beq.n	8009ae4 <_svfiprintf_r+0x1c8>
 8009a72:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <_svfiprintf_r+0x1e8>)
 8009a74:	bb13      	cbnz	r3, 8009abc <_svfiprintf_r+0x1a0>
 8009a76:	9b03      	ldr	r3, [sp, #12]
 8009a78:	3307      	adds	r3, #7
 8009a7a:	f023 0307 	bic.w	r3, r3, #7
 8009a7e:	3308      	adds	r3, #8
 8009a80:	9303      	str	r3, [sp, #12]
 8009a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a84:	444b      	add	r3, r9
 8009a86:	9309      	str	r3, [sp, #36]	; 0x24
 8009a88:	e76d      	b.n	8009966 <_svfiprintf_r+0x4a>
 8009a8a:	fb05 3202 	mla	r2, r5, r2, r3
 8009a8e:	2001      	movs	r0, #1
 8009a90:	460f      	mov	r7, r1
 8009a92:	e7a6      	b.n	80099e2 <_svfiprintf_r+0xc6>
 8009a94:	2300      	movs	r3, #0
 8009a96:	3701      	adds	r7, #1
 8009a98:	9305      	str	r3, [sp, #20]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	250a      	movs	r5, #10
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aa4:	3a30      	subs	r2, #48	; 0x30
 8009aa6:	2a09      	cmp	r2, #9
 8009aa8:	d903      	bls.n	8009ab2 <_svfiprintf_r+0x196>
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0c8      	beq.n	8009a40 <_svfiprintf_r+0x124>
 8009aae:	9105      	str	r1, [sp, #20]
 8009ab0:	e7c6      	b.n	8009a40 <_svfiprintf_r+0x124>
 8009ab2:	fb05 2101 	mla	r1, r5, r1, r2
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4607      	mov	r7, r0
 8009aba:	e7f0      	b.n	8009a9e <_svfiprintf_r+0x182>
 8009abc:	ab03      	add	r3, sp, #12
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	4622      	mov	r2, r4
 8009ac2:	4b11      	ldr	r3, [pc, #68]	; (8009b08 <_svfiprintf_r+0x1ec>)
 8009ac4:	a904      	add	r1, sp, #16
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	f3af 8000 	nop.w
 8009acc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009ad0:	4681      	mov	r9, r0
 8009ad2:	d1d6      	bne.n	8009a82 <_svfiprintf_r+0x166>
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	065b      	lsls	r3, r3, #25
 8009ad8:	f53f af35 	bmi.w	8009946 <_svfiprintf_r+0x2a>
 8009adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ade:	b01d      	add	sp, #116	; 0x74
 8009ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae4:	ab03      	add	r3, sp, #12
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	4622      	mov	r2, r4
 8009aea:	4b07      	ldr	r3, [pc, #28]	; (8009b08 <_svfiprintf_r+0x1ec>)
 8009aec:	a904      	add	r1, sp, #16
 8009aee:	4640      	mov	r0, r8
 8009af0:	f000 f882 	bl	8009bf8 <_printf_i>
 8009af4:	e7ea      	b.n	8009acc <_svfiprintf_r+0x1b0>
 8009af6:	bf00      	nop
 8009af8:	0800a1c0 	.word	0x0800a1c0
 8009afc:	0800a1c6 	.word	0x0800a1c6
 8009b00:	0800a1ca 	.word	0x0800a1ca
 8009b04:	00000000 	.word	0x00000000
 8009b08:	08009869 	.word	0x08009869

08009b0c <_printf_common>:
 8009b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b10:	4691      	mov	r9, r2
 8009b12:	461f      	mov	r7, r3
 8009b14:	688a      	ldr	r2, [r1, #8]
 8009b16:	690b      	ldr	r3, [r1, #16]
 8009b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	bfb8      	it	lt
 8009b20:	4613      	movlt	r3, r2
 8009b22:	f8c9 3000 	str.w	r3, [r9]
 8009b26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	b112      	cbz	r2, 8009b36 <_printf_common+0x2a>
 8009b30:	3301      	adds	r3, #1
 8009b32:	f8c9 3000 	str.w	r3, [r9]
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	0699      	lsls	r1, r3, #26
 8009b3a:	bf42      	ittt	mi
 8009b3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009b40:	3302      	addmi	r3, #2
 8009b42:	f8c9 3000 	strmi.w	r3, [r9]
 8009b46:	6825      	ldr	r5, [r4, #0]
 8009b48:	f015 0506 	ands.w	r5, r5, #6
 8009b4c:	d107      	bne.n	8009b5e <_printf_common+0x52>
 8009b4e:	f104 0a19 	add.w	sl, r4, #25
 8009b52:	68e3      	ldr	r3, [r4, #12]
 8009b54:	f8d9 2000 	ldr.w	r2, [r9]
 8009b58:	1a9b      	subs	r3, r3, r2
 8009b5a:	42ab      	cmp	r3, r5
 8009b5c:	dc28      	bgt.n	8009bb0 <_printf_common+0xa4>
 8009b5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b62:	6822      	ldr	r2, [r4, #0]
 8009b64:	3300      	adds	r3, #0
 8009b66:	bf18      	it	ne
 8009b68:	2301      	movne	r3, #1
 8009b6a:	0692      	lsls	r2, r2, #26
 8009b6c:	d42d      	bmi.n	8009bca <_printf_common+0xbe>
 8009b6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b72:	4639      	mov	r1, r7
 8009b74:	4630      	mov	r0, r6
 8009b76:	47c0      	blx	r8
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d020      	beq.n	8009bbe <_printf_common+0xb2>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	68e5      	ldr	r5, [r4, #12]
 8009b80:	f8d9 2000 	ldr.w	r2, [r9]
 8009b84:	f003 0306 	and.w	r3, r3, #6
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	bf08      	it	eq
 8009b8c:	1aad      	subeq	r5, r5, r2
 8009b8e:	68a3      	ldr	r3, [r4, #8]
 8009b90:	6922      	ldr	r2, [r4, #16]
 8009b92:	bf0c      	ite	eq
 8009b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b98:	2500      	movne	r5, #0
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	bfc4      	itt	gt
 8009b9e:	1a9b      	subgt	r3, r3, r2
 8009ba0:	18ed      	addgt	r5, r5, r3
 8009ba2:	f04f 0900 	mov.w	r9, #0
 8009ba6:	341a      	adds	r4, #26
 8009ba8:	454d      	cmp	r5, r9
 8009baa:	d11a      	bne.n	8009be2 <_printf_common+0xd6>
 8009bac:	2000      	movs	r0, #0
 8009bae:	e008      	b.n	8009bc2 <_printf_common+0xb6>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	4652      	mov	r2, sl
 8009bb4:	4639      	mov	r1, r7
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	47c0      	blx	r8
 8009bba:	3001      	adds	r0, #1
 8009bbc:	d103      	bne.n	8009bc6 <_printf_common+0xba>
 8009bbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc6:	3501      	adds	r5, #1
 8009bc8:	e7c3      	b.n	8009b52 <_printf_common+0x46>
 8009bca:	18e1      	adds	r1, r4, r3
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	2030      	movs	r0, #48	; 0x30
 8009bd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bd4:	4422      	add	r2, r4
 8009bd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bde:	3302      	adds	r3, #2
 8009be0:	e7c5      	b.n	8009b6e <_printf_common+0x62>
 8009be2:	2301      	movs	r3, #1
 8009be4:	4622      	mov	r2, r4
 8009be6:	4639      	mov	r1, r7
 8009be8:	4630      	mov	r0, r6
 8009bea:	47c0      	blx	r8
 8009bec:	3001      	adds	r0, #1
 8009bee:	d0e6      	beq.n	8009bbe <_printf_common+0xb2>
 8009bf0:	f109 0901 	add.w	r9, r9, #1
 8009bf4:	e7d8      	b.n	8009ba8 <_printf_common+0x9c>
	...

08009bf8 <_printf_i>:
 8009bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bfc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009c00:	460c      	mov	r4, r1
 8009c02:	7e09      	ldrb	r1, [r1, #24]
 8009c04:	b085      	sub	sp, #20
 8009c06:	296e      	cmp	r1, #110	; 0x6e
 8009c08:	4617      	mov	r7, r2
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	4698      	mov	r8, r3
 8009c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c10:	f000 80b3 	beq.w	8009d7a <_printf_i+0x182>
 8009c14:	d822      	bhi.n	8009c5c <_printf_i+0x64>
 8009c16:	2963      	cmp	r1, #99	; 0x63
 8009c18:	d036      	beq.n	8009c88 <_printf_i+0x90>
 8009c1a:	d80a      	bhi.n	8009c32 <_printf_i+0x3a>
 8009c1c:	2900      	cmp	r1, #0
 8009c1e:	f000 80b9 	beq.w	8009d94 <_printf_i+0x19c>
 8009c22:	2958      	cmp	r1, #88	; 0x58
 8009c24:	f000 8083 	beq.w	8009d2e <_printf_i+0x136>
 8009c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009c30:	e032      	b.n	8009c98 <_printf_i+0xa0>
 8009c32:	2964      	cmp	r1, #100	; 0x64
 8009c34:	d001      	beq.n	8009c3a <_printf_i+0x42>
 8009c36:	2969      	cmp	r1, #105	; 0x69
 8009c38:	d1f6      	bne.n	8009c28 <_printf_i+0x30>
 8009c3a:	6820      	ldr	r0, [r4, #0]
 8009c3c:	6813      	ldr	r3, [r2, #0]
 8009c3e:	0605      	lsls	r5, r0, #24
 8009c40:	f103 0104 	add.w	r1, r3, #4
 8009c44:	d52a      	bpl.n	8009c9c <_printf_i+0xa4>
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6011      	str	r1, [r2, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	da03      	bge.n	8009c56 <_printf_i+0x5e>
 8009c4e:	222d      	movs	r2, #45	; 0x2d
 8009c50:	425b      	negs	r3, r3
 8009c52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009c56:	486f      	ldr	r0, [pc, #444]	; (8009e14 <_printf_i+0x21c>)
 8009c58:	220a      	movs	r2, #10
 8009c5a:	e039      	b.n	8009cd0 <_printf_i+0xd8>
 8009c5c:	2973      	cmp	r1, #115	; 0x73
 8009c5e:	f000 809d 	beq.w	8009d9c <_printf_i+0x1a4>
 8009c62:	d808      	bhi.n	8009c76 <_printf_i+0x7e>
 8009c64:	296f      	cmp	r1, #111	; 0x6f
 8009c66:	d020      	beq.n	8009caa <_printf_i+0xb2>
 8009c68:	2970      	cmp	r1, #112	; 0x70
 8009c6a:	d1dd      	bne.n	8009c28 <_printf_i+0x30>
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	f043 0320 	orr.w	r3, r3, #32
 8009c72:	6023      	str	r3, [r4, #0]
 8009c74:	e003      	b.n	8009c7e <_printf_i+0x86>
 8009c76:	2975      	cmp	r1, #117	; 0x75
 8009c78:	d017      	beq.n	8009caa <_printf_i+0xb2>
 8009c7a:	2978      	cmp	r1, #120	; 0x78
 8009c7c:	d1d4      	bne.n	8009c28 <_printf_i+0x30>
 8009c7e:	2378      	movs	r3, #120	; 0x78
 8009c80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c84:	4864      	ldr	r0, [pc, #400]	; (8009e18 <_printf_i+0x220>)
 8009c86:	e055      	b.n	8009d34 <_printf_i+0x13c>
 8009c88:	6813      	ldr	r3, [r2, #0]
 8009c8a:	1d19      	adds	r1, r3, #4
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6011      	str	r1, [r2, #0]
 8009c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e08c      	b.n	8009db6 <_printf_i+0x1be>
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6011      	str	r1, [r2, #0]
 8009ca0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ca4:	bf18      	it	ne
 8009ca6:	b21b      	sxthne	r3, r3
 8009ca8:	e7cf      	b.n	8009c4a <_printf_i+0x52>
 8009caa:	6813      	ldr	r3, [r2, #0]
 8009cac:	6825      	ldr	r5, [r4, #0]
 8009cae:	1d18      	adds	r0, r3, #4
 8009cb0:	6010      	str	r0, [r2, #0]
 8009cb2:	0628      	lsls	r0, r5, #24
 8009cb4:	d501      	bpl.n	8009cba <_printf_i+0xc2>
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	e002      	b.n	8009cc0 <_printf_i+0xc8>
 8009cba:	0668      	lsls	r0, r5, #25
 8009cbc:	d5fb      	bpl.n	8009cb6 <_printf_i+0xbe>
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	4854      	ldr	r0, [pc, #336]	; (8009e14 <_printf_i+0x21c>)
 8009cc2:	296f      	cmp	r1, #111	; 0x6f
 8009cc4:	bf14      	ite	ne
 8009cc6:	220a      	movne	r2, #10
 8009cc8:	2208      	moveq	r2, #8
 8009cca:	2100      	movs	r1, #0
 8009ccc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cd0:	6865      	ldr	r5, [r4, #4]
 8009cd2:	60a5      	str	r5, [r4, #8]
 8009cd4:	2d00      	cmp	r5, #0
 8009cd6:	f2c0 8095 	blt.w	8009e04 <_printf_i+0x20c>
 8009cda:	6821      	ldr	r1, [r4, #0]
 8009cdc:	f021 0104 	bic.w	r1, r1, #4
 8009ce0:	6021      	str	r1, [r4, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d13d      	bne.n	8009d62 <_printf_i+0x16a>
 8009ce6:	2d00      	cmp	r5, #0
 8009ce8:	f040 808e 	bne.w	8009e08 <_printf_i+0x210>
 8009cec:	4665      	mov	r5, ip
 8009cee:	2a08      	cmp	r2, #8
 8009cf0:	d10b      	bne.n	8009d0a <_printf_i+0x112>
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	07db      	lsls	r3, r3, #31
 8009cf6:	d508      	bpl.n	8009d0a <_printf_i+0x112>
 8009cf8:	6923      	ldr	r3, [r4, #16]
 8009cfa:	6862      	ldr	r2, [r4, #4]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	bfde      	ittt	le
 8009d00:	2330      	movle	r3, #48	; 0x30
 8009d02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d06:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d0a:	ebac 0305 	sub.w	r3, ip, r5
 8009d0e:	6123      	str	r3, [r4, #16]
 8009d10:	f8cd 8000 	str.w	r8, [sp]
 8009d14:	463b      	mov	r3, r7
 8009d16:	aa03      	add	r2, sp, #12
 8009d18:	4621      	mov	r1, r4
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f7ff fef6 	bl	8009b0c <_printf_common>
 8009d20:	3001      	adds	r0, #1
 8009d22:	d14d      	bne.n	8009dc0 <_printf_i+0x1c8>
 8009d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d28:	b005      	add	sp, #20
 8009d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d2e:	4839      	ldr	r0, [pc, #228]	; (8009e14 <_printf_i+0x21c>)
 8009d30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009d34:	6813      	ldr	r3, [r2, #0]
 8009d36:	6821      	ldr	r1, [r4, #0]
 8009d38:	1d1d      	adds	r5, r3, #4
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	6015      	str	r5, [r2, #0]
 8009d3e:	060a      	lsls	r2, r1, #24
 8009d40:	d50b      	bpl.n	8009d5a <_printf_i+0x162>
 8009d42:	07ca      	lsls	r2, r1, #31
 8009d44:	bf44      	itt	mi
 8009d46:	f041 0120 	orrmi.w	r1, r1, #32
 8009d4a:	6021      	strmi	r1, [r4, #0]
 8009d4c:	b91b      	cbnz	r3, 8009d56 <_printf_i+0x15e>
 8009d4e:	6822      	ldr	r2, [r4, #0]
 8009d50:	f022 0220 	bic.w	r2, r2, #32
 8009d54:	6022      	str	r2, [r4, #0]
 8009d56:	2210      	movs	r2, #16
 8009d58:	e7b7      	b.n	8009cca <_printf_i+0xd2>
 8009d5a:	064d      	lsls	r5, r1, #25
 8009d5c:	bf48      	it	mi
 8009d5e:	b29b      	uxthmi	r3, r3
 8009d60:	e7ef      	b.n	8009d42 <_printf_i+0x14a>
 8009d62:	4665      	mov	r5, ip
 8009d64:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d68:	fb02 3311 	mls	r3, r2, r1, r3
 8009d6c:	5cc3      	ldrb	r3, [r0, r3]
 8009d6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009d72:	460b      	mov	r3, r1
 8009d74:	2900      	cmp	r1, #0
 8009d76:	d1f5      	bne.n	8009d64 <_printf_i+0x16c>
 8009d78:	e7b9      	b.n	8009cee <_printf_i+0xf6>
 8009d7a:	6813      	ldr	r3, [r2, #0]
 8009d7c:	6825      	ldr	r5, [r4, #0]
 8009d7e:	6961      	ldr	r1, [r4, #20]
 8009d80:	1d18      	adds	r0, r3, #4
 8009d82:	6010      	str	r0, [r2, #0]
 8009d84:	0628      	lsls	r0, r5, #24
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	d501      	bpl.n	8009d8e <_printf_i+0x196>
 8009d8a:	6019      	str	r1, [r3, #0]
 8009d8c:	e002      	b.n	8009d94 <_printf_i+0x19c>
 8009d8e:	066a      	lsls	r2, r5, #25
 8009d90:	d5fb      	bpl.n	8009d8a <_printf_i+0x192>
 8009d92:	8019      	strh	r1, [r3, #0]
 8009d94:	2300      	movs	r3, #0
 8009d96:	6123      	str	r3, [r4, #16]
 8009d98:	4665      	mov	r5, ip
 8009d9a:	e7b9      	b.n	8009d10 <_printf_i+0x118>
 8009d9c:	6813      	ldr	r3, [r2, #0]
 8009d9e:	1d19      	adds	r1, r3, #4
 8009da0:	6011      	str	r1, [r2, #0]
 8009da2:	681d      	ldr	r5, [r3, #0]
 8009da4:	6862      	ldr	r2, [r4, #4]
 8009da6:	2100      	movs	r1, #0
 8009da8:	4628      	mov	r0, r5
 8009daa:	f7f6 fa19 	bl	80001e0 <memchr>
 8009dae:	b108      	cbz	r0, 8009db4 <_printf_i+0x1bc>
 8009db0:	1b40      	subs	r0, r0, r5
 8009db2:	6060      	str	r0, [r4, #4]
 8009db4:	6863      	ldr	r3, [r4, #4]
 8009db6:	6123      	str	r3, [r4, #16]
 8009db8:	2300      	movs	r3, #0
 8009dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dbe:	e7a7      	b.n	8009d10 <_printf_i+0x118>
 8009dc0:	6923      	ldr	r3, [r4, #16]
 8009dc2:	462a      	mov	r2, r5
 8009dc4:	4639      	mov	r1, r7
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	47c0      	blx	r8
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d0aa      	beq.n	8009d24 <_printf_i+0x12c>
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	079b      	lsls	r3, r3, #30
 8009dd2:	d413      	bmi.n	8009dfc <_printf_i+0x204>
 8009dd4:	68e0      	ldr	r0, [r4, #12]
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	4298      	cmp	r0, r3
 8009dda:	bfb8      	it	lt
 8009ddc:	4618      	movlt	r0, r3
 8009dde:	e7a3      	b.n	8009d28 <_printf_i+0x130>
 8009de0:	2301      	movs	r3, #1
 8009de2:	464a      	mov	r2, r9
 8009de4:	4639      	mov	r1, r7
 8009de6:	4630      	mov	r0, r6
 8009de8:	47c0      	blx	r8
 8009dea:	3001      	adds	r0, #1
 8009dec:	d09a      	beq.n	8009d24 <_printf_i+0x12c>
 8009dee:	3501      	adds	r5, #1
 8009df0:	68e3      	ldr	r3, [r4, #12]
 8009df2:	9a03      	ldr	r2, [sp, #12]
 8009df4:	1a9b      	subs	r3, r3, r2
 8009df6:	42ab      	cmp	r3, r5
 8009df8:	dcf2      	bgt.n	8009de0 <_printf_i+0x1e8>
 8009dfa:	e7eb      	b.n	8009dd4 <_printf_i+0x1dc>
 8009dfc:	2500      	movs	r5, #0
 8009dfe:	f104 0919 	add.w	r9, r4, #25
 8009e02:	e7f5      	b.n	8009df0 <_printf_i+0x1f8>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1ac      	bne.n	8009d62 <_printf_i+0x16a>
 8009e08:	7803      	ldrb	r3, [r0, #0]
 8009e0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e12:	e76c      	b.n	8009cee <_printf_i+0xf6>
 8009e14:	0800a1d1 	.word	0x0800a1d1
 8009e18:	0800a1e2 	.word	0x0800a1e2

08009e1c <memmove>:
 8009e1c:	4288      	cmp	r0, r1
 8009e1e:	b510      	push	{r4, lr}
 8009e20:	eb01 0302 	add.w	r3, r1, r2
 8009e24:	d807      	bhi.n	8009e36 <memmove+0x1a>
 8009e26:	1e42      	subs	r2, r0, #1
 8009e28:	4299      	cmp	r1, r3
 8009e2a:	d00a      	beq.n	8009e42 <memmove+0x26>
 8009e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e34:	e7f8      	b.n	8009e28 <memmove+0xc>
 8009e36:	4283      	cmp	r3, r0
 8009e38:	d9f5      	bls.n	8009e26 <memmove+0xa>
 8009e3a:	1881      	adds	r1, r0, r2
 8009e3c:	1ad2      	subs	r2, r2, r3
 8009e3e:	42d3      	cmn	r3, r2
 8009e40:	d100      	bne.n	8009e44 <memmove+0x28>
 8009e42:	bd10      	pop	{r4, pc}
 8009e44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e4c:	e7f7      	b.n	8009e3e <memmove+0x22>
	...

08009e50 <_free_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4605      	mov	r5, r0
 8009e54:	2900      	cmp	r1, #0
 8009e56:	d045      	beq.n	8009ee4 <_free_r+0x94>
 8009e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e5c:	1f0c      	subs	r4, r1, #4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	bfb8      	it	lt
 8009e62:	18e4      	addlt	r4, r4, r3
 8009e64:	f000 f8d2 	bl	800a00c <__malloc_lock>
 8009e68:	4a1f      	ldr	r2, [pc, #124]	; (8009ee8 <_free_r+0x98>)
 8009e6a:	6813      	ldr	r3, [r2, #0]
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	b933      	cbnz	r3, 8009e7e <_free_r+0x2e>
 8009e70:	6063      	str	r3, [r4, #4]
 8009e72:	6014      	str	r4, [r2, #0]
 8009e74:	4628      	mov	r0, r5
 8009e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e7a:	f000 b8c8 	b.w	800a00e <__malloc_unlock>
 8009e7e:	42a3      	cmp	r3, r4
 8009e80:	d90c      	bls.n	8009e9c <_free_r+0x4c>
 8009e82:	6821      	ldr	r1, [r4, #0]
 8009e84:	1862      	adds	r2, r4, r1
 8009e86:	4293      	cmp	r3, r2
 8009e88:	bf04      	itt	eq
 8009e8a:	681a      	ldreq	r2, [r3, #0]
 8009e8c:	685b      	ldreq	r3, [r3, #4]
 8009e8e:	6063      	str	r3, [r4, #4]
 8009e90:	bf04      	itt	eq
 8009e92:	1852      	addeq	r2, r2, r1
 8009e94:	6022      	streq	r2, [r4, #0]
 8009e96:	6004      	str	r4, [r0, #0]
 8009e98:	e7ec      	b.n	8009e74 <_free_r+0x24>
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	b10a      	cbz	r2, 8009ea4 <_free_r+0x54>
 8009ea0:	42a2      	cmp	r2, r4
 8009ea2:	d9fa      	bls.n	8009e9a <_free_r+0x4a>
 8009ea4:	6819      	ldr	r1, [r3, #0]
 8009ea6:	1858      	adds	r0, r3, r1
 8009ea8:	42a0      	cmp	r0, r4
 8009eaa:	d10b      	bne.n	8009ec4 <_free_r+0x74>
 8009eac:	6820      	ldr	r0, [r4, #0]
 8009eae:	4401      	add	r1, r0
 8009eb0:	1858      	adds	r0, r3, r1
 8009eb2:	4282      	cmp	r2, r0
 8009eb4:	6019      	str	r1, [r3, #0]
 8009eb6:	d1dd      	bne.n	8009e74 <_free_r+0x24>
 8009eb8:	6810      	ldr	r0, [r2, #0]
 8009eba:	6852      	ldr	r2, [r2, #4]
 8009ebc:	605a      	str	r2, [r3, #4]
 8009ebe:	4401      	add	r1, r0
 8009ec0:	6019      	str	r1, [r3, #0]
 8009ec2:	e7d7      	b.n	8009e74 <_free_r+0x24>
 8009ec4:	d902      	bls.n	8009ecc <_free_r+0x7c>
 8009ec6:	230c      	movs	r3, #12
 8009ec8:	602b      	str	r3, [r5, #0]
 8009eca:	e7d3      	b.n	8009e74 <_free_r+0x24>
 8009ecc:	6820      	ldr	r0, [r4, #0]
 8009ece:	1821      	adds	r1, r4, r0
 8009ed0:	428a      	cmp	r2, r1
 8009ed2:	bf04      	itt	eq
 8009ed4:	6811      	ldreq	r1, [r2, #0]
 8009ed6:	6852      	ldreq	r2, [r2, #4]
 8009ed8:	6062      	str	r2, [r4, #4]
 8009eda:	bf04      	itt	eq
 8009edc:	1809      	addeq	r1, r1, r0
 8009ede:	6021      	streq	r1, [r4, #0]
 8009ee0:	605c      	str	r4, [r3, #4]
 8009ee2:	e7c7      	b.n	8009e74 <_free_r+0x24>
 8009ee4:	bd38      	pop	{r3, r4, r5, pc}
 8009ee6:	bf00      	nop
 8009ee8:	20004a18 	.word	0x20004a18

08009eec <_malloc_r>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	1ccd      	adds	r5, r1, #3
 8009ef0:	f025 0503 	bic.w	r5, r5, #3
 8009ef4:	3508      	adds	r5, #8
 8009ef6:	2d0c      	cmp	r5, #12
 8009ef8:	bf38      	it	cc
 8009efa:	250c      	movcc	r5, #12
 8009efc:	2d00      	cmp	r5, #0
 8009efe:	4606      	mov	r6, r0
 8009f00:	db01      	blt.n	8009f06 <_malloc_r+0x1a>
 8009f02:	42a9      	cmp	r1, r5
 8009f04:	d903      	bls.n	8009f0e <_malloc_r+0x22>
 8009f06:	230c      	movs	r3, #12
 8009f08:	6033      	str	r3, [r6, #0]
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	bd70      	pop	{r4, r5, r6, pc}
 8009f0e:	f000 f87d 	bl	800a00c <__malloc_lock>
 8009f12:	4a21      	ldr	r2, [pc, #132]	; (8009f98 <_malloc_r+0xac>)
 8009f14:	6814      	ldr	r4, [r2, #0]
 8009f16:	4621      	mov	r1, r4
 8009f18:	b991      	cbnz	r1, 8009f40 <_malloc_r+0x54>
 8009f1a:	4c20      	ldr	r4, [pc, #128]	; (8009f9c <_malloc_r+0xb0>)
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	b91b      	cbnz	r3, 8009f28 <_malloc_r+0x3c>
 8009f20:	4630      	mov	r0, r6
 8009f22:	f000 f863 	bl	8009fec <_sbrk_r>
 8009f26:	6020      	str	r0, [r4, #0]
 8009f28:	4629      	mov	r1, r5
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f000 f85e 	bl	8009fec <_sbrk_r>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d124      	bne.n	8009f7e <_malloc_r+0x92>
 8009f34:	230c      	movs	r3, #12
 8009f36:	6033      	str	r3, [r6, #0]
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f000 f868 	bl	800a00e <__malloc_unlock>
 8009f3e:	e7e4      	b.n	8009f0a <_malloc_r+0x1e>
 8009f40:	680b      	ldr	r3, [r1, #0]
 8009f42:	1b5b      	subs	r3, r3, r5
 8009f44:	d418      	bmi.n	8009f78 <_malloc_r+0x8c>
 8009f46:	2b0b      	cmp	r3, #11
 8009f48:	d90f      	bls.n	8009f6a <_malloc_r+0x7e>
 8009f4a:	600b      	str	r3, [r1, #0]
 8009f4c:	50cd      	str	r5, [r1, r3]
 8009f4e:	18cc      	adds	r4, r1, r3
 8009f50:	4630      	mov	r0, r6
 8009f52:	f000 f85c 	bl	800a00e <__malloc_unlock>
 8009f56:	f104 000b 	add.w	r0, r4, #11
 8009f5a:	1d23      	adds	r3, r4, #4
 8009f5c:	f020 0007 	bic.w	r0, r0, #7
 8009f60:	1ac3      	subs	r3, r0, r3
 8009f62:	d0d3      	beq.n	8009f0c <_malloc_r+0x20>
 8009f64:	425a      	negs	r2, r3
 8009f66:	50e2      	str	r2, [r4, r3]
 8009f68:	e7d0      	b.n	8009f0c <_malloc_r+0x20>
 8009f6a:	428c      	cmp	r4, r1
 8009f6c:	684b      	ldr	r3, [r1, #4]
 8009f6e:	bf16      	itet	ne
 8009f70:	6063      	strne	r3, [r4, #4]
 8009f72:	6013      	streq	r3, [r2, #0]
 8009f74:	460c      	movne	r4, r1
 8009f76:	e7eb      	b.n	8009f50 <_malloc_r+0x64>
 8009f78:	460c      	mov	r4, r1
 8009f7a:	6849      	ldr	r1, [r1, #4]
 8009f7c:	e7cc      	b.n	8009f18 <_malloc_r+0x2c>
 8009f7e:	1cc4      	adds	r4, r0, #3
 8009f80:	f024 0403 	bic.w	r4, r4, #3
 8009f84:	42a0      	cmp	r0, r4
 8009f86:	d005      	beq.n	8009f94 <_malloc_r+0xa8>
 8009f88:	1a21      	subs	r1, r4, r0
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f000 f82e 	bl	8009fec <_sbrk_r>
 8009f90:	3001      	adds	r0, #1
 8009f92:	d0cf      	beq.n	8009f34 <_malloc_r+0x48>
 8009f94:	6025      	str	r5, [r4, #0]
 8009f96:	e7db      	b.n	8009f50 <_malloc_r+0x64>
 8009f98:	20004a18 	.word	0x20004a18
 8009f9c:	20004a1c 	.word	0x20004a1c

08009fa0 <_realloc_r>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	4614      	mov	r4, r2
 8009fa6:	460e      	mov	r6, r1
 8009fa8:	b921      	cbnz	r1, 8009fb4 <_realloc_r+0x14>
 8009faa:	4611      	mov	r1, r2
 8009fac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fb0:	f7ff bf9c 	b.w	8009eec <_malloc_r>
 8009fb4:	b922      	cbnz	r2, 8009fc0 <_realloc_r+0x20>
 8009fb6:	f7ff ff4b 	bl	8009e50 <_free_r>
 8009fba:	4625      	mov	r5, r4
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fc0:	f000 f826 	bl	800a010 <_malloc_usable_size_r>
 8009fc4:	42a0      	cmp	r0, r4
 8009fc6:	d20f      	bcs.n	8009fe8 <_realloc_r+0x48>
 8009fc8:	4621      	mov	r1, r4
 8009fca:	4638      	mov	r0, r7
 8009fcc:	f7ff ff8e 	bl	8009eec <_malloc_r>
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	d0f2      	beq.n	8009fbc <_realloc_r+0x1c>
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4622      	mov	r2, r4
 8009fda:	f7ff fc11 	bl	8009800 <memcpy>
 8009fde:	4631      	mov	r1, r6
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	f7ff ff35 	bl	8009e50 <_free_r>
 8009fe6:	e7e9      	b.n	8009fbc <_realloc_r+0x1c>
 8009fe8:	4635      	mov	r5, r6
 8009fea:	e7e7      	b.n	8009fbc <_realloc_r+0x1c>

08009fec <_sbrk_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4c06      	ldr	r4, [pc, #24]	; (800a008 <_sbrk_r+0x1c>)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	6023      	str	r3, [r4, #0]
 8009ff8:	f7f7 fbd4 	bl	80017a4 <_sbrk>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	d102      	bne.n	800a006 <_sbrk_r+0x1a>
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	b103      	cbz	r3, 800a006 <_sbrk_r+0x1a>
 800a004:	602b      	str	r3, [r5, #0]
 800a006:	bd38      	pop	{r3, r4, r5, pc}
 800a008:	20004d5c 	.word	0x20004d5c

0800a00c <__malloc_lock>:
 800a00c:	4770      	bx	lr

0800a00e <__malloc_unlock>:
 800a00e:	4770      	bx	lr

0800a010 <_malloc_usable_size_r>:
 800a010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a014:	1f18      	subs	r0, r3, #4
 800a016:	2b00      	cmp	r3, #0
 800a018:	bfbc      	itt	lt
 800a01a:	580b      	ldrlt	r3, [r1, r0]
 800a01c:	18c0      	addlt	r0, r0, r3
 800a01e:	4770      	bx	lr

0800a020 <_init>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	bf00      	nop
 800a024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a026:	bc08      	pop	{r3}
 800a028:	469e      	mov	lr, r3
 800a02a:	4770      	bx	lr

0800a02c <_fini>:
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02e:	bf00      	nop
 800a030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a032:	bc08      	pop	{r3}
 800a034:	469e      	mov	lr, r3
 800a036:	4770      	bx	lr
